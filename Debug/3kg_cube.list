
3kg_cube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aff8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001164  0800b1c8  0800b1c8  0001b1c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c32c  0800c32c  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800c32c  0800c32c  0001c32c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c334  0800c334  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c334  0800c334  0001c334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c338  0800c338  0001c338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800c33c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000066c  200001ec  0800c528  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000858  0800c528  00020858  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001571d  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bd3  00000000  00000000  00035939  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001378  00000000  00000000  00038510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001278  00000000  00000000  00039888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000251d4  00000000  00000000  0003ab00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017c89  00000000  00000000  0005fcd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2732  00000000  00000000  0007795d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015a08f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006454  00000000  00000000  0015a0e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001ec 	.word	0x200001ec
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b1b0 	.word	0x0800b1b0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f0 	.word	0x200001f0
 800020c:	0800b1b0 	.word	0x0800b1b0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <HAL_TIM_IC_CaptureCallback>:
#define BASICFUNCTIONS_H

#include "define.h"

//Interrupts
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) // If the interrupt is triggered by channel 1
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	7f1b      	ldrb	r3, [r3, #28]
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d13a      	bne.n	8000f72 <HAL_TIM_IC_CaptureCallback+0x86>
			{
		// Read the IC value
		ICValue_Ch1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000efc:	2100      	movs	r1, #0
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f006 f866 	bl	8006fd0 <HAL_TIM_ReadCapturedValue>
 8000f04:	4603      	mov	r3, r0
 8000f06:	4a3d      	ldr	r2, [pc, #244]	; (8000ffc <HAL_TIM_IC_CaptureCallback+0x110>)
 8000f08:	6013      	str	r3, [r2, #0]

		if (ICValue_Ch1 != 0) {
 8000f0a:	4b3c      	ldr	r3, [pc, #240]	; (8000ffc <HAL_TIM_IC_CaptureCallback+0x110>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d02f      	beq.n	8000f72 <HAL_TIM_IC_CaptureCallback+0x86>
			// calculate the Duty Cycle
			float Duty = (HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2) * 100)
 8000f12:	2104      	movs	r1, #4
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f006 f85b 	bl	8006fd0 <HAL_TIM_ReadCapturedValue>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2264      	movs	r2, #100	; 0x64
 8000f1e:	fb03 f202 	mul.w	r2, r3, r2
					/ ICValue_Ch1;
 8000f22:	4b36      	ldr	r3, [pc, #216]	; (8000ffc <HAL_TIM_IC_CaptureCallback+0x110>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	fbb2 f3f3 	udiv	r3, r2, r3
			float Duty = (HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2) * 100)
 8000f2a:	ee07 3a90 	vmov	s15, r3
 8000f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f32:	edc7 7a03 	vstr	s15, [r7, #12]
			F_Ch1 = 90000000 / ICValue_Ch1;
 8000f36:	4b31      	ldr	r3, [pc, #196]	; (8000ffc <HAL_TIM_IC_CaptureCallback+0x110>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a31      	ldr	r2, [pc, #196]	; (8001000 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f40:	ee07 3a90 	vmov	s15, r3
 8000f44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f48:	4b2e      	ldr	r3, [pc, #184]	; (8001004 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000f4a:	edc3 7a00 	vstr	s15, [r3]
			Duty_Ch1 = (Freq_Radio * Duty) / F_Ch1;
 8000f4e:	4b2e      	ldr	r3, [pc, #184]	; (8001008 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	ee07 3a90 	vmov	s15, r3
 8000f56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f5a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f5e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000f62:	4b28      	ldr	r3, [pc, #160]	; (8001004 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000f64:	ed93 7a00 	vldr	s14, [r3]
 8000f68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f6c:	4b27      	ldr	r3, [pc, #156]	; (800100c <HAL_TIM_IC_CaptureCallback+0x120>)
 8000f6e:	edc3 7a00 	vstr	s15, [r3]

		}
	}
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) // If the interrupt is triggered by channel 2
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	7f1b      	ldrb	r3, [r3, #28]
 8000f76:	2b02      	cmp	r3, #2
 8000f78:	d13c      	bne.n	8000ff4 <HAL_TIM_IC_CaptureCallback+0x108>
			{
		// Read the IC value
		ICValue_Ch2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000f7a:	2104      	movs	r1, #4
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f006 f827 	bl	8006fd0 <HAL_TIM_ReadCapturedValue>
 8000f82:	4603      	mov	r3, r0
 8000f84:	4a22      	ldr	r2, [pc, #136]	; (8001010 <HAL_TIM_IC_CaptureCallback+0x124>)
 8000f86:	6013      	str	r3, [r2, #0]

		if (ICValue_Ch2 != 0) {
 8000f88:	4b21      	ldr	r3, [pc, #132]	; (8001010 <HAL_TIM_IC_CaptureCallback+0x124>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d031      	beq.n	8000ff4 <HAL_TIM_IC_CaptureCallback+0x108>
			// calculate the Duty Cycle
			float Duty = 100
					- (HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1) * 100)
 8000f90:	2100      	movs	r1, #0
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f006 f81c 	bl	8006fd0 <HAL_TIM_ReadCapturedValue>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2264      	movs	r2, #100	; 0x64
 8000f9c:	fb03 f202 	mul.w	r2, r3, r2
							/ ICValue_Ch1;
 8000fa0:	4b16      	ldr	r3, [pc, #88]	; (8000ffc <HAL_TIM_IC_CaptureCallback+0x110>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	fbb2 f3f3 	udiv	r3, r2, r3
					- (HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1) * 100)
 8000fa8:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
			float Duty = 100
 8000fac:	ee07 3a90 	vmov	s15, r3
 8000fb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fb4:	edc7 7a02 	vstr	s15, [r7, #8]
			F_Ch2 = 90000000 / ICValue_Ch2;
 8000fb8:	4b15      	ldr	r3, [pc, #84]	; (8001010 <HAL_TIM_IC_CaptureCallback+0x124>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a10      	ldr	r2, [pc, #64]	; (8001000 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc2:	ee07 3a90 	vmov	s15, r3
 8000fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fca:	4b12      	ldr	r3, [pc, #72]	; (8001014 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000fcc:	edc3 7a00 	vstr	s15, [r3]
			Duty_Ch2 = (Freq_Radio * Duty) / F_Ch2;
 8000fd0:	4b0d      	ldr	r3, [pc, #52]	; (8001008 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	ee07 3a90 	vmov	s15, r3
 8000fd8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fdc:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fe0:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000fe4:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000fe6:	ed93 7a00 	vldr	s14, [r3]
 8000fea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fee:	4b0a      	ldr	r3, [pc, #40]	; (8001018 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000ff0:	edc3 7a00 	vstr	s15, [r3]
		}
	}
}
 8000ff4:	bf00      	nop
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	2000021c 	.word	0x2000021c
 8001000:	055d4a80 	.word	0x055d4a80
 8001004:	20000224 	.word	0x20000224
 8001008:	2000000c 	.word	0x2000000c
 800100c:	20000214 	.word	0x20000214
 8001010:	20000220 	.word	0x20000220
 8001014:	20000228 	.word	0x20000228
 8001018:	20000218 	.word	0x20000218

0800101c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == SLFL_Pin) {
 8001026:	88fb      	ldrh	r3, [r7, #6]
 8001028:	2b02      	cmp	r3, #2
 800102a:	d108      	bne.n	800103e <HAL_GPIO_EXTI_Callback+0x22>
		tag_line_front_l = 1;
 800102c:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <HAL_GPIO_EXTI_Callback+0x44>)
 800102e:	2201      	movs	r2, #1
 8001030:	701a      	strb	r2, [r3, #0]
		controlMotor(-100, -100);
 8001032:	f06f 0163 	mvn.w	r1, #99	; 0x63
 8001036:	f06f 0063 	mvn.w	r0, #99	; 0x63
 800103a:	f000 f909 	bl	8001250 <controlMotor>
	}
	if (GPIO_Pin == SLFR_Pin) {
 800103e:	88fb      	ldrh	r3, [r7, #6]
 8001040:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001044:	d108      	bne.n	8001058 <HAL_GPIO_EXTI_Callback+0x3c>
		tag_line_front_r = 1;
 8001046:	4b07      	ldr	r3, [pc, #28]	; (8001064 <HAL_GPIO_EXTI_Callback+0x48>)
 8001048:	2201      	movs	r2, #1
 800104a:	701a      	strb	r2, [r3, #0]
		controlMotor(-100, -100);
 800104c:	f06f 0163 	mvn.w	r1, #99	; 0x63
 8001050:	f06f 0063 	mvn.w	r0, #99	; 0x63
 8001054:	f000 f8fc 	bl	8001250 <controlMotor>
	 }
	 if (GPIO_Pin == SLBL_Pin) {
	 tag_line_back_r = 1;
	 controlMotor(0, 0);
	 }*/
}
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	2000020a 	.word	0x2000020a
 8001064:	2000020b 	.word	0x2000020b

08001068 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
	temp = HAL_ADC_GetValue(&hadc1);
 8001070:	4808      	ldr	r0, [pc, #32]	; (8001094 <HAL_ADC_ConvCpltCallback+0x2c>)
 8001072:	f002 ff73 	bl	8003f5c <HAL_ADC_GetValue>
 8001076:	ee07 0a90 	vmov	s15, r0
 800107a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800107e:	4b06      	ldr	r3, [pc, #24]	; (8001098 <HAL_ADC_ConvCpltCallback+0x30>)
 8001080:	edc3 7a00 	vstr	s15, [r3]
	/*If continuousconversion mode is DISABLED uncomment below*/
	HAL_ADC_Start_IT(&hadc1);
 8001084:	4803      	ldr	r0, [pc, #12]	; (8001094 <HAL_ADC_ConvCpltCallback+0x2c>)
 8001086:	f002 fd7b 	bl	8003b80 <HAL_ADC_Start_IT>
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	200002c8 	.word	0x200002c8
 8001098:	20000008 	.word	0x20000008

0800109c <readSensors>:

//read Functions

void readSensors() { //lê sensores
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
	busca = 0;
 80010a0:	4b55      	ldr	r3, [pc, #340]	; (80011f8 <readSensors+0x15c>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	801a      	strh	r2, [r3, #0]
	busca = busca | (!HAL_GPIO_ReadPin(GPIOB, SLL_Pin) << 0);
 80010a6:	2101      	movs	r1, #1
 80010a8:	4854      	ldr	r0, [pc, #336]	; (80011fc <readSensors+0x160>)
 80010aa:	f003 fc57 	bl	800495c <HAL_GPIO_ReadPin>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	bf0c      	ite	eq
 80010b4:	2301      	moveq	r3, #1
 80010b6:	2300      	movne	r3, #0
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	b21a      	sxth	r2, r3
 80010bc:	4b4e      	ldr	r3, [pc, #312]	; (80011f8 <readSensors+0x15c>)
 80010be:	881b      	ldrh	r3, [r3, #0]
 80010c0:	b21b      	sxth	r3, r3
 80010c2:	4313      	orrs	r3, r2
 80010c4:	b21b      	sxth	r3, r3
 80010c6:	b29a      	uxth	r2, r3
 80010c8:	4b4b      	ldr	r3, [pc, #300]	; (80011f8 <readSensors+0x15c>)
 80010ca:	801a      	strh	r2, [r3, #0]
	busca = busca | (!HAL_GPIO_ReadPin(GPIOB, SDL_Pin) << 1);
 80010cc:	2140      	movs	r1, #64	; 0x40
 80010ce:	484b      	ldr	r0, [pc, #300]	; (80011fc <readSensors+0x160>)
 80010d0:	f003 fc44 	bl	800495c <HAL_GPIO_ReadPin>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d101      	bne.n	80010de <readSensors+0x42>
 80010da:	2202      	movs	r2, #2
 80010dc:	e000      	b.n	80010e0 <readSensors+0x44>
 80010de:	2200      	movs	r2, #0
 80010e0:	4b45      	ldr	r3, [pc, #276]	; (80011f8 <readSensors+0x15c>)
 80010e2:	881b      	ldrh	r3, [r3, #0]
 80010e4:	b21b      	sxth	r3, r3
 80010e6:	4313      	orrs	r3, r2
 80010e8:	b21b      	sxth	r3, r3
 80010ea:	b29a      	uxth	r2, r3
 80010ec:	4b42      	ldr	r3, [pc, #264]	; (80011f8 <readSensors+0x15c>)
 80010ee:	801a      	strh	r2, [r3, #0]
	busca = busca | (!HAL_GPIO_ReadPin(GPIOB, SD2L_Pin) << 2);
 80010f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010f4:	4841      	ldr	r0, [pc, #260]	; (80011fc <readSensors+0x160>)
 80010f6:	f003 fc31 	bl	800495c <HAL_GPIO_ReadPin>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d101      	bne.n	8001104 <readSensors+0x68>
 8001100:	2204      	movs	r2, #4
 8001102:	e000      	b.n	8001106 <readSensors+0x6a>
 8001104:	2200      	movs	r2, #0
 8001106:	4b3c      	ldr	r3, [pc, #240]	; (80011f8 <readSensors+0x15c>)
 8001108:	881b      	ldrh	r3, [r3, #0]
 800110a:	b21b      	sxth	r3, r3
 800110c:	4313      	orrs	r3, r2
 800110e:	b21b      	sxth	r3, r3
 8001110:	b29a      	uxth	r2, r3
 8001112:	4b39      	ldr	r3, [pc, #228]	; (80011f8 <readSensors+0x15c>)
 8001114:	801a      	strh	r2, [r3, #0]
	busca = busca | (!HAL_GPIO_ReadPin(GPIOB, SFL_Pin) << 3);
 8001116:	2120      	movs	r1, #32
 8001118:	4838      	ldr	r0, [pc, #224]	; (80011fc <readSensors+0x160>)
 800111a:	f003 fc1f 	bl	800495c <HAL_GPIO_ReadPin>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d101      	bne.n	8001128 <readSensors+0x8c>
 8001124:	2208      	movs	r2, #8
 8001126:	e000      	b.n	800112a <readSensors+0x8e>
 8001128:	2200      	movs	r2, #0
 800112a:	4b33      	ldr	r3, [pc, #204]	; (80011f8 <readSensors+0x15c>)
 800112c:	881b      	ldrh	r3, [r3, #0]
 800112e:	b21b      	sxth	r3, r3
 8001130:	4313      	orrs	r3, r2
 8001132:	b21b      	sxth	r3, r3
 8001134:	b29a      	uxth	r2, r3
 8001136:	4b30      	ldr	r3, [pc, #192]	; (80011f8 <readSensors+0x15c>)
 8001138:	801a      	strh	r2, [r3, #0]
	busca = busca | (!HAL_GPIO_ReadPin(GPIOB, SFS_Pin) << 4);
 800113a:	2180      	movs	r1, #128	; 0x80
 800113c:	482f      	ldr	r0, [pc, #188]	; (80011fc <readSensors+0x160>)
 800113e:	f003 fc0d 	bl	800495c <HAL_GPIO_ReadPin>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d101      	bne.n	800114c <readSensors+0xb0>
 8001148:	2210      	movs	r2, #16
 800114a:	e000      	b.n	800114e <readSensors+0xb2>
 800114c:	2200      	movs	r2, #0
 800114e:	4b2a      	ldr	r3, [pc, #168]	; (80011f8 <readSensors+0x15c>)
 8001150:	881b      	ldrh	r3, [r3, #0]
 8001152:	b21b      	sxth	r3, r3
 8001154:	4313      	orrs	r3, r2
 8001156:	b21b      	sxth	r3, r3
 8001158:	b29a      	uxth	r2, r3
 800115a:	4b27      	ldr	r3, [pc, #156]	; (80011f8 <readSensors+0x15c>)
 800115c:	801a      	strh	r2, [r3, #0]
	busca = busca | (!HAL_GPIO_ReadPin(GPIOC, SFR_Pin) << 5);
 800115e:	2180      	movs	r1, #128	; 0x80
 8001160:	4827      	ldr	r0, [pc, #156]	; (8001200 <readSensors+0x164>)
 8001162:	f003 fbfb 	bl	800495c <HAL_GPIO_ReadPin>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d101      	bne.n	8001170 <readSensors+0xd4>
 800116c:	2220      	movs	r2, #32
 800116e:	e000      	b.n	8001172 <readSensors+0xd6>
 8001170:	2200      	movs	r2, #0
 8001172:	4b21      	ldr	r3, [pc, #132]	; (80011f8 <readSensors+0x15c>)
 8001174:	881b      	ldrh	r3, [r3, #0]
 8001176:	b21b      	sxth	r3, r3
 8001178:	4313      	orrs	r3, r2
 800117a:	b21b      	sxth	r3, r3
 800117c:	b29a      	uxth	r2, r3
 800117e:	4b1e      	ldr	r3, [pc, #120]	; (80011f8 <readSensors+0x15c>)
 8001180:	801a      	strh	r2, [r3, #0]
	busca = busca | (!HAL_GPIO_ReadPin(GPIOA, SD2R_Pin) << 6);
 8001182:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001186:	481f      	ldr	r0, [pc, #124]	; (8001204 <readSensors+0x168>)
 8001188:	f003 fbe8 	bl	800495c <HAL_GPIO_ReadPin>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d101      	bne.n	8001196 <readSensors+0xfa>
 8001192:	2240      	movs	r2, #64	; 0x40
 8001194:	e000      	b.n	8001198 <readSensors+0xfc>
 8001196:	2200      	movs	r2, #0
 8001198:	4b17      	ldr	r3, [pc, #92]	; (80011f8 <readSensors+0x15c>)
 800119a:	881b      	ldrh	r3, [r3, #0]
 800119c:	b21b      	sxth	r3, r3
 800119e:	4313      	orrs	r3, r2
 80011a0:	b21b      	sxth	r3, r3
 80011a2:	b29a      	uxth	r2, r3
 80011a4:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <readSensors+0x15c>)
 80011a6:	801a      	strh	r2, [r3, #0]
	busca = busca | (!HAL_GPIO_ReadPin(GPIOA, SDR_Pin) << 7);
 80011a8:	2180      	movs	r1, #128	; 0x80
 80011aa:	4816      	ldr	r0, [pc, #88]	; (8001204 <readSensors+0x168>)
 80011ac:	f003 fbd6 	bl	800495c <HAL_GPIO_ReadPin>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d101      	bne.n	80011ba <readSensors+0x11e>
 80011b6:	2280      	movs	r2, #128	; 0x80
 80011b8:	e000      	b.n	80011bc <readSensors+0x120>
 80011ba:	2200      	movs	r2, #0
 80011bc:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <readSensors+0x15c>)
 80011be:	881b      	ldrh	r3, [r3, #0]
 80011c0:	b21b      	sxth	r3, r3
 80011c2:	4313      	orrs	r3, r2
 80011c4:	b21b      	sxth	r3, r3
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <readSensors+0x15c>)
 80011ca:	801a      	strh	r2, [r3, #0]
	busca = busca | (!HAL_GPIO_ReadPin(GPIOB, SLR_Pin) << 8);
 80011cc:	2110      	movs	r1, #16
 80011ce:	480b      	ldr	r0, [pc, #44]	; (80011fc <readSensors+0x160>)
 80011d0:	f003 fbc4 	bl	800495c <HAL_GPIO_ReadPin>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d102      	bne.n	80011e0 <readSensors+0x144>
 80011da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011de:	e000      	b.n	80011e2 <readSensors+0x146>
 80011e0:	2200      	movs	r2, #0
 80011e2:	4b05      	ldr	r3, [pc, #20]	; (80011f8 <readSensors+0x15c>)
 80011e4:	881b      	ldrh	r3, [r3, #0]
 80011e6:	b21b      	sxth	r3, r3
 80011e8:	4313      	orrs	r3, r2
 80011ea:	b21b      	sxth	r3, r3
 80011ec:	b29a      	uxth	r2, r3
 80011ee:	4b02      	ldr	r3, [pc, #8]	; (80011f8 <readSensors+0x15c>)
 80011f0:	801a      	strh	r2, [r3, #0]
	 sensors[8] = !HAL_GPIO_ReadPin(GPIOB, SLR_Pin);
	 busca = 0;
	 for (int i = 0; i < 9; i++) {
	 busca = busca + sensors[i] * pow(2, i);
	 }*/
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	2000022c 	.word	0x2000022c
 80011fc:	40020400 	.word	0x40020400
 8001200:	40020800 	.word	0x40020800
 8001204:	40020000 	.word	0x40020000

08001208 <printSensors>:
 //HAL_Delay(45);
 return (data);
 }*/

//display Functions
void printSensors() {
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
	readSensors();
 800120e:	f7ff ff45 	bl	800109c <readSensors>

	char str[5];

	sprintf(str, "%03i", busca);
 8001212:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <printSensors+0x3c>)
 8001214:	881b      	ldrh	r3, [r3, #0]
 8001216:	461a      	mov	r2, r3
 8001218:	463b      	mov	r3, r7
 800121a:	490b      	ldr	r1, [pc, #44]	; (8001248 <printSensors+0x40>)
 800121c:	4618      	mov	r0, r3
 800121e:	f007 fd4f 	bl	8008cc0 <siprintf>
	SSD1306_GotoXY(10, 10);
 8001222:	210a      	movs	r1, #10
 8001224:	200a      	movs	r0, #10
 8001226:	f001 ff25 	bl	8003074 <SSD1306_GotoXY>
	SSD1306_Puts(str, &Font_11x18, 1);
 800122a:	463b      	mov	r3, r7
 800122c:	2201      	movs	r2, #1
 800122e:	4907      	ldr	r1, [pc, #28]	; (800124c <printSensors+0x44>)
 8001230:	4618      	mov	r0, r3
 8001232:	f001 ffb5 	bl	80031a0 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001236:	f001 fe77 	bl	8002f28 <SSD1306_UpdateScreen>

}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	2000022c 	.word	0x2000022c
 8001248:	0800b1c8 	.word	0x0800b1c8
 800124c:	20000000 	.word	0x20000000

08001250 <controlMotor>:
 }
 HAL_GPIO_WritePin(GPIOA, LED_Pin, 0);
 }*/

//move Functions
void controlMotor(int velL, int velR) {
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
	velL = map(velL, 100, -100, 60, 100);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	ee07 3a90 	vmov	s15, r3
 8001260:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001264:	ed9f 2a1b 	vldr	s4, [pc, #108]	; 80012d4 <controlMotor+0x84>
 8001268:	eddf 1a1b 	vldr	s3, [pc, #108]	; 80012d8 <controlMotor+0x88>
 800126c:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 80012dc <controlMotor+0x8c>
 8001270:	eddf 0a18 	vldr	s1, [pc, #96]	; 80012d4 <controlMotor+0x84>
 8001274:	eeb0 0a67 	vmov.f32	s0, s15
 8001278:	f001 f89e 	bl	80023b8 <map>
 800127c:	eef0 7a40 	vmov.f32	s15, s0
 8001280:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001284:	ee17 3a90 	vmov	r3, s15
 8001288:	607b      	str	r3, [r7, #4]
	velR = map(velR, 100, -100, 60, 100);
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	ee07 3a90 	vmov	s15, r3
 8001290:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001294:	ed9f 2a0f 	vldr	s4, [pc, #60]	; 80012d4 <controlMotor+0x84>
 8001298:	eddf 1a0f 	vldr	s3, [pc, #60]	; 80012d8 <controlMotor+0x88>
 800129c:	ed9f 1a0f 	vldr	s2, [pc, #60]	; 80012dc <controlMotor+0x8c>
 80012a0:	eddf 0a0c 	vldr	s1, [pc, #48]	; 80012d4 <controlMotor+0x84>
 80012a4:	eeb0 0a67 	vmov.f32	s0, s15
 80012a8:	f001 f886 	bl	80023b8 <map>
 80012ac:	eef0 7a40 	vmov.f32	s15, s0
 80012b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012b4:	ee17 3a90 	vmov	r3, s15
 80012b8:	603b      	str	r3, [r7, #0]
	htim1.Instance->CCR3 = velR;
 80012ba:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <controlMotor+0x90>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	683a      	ldr	r2, [r7, #0]
 80012c0:	63da      	str	r2, [r3, #60]	; 0x3c
	htim1.Instance->CCR1 = velL;
 80012c2:	4b07      	ldr	r3, [pc, #28]	; (80012e0 <controlMotor+0x90>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	42c80000 	.word	0x42c80000
 80012d8:	42700000 	.word	0x42700000
 80012dc:	c2c80000 	.word	0xc2c80000
 80012e0:	20000238 	.word	0x20000238

080012e4 <seteMaisPerfeitoEsquerda>:
		vR = map(vR, 100, -100, 60, 100);
		htim1.Instance->CCR3 = vL;
		htim1.Instance->CCR1 = vR;
	}
}
void seteMaisPerfeitoEsquerda() {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
	for (int i = 40; i <= 100; i += 20) {
 80012ea:	2328      	movs	r3, #40	; 0x28
 80012ec:	607b      	str	r3, [r7, #4]
 80012ee:	e00b      	b.n	8001308 <seteMaisPerfeitoEsquerda+0x24>
		controlMotor(i * -1, i);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	425b      	negs	r3, r3
 80012f4:	6879      	ldr	r1, [r7, #4]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff ffaa 	bl	8001250 <controlMotor>
		HAL_Delay(10);
 80012fc:	200a      	movs	r0, #10
 80012fe:	f002 fbd7 	bl	8003ab0 <HAL_Delay>
	for (int i = 40; i <= 100; i += 20) {
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	3314      	adds	r3, #20
 8001306:	607b      	str	r3, [r7, #4]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2b64      	cmp	r3, #100	; 0x64
 800130c:	ddf0      	ble.n	80012f0 <seteMaisPerfeitoEsquerda+0xc>
	}
	HAL_Delay(55);
 800130e:	2037      	movs	r0, #55	; 0x37
 8001310:	f002 fbce 	bl	8003ab0 <HAL_Delay>
	controlMotor(0, 0);
 8001314:	2100      	movs	r1, #0
 8001316:	2000      	movs	r0, #0
 8001318:	f7ff ff9a 	bl	8001250 <controlMotor>
	HAL_Delay(60);
 800131c:	203c      	movs	r0, #60	; 0x3c
 800131e:	f002 fbc7 	bl	8003ab0 <HAL_Delay>
	controlMotor(100, 100);
 8001322:	2164      	movs	r1, #100	; 0x64
 8001324:	2064      	movs	r0, #100	; 0x64
 8001326:	f7ff ff93 	bl	8001250 <controlMotor>
	HAL_Delay(130);
 800132a:	2082      	movs	r0, #130	; 0x82
 800132c:	f002 fbc0 	bl	8003ab0 <HAL_Delay>
	controlMotor(0, 0);
 8001330:	2100      	movs	r1, #0
 8001332:	2000      	movs	r0, #0
 8001334:	f7ff ff8c 	bl	8001250 <controlMotor>
	HAL_Delay(50);
 8001338:	2032      	movs	r0, #50	; 0x32
 800133a:	f002 fbb9 	bl	8003ab0 <HAL_Delay>
	controlMotor(100, -100);
 800133e:	f06f 0163 	mvn.w	r1, #99	; 0x63
 8001342:	2064      	movs	r0, #100	; 0x64
 8001344:	f7ff ff84 	bl	8001250 <controlMotor>
	HAL_Delay(10);
 8001348:	200a      	movs	r0, #10
 800134a:	f002 fbb1 	bl	8003ab0 <HAL_Delay>
	controlMotor(0, 0);
 800134e:	2100      	movs	r1, #0
 8001350:	2000      	movs	r0, #0
 8001352:	f7ff ff7d 	bl	8001250 <controlMotor>
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <seteMaisPerfeitoDireita>:
void seteMaisPerfeitoDireita() {
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
	for (int i = 40; i <= 100; i += 20) {
 8001364:	2328      	movs	r3, #40	; 0x28
 8001366:	607b      	str	r3, [r7, #4]
 8001368:	e00b      	b.n	8001382 <seteMaisPerfeitoDireita+0x24>
		controlMotor(i, i * -1);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	425b      	negs	r3, r3
 800136e:	4619      	mov	r1, r3
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff ff6d 	bl	8001250 <controlMotor>
		HAL_Delay(10);
 8001376:	200a      	movs	r0, #10
 8001378:	f002 fb9a 	bl	8003ab0 <HAL_Delay>
	for (int i = 40; i <= 100; i += 20) {
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3314      	adds	r3, #20
 8001380:	607b      	str	r3, [r7, #4]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2b64      	cmp	r3, #100	; 0x64
 8001386:	ddf0      	ble.n	800136a <seteMaisPerfeitoDireita+0xc>
	}
	HAL_Delay(55);
 8001388:	2037      	movs	r0, #55	; 0x37
 800138a:	f002 fb91 	bl	8003ab0 <HAL_Delay>
	controlMotor(0, 0);
 800138e:	2100      	movs	r1, #0
 8001390:	2000      	movs	r0, #0
 8001392:	f7ff ff5d 	bl	8001250 <controlMotor>
	HAL_Delay(60);
 8001396:	203c      	movs	r0, #60	; 0x3c
 8001398:	f002 fb8a 	bl	8003ab0 <HAL_Delay>
	controlMotor(100, 100);
 800139c:	2164      	movs	r1, #100	; 0x64
 800139e:	2064      	movs	r0, #100	; 0x64
 80013a0:	f7ff ff56 	bl	8001250 <controlMotor>
	HAL_Delay(140);
 80013a4:	208c      	movs	r0, #140	; 0x8c
 80013a6:	f002 fb83 	bl	8003ab0 <HAL_Delay>
	controlMotor(0, 0);
 80013aa:	2100      	movs	r1, #0
 80013ac:	2000      	movs	r0, #0
 80013ae:	f7ff ff4f 	bl	8001250 <controlMotor>
	HAL_Delay(20);
 80013b2:	2014      	movs	r0, #20
 80013b4:	f002 fb7c 	bl	8003ab0 <HAL_Delay>
	controlMotor(-100, 100);
 80013b8:	2164      	movs	r1, #100	; 0x64
 80013ba:	f06f 0063 	mvn.w	r0, #99	; 0x63
 80013be:	f7ff ff47 	bl	8001250 <controlMotor>
	HAL_Delay(10);
 80013c2:	200a      	movs	r0, #10
 80013c4:	f002 fb74 	bl	8003ab0 <HAL_Delay>
	controlMotor(0, 0);
 80013c8:	2100      	movs	r1, #0
 80013ca:	2000      	movs	r0, #0
 80013cc:	f7ff ff40 	bl	8001250 <controlMotor>
}
 80013d0:	bf00      	nop
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <setePerfeitoEsquerda>:

void setePerfeitoEsquerda() {
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
	for (int i = 40; i <= 100; i += 20) {
 80013de:	2328      	movs	r3, #40	; 0x28
 80013e0:	607b      	str	r3, [r7, #4]
 80013e2:	e00b      	b.n	80013fc <setePerfeitoEsquerda+0x24>
		controlMotor(i * -1, i);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	425b      	negs	r3, r3
 80013e8:	6879      	ldr	r1, [r7, #4]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff ff30 	bl	8001250 <controlMotor>
		HAL_Delay(10);
 80013f0:	200a      	movs	r0, #10
 80013f2:	f002 fb5d 	bl	8003ab0 <HAL_Delay>
	for (int i = 40; i <= 100; i += 20) {
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	3314      	adds	r3, #20
 80013fa:	607b      	str	r3, [r7, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2b64      	cmp	r3, #100	; 0x64
 8001400:	ddf0      	ble.n	80013e4 <setePerfeitoEsquerda+0xc>
	}
	HAL_Delay(30);
 8001402:	201e      	movs	r0, #30
 8001404:	f002 fb54 	bl	8003ab0 <HAL_Delay>
	/*controlMotor(-100, 100);
	 HAL_Delay(35);*/
	controlMotor(0, 0);
 8001408:	2100      	movs	r1, #0
 800140a:	2000      	movs	r0, #0
 800140c:	f7ff ff20 	bl	8001250 <controlMotor>
	HAL_Delay(50);
 8001410:	2032      	movs	r0, #50	; 0x32
 8001412:	f002 fb4d 	bl	8003ab0 <HAL_Delay>
	controlMotor(100, 100);
 8001416:	2164      	movs	r1, #100	; 0x64
 8001418:	2064      	movs	r0, #100	; 0x64
 800141a:	f7ff ff19 	bl	8001250 <controlMotor>
	HAL_Delay(130);
 800141e:	2082      	movs	r0, #130	; 0x82
 8001420:	f002 fb46 	bl	8003ab0 <HAL_Delay>
	controlMotor(0, 0);
 8001424:	2100      	movs	r1, #0
 8001426:	2000      	movs	r0, #0
 8001428:	f7ff ff12 	bl	8001250 <controlMotor>
	HAL_Delay(30);
 800142c:	201e      	movs	r0, #30
 800142e:	f002 fb3f 	bl	8003ab0 <HAL_Delay>
	controlMotor(100, -100);
 8001432:	f06f 0163 	mvn.w	r1, #99	; 0x63
 8001436:	2064      	movs	r0, #100	; 0x64
 8001438:	f7ff ff0a 	bl	8001250 <controlMotor>
	HAL_Delay(30);
 800143c:	201e      	movs	r0, #30
 800143e:	f002 fb37 	bl	8003ab0 <HAL_Delay>
	controlMotor(0, 0);
 8001442:	2100      	movs	r1, #0
 8001444:	2000      	movs	r0, #0
 8001446:	f7ff ff03 	bl	8001250 <controlMotor>
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <setePerfeitoDireita>:

void setePerfeitoDireita() {
 8001452:	b580      	push	{r7, lr}
 8001454:	b082      	sub	sp, #8
 8001456:	af00      	add	r7, sp, #0
	for (int i = 40; i <= 100; i += 20) {
 8001458:	2328      	movs	r3, #40	; 0x28
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	e00b      	b.n	8001476 <setePerfeitoDireita+0x24>
		controlMotor(i, i * -1);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	425b      	negs	r3, r3
 8001462:	4619      	mov	r1, r3
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f7ff fef3 	bl	8001250 <controlMotor>
		HAL_Delay(10);
 800146a:	200a      	movs	r0, #10
 800146c:	f002 fb20 	bl	8003ab0 <HAL_Delay>
	for (int i = 40; i <= 100; i += 20) {
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3314      	adds	r3, #20
 8001474:	607b      	str	r3, [r7, #4]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2b64      	cmp	r3, #100	; 0x64
 800147a:	ddf0      	ble.n	800145e <setePerfeitoDireita+0xc>
	}
	HAL_Delay(30);
 800147c:	201e      	movs	r0, #30
 800147e:	f002 fb17 	bl	8003ab0 <HAL_Delay>
	controlMotor(0, 0);
 8001482:	2100      	movs	r1, #0
 8001484:	2000      	movs	r0, #0
 8001486:	f7ff fee3 	bl	8001250 <controlMotor>
	HAL_Delay(60);
 800148a:	203c      	movs	r0, #60	; 0x3c
 800148c:	f002 fb10 	bl	8003ab0 <HAL_Delay>
	controlMotor(100, 100);
 8001490:	2164      	movs	r1, #100	; 0x64
 8001492:	2064      	movs	r0, #100	; 0x64
 8001494:	f7ff fedc 	bl	8001250 <controlMotor>
	HAL_Delay(130);
 8001498:	2082      	movs	r0, #130	; 0x82
 800149a:	f002 fb09 	bl	8003ab0 <HAL_Delay>
	controlMotor(0, 0);
 800149e:	2100      	movs	r1, #0
 80014a0:	2000      	movs	r0, #0
 80014a2:	f7ff fed5 	bl	8001250 <controlMotor>
	HAL_Delay(20);
 80014a6:	2014      	movs	r0, #20
 80014a8:	f002 fb02 	bl	8003ab0 <HAL_Delay>
	controlMotor(-100, 100);
 80014ac:	2164      	movs	r1, #100	; 0x64
 80014ae:	f06f 0063 	mvn.w	r0, #99	; 0x63
 80014b2:	f7ff fecd 	bl	8001250 <controlMotor>
	HAL_Delay(30);
 80014b6:	201e      	movs	r0, #30
 80014b8:	f002 fafa 	bl	8003ab0 <HAL_Delay>
	controlMotor(0, 0);
 80014bc:	2100      	movs	r1, #0
 80014be:	2000      	movs	r0, #0
 80014c0:	f7ff fec6 	bl	8001250 <controlMotor>
}
 80014c4:	bf00      	nop
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <frente>:
		controlMotor(65, 65);
	}
	lineEscape();
	controlMotor(0, 0);
}
void frente() {
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
	controlMotor(100, 100);
 80014d0:	2164      	movs	r1, #100	; 0x64
 80014d2:	2064      	movs	r0, #100	; 0x64
 80014d4:	f7ff febc 	bl	8001250 <controlMotor>
	HAL_Delay(120);
 80014d8:	2078      	movs	r0, #120	; 0x78
 80014da:	f002 fae9 	bl	8003ab0 <HAL_Delay>
}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
	...

080014e4 <frenteVendo>:
void frenteVendo() {
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
	controlMotor(100, 100);
 80014e8:	2164      	movs	r1, #100	; 0x64
 80014ea:	2064      	movs	r0, #100	; 0x64
 80014ec:	f7ff feb0 	bl	8001250 <controlMotor>
	tempo = HAL_GetTick();
 80014f0:	f002 fad2 	bl	8003a98 <HAL_GetTick>
 80014f4:	4603      	mov	r3, r0
 80014f6:	4a0a      	ldr	r2, [pc, #40]	; (8001520 <frenteVendo+0x3c>)
 80014f8:	6013      	str	r3, [r2, #0]
	while (HAL_GetTick() - tempo < 120) {
 80014fa:	e005      	b.n	8001508 <frenteVendo+0x24>
		readSensors();
 80014fc:	f7ff fdce 	bl	800109c <readSensors>
		if (busca != 0)
 8001500:	4b08      	ldr	r3, [pc, #32]	; (8001524 <frenteVendo+0x40>)
 8001502:	881b      	ldrh	r3, [r3, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d108      	bne.n	800151a <frenteVendo+0x36>
	while (HAL_GetTick() - tempo < 120) {
 8001508:	f002 fac6 	bl	8003a98 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	4b04      	ldr	r3, [pc, #16]	; (8001520 <frenteVendo+0x3c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b77      	cmp	r3, #119	; 0x77
 8001516:	d9f1      	bls.n	80014fc <frenteVendo+0x18>
			break;
	}
}
 8001518:	e000      	b.n	800151c <frenteVendo+0x38>
			break;
 800151a:	bf00      	nop
}
 800151c:	bf00      	nop
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20000210 	.word	0x20000210
 8001524:	2000022c 	.word	0x2000022c

08001528 <desempate>:
void desempate() {
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
	controlMotor(-100, 100);
 800152c:	2164      	movs	r1, #100	; 0x64
 800152e:	f06f 0063 	mvn.w	r0, #99	; 0x63
 8001532:	f7ff fe8d 	bl	8001250 <controlMotor>
	HAL_Delay(70);
 8001536:	2046      	movs	r0, #70	; 0x46
 8001538:	f002 faba 	bl	8003ab0 <HAL_Delay>
	controlMotor(0, 0);
 800153c:	2100      	movs	r1, #0
 800153e:	2000      	movs	r0, #0
 8001540:	f7ff fe86 	bl	8001250 <controlMotor>
	HAL_Delay(30);
 8001544:	201e      	movs	r0, #30
 8001546:	f002 fab3 	bl	8003ab0 <HAL_Delay>
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}

0800154e <seteEsquerda>:

void seteEsquerda() {
 800154e:	b580      	push	{r7, lr}
 8001550:	b082      	sub	sp, #8
 8001552:	af00      	add	r7, sp, #0
	frente();
 8001554:	f7ff ffba 	bl	80014cc <frente>
	for (int i = 40; i <= 100; i += 20) {
 8001558:	2328      	movs	r3, #40	; 0x28
 800155a:	607b      	str	r3, [r7, #4]
 800155c:	e00b      	b.n	8001576 <seteEsquerda+0x28>
		controlMotor(i, i * -1);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	425b      	negs	r3, r3
 8001562:	4619      	mov	r1, r3
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f7ff fe73 	bl	8001250 <controlMotor>
		HAL_Delay(10);
 800156a:	200a      	movs	r0, #10
 800156c:	f002 faa0 	bl	8003ab0 <HAL_Delay>
	for (int i = 40; i <= 100; i += 20) {
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	3314      	adds	r3, #20
 8001574:	607b      	str	r3, [r7, #4]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2b64      	cmp	r3, #100	; 0x64
 800157a:	ddf0      	ble.n	800155e <seteEsquerda+0x10>
	}
	HAL_Delay(20);
 800157c:	2014      	movs	r0, #20
 800157e:	f002 fa97 	bl	8003ab0 <HAL_Delay>

}
 8001582:	bf00      	nop
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <seteDireita>:
void seteDireita() {
 800158a:	b580      	push	{r7, lr}
 800158c:	b082      	sub	sp, #8
 800158e:	af00      	add	r7, sp, #0
	frente();
 8001590:	f7ff ff9c 	bl	80014cc <frente>
	for (int i = 40; i <= 100; i += 20) {
 8001594:	2328      	movs	r3, #40	; 0x28
 8001596:	607b      	str	r3, [r7, #4]
 8001598:	e00b      	b.n	80015b2 <seteDireita+0x28>
		controlMotor(i * -1, i);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	425b      	negs	r3, r3
 800159e:	6879      	ldr	r1, [r7, #4]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff fe55 	bl	8001250 <controlMotor>
		HAL_Delay(10);
 80015a6:	200a      	movs	r0, #10
 80015a8:	f002 fa82 	bl	8003ab0 <HAL_Delay>
	for (int i = 40; i <= 100; i += 20) {
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3314      	adds	r3, #20
 80015b0:	607b      	str	r3, [r7, #4]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2b64      	cmp	r3, #100	; 0x64
 80015b6:	ddf0      	ble.n	800159a <seteDireita+0x10>
	}
	HAL_Delay(20);
 80015b8:	2014      	movs	r0, #20
 80015ba:	f002 fa79 	bl	8003ab0 <HAL_Delay>

}
 80015be:	bf00      	nop
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
	...

080015c8 <inicialMoviment>:
void inicialMoviment() {
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
	switch (routine_ini) {
 80015cc:	4b76      	ldr	r3, [pc, #472]	; (80017a8 <inicialMoviment+0x1e0>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2b1b      	cmp	r3, #27
 80015d2:	f200 80e6 	bhi.w	80017a2 <inicialMoviment+0x1da>
 80015d6:	a201      	add	r2, pc, #4	; (adr r2, 80015dc <inicialMoviment+0x14>)
 80015d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015dc:	0800164d 	.word	0x0800164d
 80015e0:	0800165d 	.word	0x0800165d
 80015e4:	0800166d 	.word	0x0800166d
 80015e8:	0800167d 	.word	0x0800167d
 80015ec:	08001689 	.word	0x08001689
 80015f0:	08001695 	.word	0x08001695
 80015f4:	080016a1 	.word	0x080016a1
 80015f8:	080016ad 	.word	0x080016ad
 80015fc:	080016b9 	.word	0x080016b9
 8001600:	080016c5 	.word	0x080016c5
 8001604:	080016d1 	.word	0x080016d1
 8001608:	080016dd 	.word	0x080016dd
 800160c:	080016e9 	.word	0x080016e9
 8001610:	080016f5 	.word	0x080016f5
 8001614:	08001701 	.word	0x08001701
 8001618:	0800170d 	.word	0x0800170d
 800161c:	08001719 	.word	0x08001719
 8001620:	08001725 	.word	0x08001725
 8001624:	08001731 	.word	0x08001731
 8001628:	0800173d 	.word	0x0800173d
 800162c:	08001749 	.word	0x08001749
 8001630:	08001755 	.word	0x08001755
 8001634:	0800175f 	.word	0x0800175f
 8001638:	0800176b 	.word	0x0800176b
 800163c:	08001777 	.word	0x08001777
 8001640:	08001781 	.word	0x08001781
 8001644:	0800178d 	.word	0x0800178d
 8001648:	08001799 	.word	0x08001799
	case 0: //parado + tranquinho
		controlMotor(0, 0);
 800164c:	2100      	movs	r1, #0
 800164e:	2000      	movs	r0, #0
 8001650:	f7ff fdfe 	bl	8001250 <controlMotor>
		routine_search = 0;
 8001654:	4b55      	ldr	r3, [pc, #340]	; (80017ac <inicialMoviment+0x1e4>)
 8001656:	2200      	movs	r2, #0
 8001658:	701a      	strb	r2, [r3, #0]
		break;
 800165a:	e0a3      	b.n	80017a4 <inicialMoviment+0x1dc>
	case 1: //parado + linha
		controlMotor(0, 0);
 800165c:	2100      	movs	r1, #0
 800165e:	2000      	movs	r0, #0
 8001660:	f7ff fdf6 	bl	8001250 <controlMotor>
		routine_search = 1;
 8001664:	4b51      	ldr	r3, [pc, #324]	; (80017ac <inicialMoviment+0x1e4>)
 8001666:	2201      	movs	r2, #1
 8001668:	701a      	strb	r2, [r3, #0]
		break;
 800166a:	e09b      	b.n	80017a4 <inicialMoviment+0x1dc>
	case 2: //parado + nheconheco
		controlMotor(0, 0);
 800166c:	2100      	movs	r1, #0
 800166e:	2000      	movs	r0, #0
 8001670:	f7ff fdee 	bl	8001250 <controlMotor>
		routine_search = 2;
 8001674:	4b4d      	ldr	r3, [pc, #308]	; (80017ac <inicialMoviment+0x1e4>)
 8001676:	2202      	movs	r2, #2
 8001678:	701a      	strb	r2, [r3, #0]
		break;
 800167a:	e093      	b.n	80017a4 <inicialMoviment+0x1dc>
	case 3: //frente + tranquinho
		frente();
 800167c:	f7ff ff26 	bl	80014cc <frente>
		routine_search = 0;
 8001680:	4b4a      	ldr	r3, [pc, #296]	; (80017ac <inicialMoviment+0x1e4>)
 8001682:	2200      	movs	r2, #0
 8001684:	701a      	strb	r2, [r3, #0]
		break;
 8001686:	e08d      	b.n	80017a4 <inicialMoviment+0x1dc>
	case 4: //frente + linha
		frente();
 8001688:	f7ff ff20 	bl	80014cc <frente>
		routine_search = 1;
 800168c:	4b47      	ldr	r3, [pc, #284]	; (80017ac <inicialMoviment+0x1e4>)
 800168e:	2201      	movs	r2, #1
 8001690:	701a      	strb	r2, [r3, #0]
		break;
 8001692:	e087      	b.n	80017a4 <inicialMoviment+0x1dc>
	case 5: //frente + nheconheco
		frente();
 8001694:	f7ff ff1a 	bl	80014cc <frente>
		routine_search = 2;
 8001698:	4b44      	ldr	r3, [pc, #272]	; (80017ac <inicialMoviment+0x1e4>)
 800169a:	2202      	movs	r2, #2
 800169c:	701a      	strb	r2, [r3, #0]
		break;
 800169e:	e081      	b.n	80017a4 <inicialMoviment+0x1dc>
	case 6: //sete esquerda + tranquinho
		setePerfeitoEsquerda();
 80016a0:	f7ff fe9a 	bl	80013d8 <setePerfeitoEsquerda>
		routine_search = 0;
 80016a4:	4b41      	ldr	r3, [pc, #260]	; (80017ac <inicialMoviment+0x1e4>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	701a      	strb	r2, [r3, #0]
		break;
 80016aa:	e07b      	b.n	80017a4 <inicialMoviment+0x1dc>
	case 7: //sete esquerda + linha
		setePerfeitoEsquerda();
 80016ac:	f7ff fe94 	bl	80013d8 <setePerfeitoEsquerda>
		routine_search = 1;
 80016b0:	4b3e      	ldr	r3, [pc, #248]	; (80017ac <inicialMoviment+0x1e4>)
 80016b2:	2201      	movs	r2, #1
 80016b4:	701a      	strb	r2, [r3, #0]
		break;
 80016b6:	e075      	b.n	80017a4 <inicialMoviment+0x1dc>
	case 8: //sete esquerda + nheconheco
		setePerfeitoEsquerda();
 80016b8:	f7ff fe8e 	bl	80013d8 <setePerfeitoEsquerda>
		routine_search = 2;
 80016bc:	4b3b      	ldr	r3, [pc, #236]	; (80017ac <inicialMoviment+0x1e4>)
 80016be:	2202      	movs	r2, #2
 80016c0:	701a      	strb	r2, [r3, #0]
		break;
 80016c2:	e06f      	b.n	80017a4 <inicialMoviment+0x1dc>
	case 9: //sete direita + tranquinho
		setePerfeitoDireita();
 80016c4:	f7ff fec5 	bl	8001452 <setePerfeitoDireita>
		routine_search = 0;
 80016c8:	4b38      	ldr	r3, [pc, #224]	; (80017ac <inicialMoviment+0x1e4>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	701a      	strb	r2, [r3, #0]
		break;
 80016ce:	e069      	b.n	80017a4 <inicialMoviment+0x1dc>
	case 10: //sete direita + linha
		setePerfeitoDireita();
 80016d0:	f7ff febf 	bl	8001452 <setePerfeitoDireita>
		routine_search = 1;
 80016d4:	4b35      	ldr	r3, [pc, #212]	; (80017ac <inicialMoviment+0x1e4>)
 80016d6:	2201      	movs	r2, #1
 80016d8:	701a      	strb	r2, [r3, #0]
		break;
 80016da:	e063      	b.n	80017a4 <inicialMoviment+0x1dc>
	case 11: //sete direita + nheconheco
		setePerfeitoDireita();
 80016dc:	f7ff feb9 	bl	8001452 <setePerfeitoDireita>
		routine_search = 2;
 80016e0:	4b32      	ldr	r3, [pc, #200]	; (80017ac <inicialMoviment+0x1e4>)
 80016e2:	2202      	movs	r2, #2
 80016e4:	701a      	strb	r2, [r3, #0]
		break;
 80016e6:	e05d      	b.n	80017a4 <inicialMoviment+0x1dc>
	case 12: //sete esquerda mqp + tranquinho
		seteMaisPerfeitoEsquerda();
 80016e8:	f7ff fdfc 	bl	80012e4 <seteMaisPerfeitoEsquerda>
		routine_search = 0;
 80016ec:	4b2f      	ldr	r3, [pc, #188]	; (80017ac <inicialMoviment+0x1e4>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	701a      	strb	r2, [r3, #0]
		break;
 80016f2:	e057      	b.n	80017a4 <inicialMoviment+0x1dc>
	case 13: //sete esquerda mqp + linha
		seteMaisPerfeitoEsquerda();
 80016f4:	f7ff fdf6 	bl	80012e4 <seteMaisPerfeitoEsquerda>
		routine_search = 1;
 80016f8:	4b2c      	ldr	r3, [pc, #176]	; (80017ac <inicialMoviment+0x1e4>)
 80016fa:	2201      	movs	r2, #1
 80016fc:	701a      	strb	r2, [r3, #0]
		break;
 80016fe:	e051      	b.n	80017a4 <inicialMoviment+0x1dc>
	case 14: //sete esquerda mqp + nheconheco
		seteMaisPerfeitoEsquerda();
 8001700:	f7ff fdf0 	bl	80012e4 <seteMaisPerfeitoEsquerda>
		routine_search = 2;
 8001704:	4b29      	ldr	r3, [pc, #164]	; (80017ac <inicialMoviment+0x1e4>)
 8001706:	2202      	movs	r2, #2
 8001708:	701a      	strb	r2, [r3, #0]
		break;
 800170a:	e04b      	b.n	80017a4 <inicialMoviment+0x1dc>
	case 15: //sete direita mqp + tranquinho
		seteMaisPerfeitoDireita();
 800170c:	f7ff fe27 	bl	800135e <seteMaisPerfeitoDireita>
		routine_search = 0;
 8001710:	4b26      	ldr	r3, [pc, #152]	; (80017ac <inicialMoviment+0x1e4>)
 8001712:	2200      	movs	r2, #0
 8001714:	701a      	strb	r2, [r3, #0]
		break;
 8001716:	e045      	b.n	80017a4 <inicialMoviment+0x1dc>
	case 16: //sete direita mqp + linha
		seteMaisPerfeitoDireita();
 8001718:	f7ff fe21 	bl	800135e <seteMaisPerfeitoDireita>
		routine_search = 1;
 800171c:	4b23      	ldr	r3, [pc, #140]	; (80017ac <inicialMoviment+0x1e4>)
 800171e:	2201      	movs	r2, #1
 8001720:	701a      	strb	r2, [r3, #0]
		break;
 8001722:	e03f      	b.n	80017a4 <inicialMoviment+0x1dc>
	case 17: //sete direita mqp + nheconheco
		seteMaisPerfeitoDireita();
 8001724:	f7ff fe1b 	bl	800135e <seteMaisPerfeitoDireita>
		routine_search = 2;
 8001728:	4b20      	ldr	r3, [pc, #128]	; (80017ac <inicialMoviment+0x1e4>)
 800172a:	2202      	movs	r2, #2
 800172c:	701a      	strb	r2, [r3, #0]
		break;
 800172e:	e039      	b.n	80017a4 <inicialMoviment+0x1dc>
	case 18: // desempate
		desempate();
 8001730:	f7ff fefa 	bl	8001528 <desempate>
		routine_search = 0;
 8001734:	4b1d      	ldr	r3, [pc, #116]	; (80017ac <inicialMoviment+0x1e4>)
 8001736:	2200      	movs	r2, #0
 8001738:	701a      	strb	r2, [r3, #0]
		break;
 800173a:	e033      	b.n	80017a4 <inicialMoviment+0x1dc>
	case 19: //frente vendo + tranquinho
		frenteVendo();
 800173c:	f7ff fed2 	bl	80014e4 <frenteVendo>
		routine_search = 0;
 8001740:	4b1a      	ldr	r3, [pc, #104]	; (80017ac <inicialMoviment+0x1e4>)
 8001742:	2200      	movs	r2, #0
 8001744:	701a      	strb	r2, [r3, #0]
		break;
 8001746:	e02d      	b.n	80017a4 <inicialMoviment+0x1dc>
	case 20: //frente vendo + linha
		frenteVendo();
 8001748:	f7ff fecc 	bl	80014e4 <frenteVendo>
		routine_search = 1;
 800174c:	4b17      	ldr	r3, [pc, #92]	; (80017ac <inicialMoviment+0x1e4>)
 800174e:	2201      	movs	r2, #1
 8001750:	701a      	strb	r2, [r3, #0]
		break;
 8001752:	e027      	b.n	80017a4 <inicialMoviment+0x1dc>
	case 21: //frente vendo + nheconheco
		frenteVendo();
 8001754:	f7ff fec6 	bl	80014e4 <frenteVendo>
		routine_search = 2;
 8001758:	4b14      	ldr	r3, [pc, #80]	; (80017ac <inicialMoviment+0x1e4>)
 800175a:	2202      	movs	r2, #2
 800175c:	701a      	strb	r2, [r3, #0]
	case 22: //sete esquerda + tranquinho
		seteEsquerda();
 800175e:	f7ff fef6 	bl	800154e <seteEsquerda>
		routine_search = 0;
 8001762:	4b12      	ldr	r3, [pc, #72]	; (80017ac <inicialMoviment+0x1e4>)
 8001764:	2200      	movs	r2, #0
 8001766:	701a      	strb	r2, [r3, #0]
		break;
 8001768:	e01c      	b.n	80017a4 <inicialMoviment+0x1dc>
	case 23: //sete esquerda + linha
		seteEsquerda();
 800176a:	f7ff fef0 	bl	800154e <seteEsquerda>
		routine_search = 1;
 800176e:	4b0f      	ldr	r3, [pc, #60]	; (80017ac <inicialMoviment+0x1e4>)
 8001770:	2201      	movs	r2, #1
 8001772:	701a      	strb	r2, [r3, #0]
		break;
 8001774:	e016      	b.n	80017a4 <inicialMoviment+0x1dc>
	case 24: //sete esquerda+ nheconheco
		seteEsquerda();
 8001776:	f7ff feea 	bl	800154e <seteEsquerda>
		routine_search = 2;
 800177a:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <inicialMoviment+0x1e4>)
 800177c:	2202      	movs	r2, #2
 800177e:	701a      	strb	r2, [r3, #0]
	case 25: //sete esquerda + tranquinho
		seteDireita();
 8001780:	f7ff ff03 	bl	800158a <seteDireita>
		routine_search = 0;
 8001784:	4b09      	ldr	r3, [pc, #36]	; (80017ac <inicialMoviment+0x1e4>)
 8001786:	2200      	movs	r2, #0
 8001788:	701a      	strb	r2, [r3, #0]
		break;
 800178a:	e00b      	b.n	80017a4 <inicialMoviment+0x1dc>
	case 26: //sete esquerda + linha
		seteDireita();
 800178c:	f7ff fefd 	bl	800158a <seteDireita>
		routine_search = 1;
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <inicialMoviment+0x1e4>)
 8001792:	2201      	movs	r2, #1
 8001794:	701a      	strb	r2, [r3, #0]
		break;
 8001796:	e005      	b.n	80017a4 <inicialMoviment+0x1dc>
	case 27: //sete esquerda+ nheconheco
		seteDireita();
 8001798:	f7ff fef7 	bl	800158a <seteDireita>
		routine_search = 2;
 800179c:	4b03      	ldr	r3, [pc, #12]	; (80017ac <inicialMoviment+0x1e4>)
 800179e:	2202      	movs	r2, #2
 80017a0:	701a      	strb	r2, [r3, #0]

	default:
		break;
 80017a2:	bf00      	nop
	}
}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	20000208 	.word	0x20000208
 80017ac:	20000209 	.word	0x20000209

080017b0 <tranquinho>:

//search Functions
void tranquinho() {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
	if (tag_line_front_l || tag_line_front_r) {
 80017b4:	4b60      	ldr	r3, [pc, #384]	; (8001938 <tranquinho+0x188>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d104      	bne.n	80017c8 <tranquinho+0x18>
 80017be:	4b5f      	ldr	r3, [pc, #380]	; (800193c <tranquinho+0x18c>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d075      	beq.n	80018b4 <tranquinho+0x104>
		if (tag_line_front_l && !tag_line_front_r && !tagliner) {
 80017c8:	4b5b      	ldr	r3, [pc, #364]	; (8001938 <tranquinho+0x188>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d024      	beq.n	800181c <tranquinho+0x6c>
 80017d2:	4b5a      	ldr	r3, [pc, #360]	; (800193c <tranquinho+0x18c>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	f083 0301 	eor.w	r3, r3, #1
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d01c      	beq.n	800181c <tranquinho+0x6c>
 80017e2:	4b57      	ldr	r3, [pc, #348]	; (8001940 <tranquinho+0x190>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	f083 0301 	eor.w	r3, r3, #1
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d014      	beq.n	800181c <tranquinho+0x6c>
			controlMotor(-100, -100);
 80017f2:	f06f 0163 	mvn.w	r1, #99	; 0x63
 80017f6:	f06f 0063 	mvn.w	r0, #99	; 0x63
 80017fa:	f7ff fd29 	bl	8001250 <controlMotor>
			HAL_Delay(15);
 80017fe:	200f      	movs	r0, #15
 8001800:	f002 f956 	bl	8003ab0 <HAL_Delay>
			controlMotor(100, -100);
 8001804:	f06f 0163 	mvn.w	r1, #99	; 0x63
 8001808:	2064      	movs	r0, #100	; 0x64
 800180a:	f7ff fd21 	bl	8001250 <controlMotor>
			HAL_Delay(65);
 800180e:	2041      	movs	r0, #65	; 0x41
 8001810:	f002 f94e 	bl	8003ab0 <HAL_Delay>
			taglinel = 1;
 8001814:	4b4b      	ldr	r3, [pc, #300]	; (8001944 <tranquinho+0x194>)
 8001816:	2201      	movs	r2, #1
 8001818:	701a      	strb	r2, [r3, #0]
 800181a:	e044      	b.n	80018a6 <tranquinho+0xf6>

		} else if (!tag_line_front_l && tag_line_front_r && !taglinel) {
 800181c:	4b46      	ldr	r3, [pc, #280]	; (8001938 <tranquinho+0x188>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	b2db      	uxtb	r3, r3
 8001822:	f083 0301 	eor.w	r3, r3, #1
 8001826:	b2db      	uxtb	r3, r3
 8001828:	2b00      	cmp	r3, #0
 800182a:	d021      	beq.n	8001870 <tranquinho+0xc0>
 800182c:	4b43      	ldr	r3, [pc, #268]	; (800193c <tranquinho+0x18c>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b00      	cmp	r3, #0
 8001834:	d01c      	beq.n	8001870 <tranquinho+0xc0>
 8001836:	4b43      	ldr	r3, [pc, #268]	; (8001944 <tranquinho+0x194>)
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	b2db      	uxtb	r3, r3
 800183c:	f083 0301 	eor.w	r3, r3, #1
 8001840:	b2db      	uxtb	r3, r3
 8001842:	2b00      	cmp	r3, #0
 8001844:	d014      	beq.n	8001870 <tranquinho+0xc0>
			controlMotor(-100, -100);
 8001846:	f06f 0163 	mvn.w	r1, #99	; 0x63
 800184a:	f06f 0063 	mvn.w	r0, #99	; 0x63
 800184e:	f7ff fcff 	bl	8001250 <controlMotor>
			HAL_Delay(15);
 8001852:	200f      	movs	r0, #15
 8001854:	f002 f92c 	bl	8003ab0 <HAL_Delay>
			controlMotor(-100, 100);
 8001858:	2164      	movs	r1, #100	; 0x64
 800185a:	f06f 0063 	mvn.w	r0, #99	; 0x63
 800185e:	f7ff fcf7 	bl	8001250 <controlMotor>
			HAL_Delay(65);
 8001862:	2041      	movs	r0, #65	; 0x41
 8001864:	f002 f924 	bl	8003ab0 <HAL_Delay>
			tagliner = 1;
 8001868:	4b35      	ldr	r3, [pc, #212]	; (8001940 <tranquinho+0x190>)
 800186a:	2201      	movs	r2, #1
 800186c:	701a      	strb	r2, [r3, #0]
 800186e:	e01a      	b.n	80018a6 <tranquinho+0xf6>

		} else if (tag_line_front_l && tag_line_front_r) {
 8001870:	4b31      	ldr	r3, [pc, #196]	; (8001938 <tranquinho+0x188>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	b2db      	uxtb	r3, r3
 8001876:	2b00      	cmp	r3, #0
 8001878:	d015      	beq.n	80018a6 <tranquinho+0xf6>
 800187a:	4b30      	ldr	r3, [pc, #192]	; (800193c <tranquinho+0x18c>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	b2db      	uxtb	r3, r3
 8001880:	2b00      	cmp	r3, #0
 8001882:	d010      	beq.n	80018a6 <tranquinho+0xf6>
			controlMotor(-100, -100);
 8001884:	f06f 0163 	mvn.w	r1, #99	; 0x63
 8001888:	f06f 0063 	mvn.w	r0, #99	; 0x63
 800188c:	f7ff fce0 	bl	8001250 <controlMotor>
			HAL_Delay(15);
 8001890:	200f      	movs	r0, #15
 8001892:	f002 f90d 	bl	8003ab0 <HAL_Delay>
			controlMotor(100, -100);
 8001896:	f06f 0163 	mvn.w	r1, #99	; 0x63
 800189a:	2064      	movs	r0, #100	; 0x64
 800189c:	f7ff fcd8 	bl	8001250 <controlMotor>
			HAL_Delay(70);
 80018a0:	2046      	movs	r0, #70	; 0x46
 80018a2:	f002 f905 	bl	8003ab0 <HAL_Delay>
		}
		tag_line_front_l = 0;
 80018a6:	4b24      	ldr	r3, [pc, #144]	; (8001938 <tranquinho+0x188>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	701a      	strb	r2, [r3, #0]
		tag_line_front_r = 0;
 80018ac:	4b23      	ldr	r3, [pc, #140]	; (800193c <tranquinho+0x18c>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	701a      	strb	r2, [r3, #0]
 80018b2:	e03f      	b.n	8001934 <tranquinho+0x184>

	} else {
		controlMotor(0, 0);
 80018b4:	2100      	movs	r1, #0
 80018b6:	2000      	movs	r0, #0
 80018b8:	f7ff fcca 	bl	8001250 <controlMotor>
		HAL_Delay(40);
 80018bc:	2028      	movs	r0, #40	; 0x28
 80018be:	f002 f8f7 	bl	8003ab0 <HAL_Delay>
		taglinel = 0;
 80018c2:	4b20      	ldr	r3, [pc, #128]	; (8001944 <tranquinho+0x194>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	701a      	strb	r2, [r3, #0]
		tagliner = 0;
 80018c8:	4b1d      	ldr	r3, [pc, #116]	; (8001940 <tranquinho+0x190>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	701a      	strb	r2, [r3, #0]
		controlMotor(100, 100);
 80018ce:	2164      	movs	r1, #100	; 0x64
 80018d0:	2064      	movs	r0, #100	; 0x64
 80018d2:	f7ff fcbd 	bl	8001250 <controlMotor>
		HAL_Delay(25);
 80018d6:	2019      	movs	r0, #25
 80018d8:	f002 f8ea 	bl	8003ab0 <HAL_Delay>
		tempo = HAL_GetTick();
 80018dc:	f002 f8dc 	bl	8003a98 <HAL_GetTick>
 80018e0:	4603      	mov	r3, r0
 80018e2:	4a19      	ldr	r2, [pc, #100]	; (8001948 <tranquinho+0x198>)
 80018e4:	6013      	str	r3, [r2, #0]
		while (HAL_GetTick() - tempo < 2500 && !tag_line_front_l
 80018e6:	e009      	b.n	80018fc <tranquinho+0x14c>
				&& !tag_line_front_r) {
			controlMotor(0, 0);
 80018e8:	2100      	movs	r1, #0
 80018ea:	2000      	movs	r0, #0
 80018ec:	f7ff fcb0 	bl	8001250 <controlMotor>
			readSensors();
 80018f0:	f7ff fbd4 	bl	800109c <readSensors>
			if (busca != 0)
 80018f4:	4b15      	ldr	r3, [pc, #84]	; (800194c <tranquinho+0x19c>)
 80018f6:	881b      	ldrh	r3, [r3, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d11a      	bne.n	8001932 <tranquinho+0x182>
		while (HAL_GetTick() - tempo < 2500 && !tag_line_front_l
 80018fc:	f002 f8cc 	bl	8003a98 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	4b11      	ldr	r3, [pc, #68]	; (8001948 <tranquinho+0x198>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800190c:	4293      	cmp	r3, r2
 800190e:	d811      	bhi.n	8001934 <tranquinho+0x184>
 8001910:	4b09      	ldr	r3, [pc, #36]	; (8001938 <tranquinho+0x188>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	b2db      	uxtb	r3, r3
 8001916:	f083 0301 	eor.w	r3, r3, #1
 800191a:	b2db      	uxtb	r3, r3
 800191c:	2b00      	cmp	r3, #0
 800191e:	d009      	beq.n	8001934 <tranquinho+0x184>
				&& !tag_line_front_r) {
 8001920:	4b06      	ldr	r3, [pc, #24]	; (800193c <tranquinho+0x18c>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	b2db      	uxtb	r3, r3
 8001926:	f083 0301 	eor.w	r3, r3, #1
 800192a:	b2db      	uxtb	r3, r3
 800192c:	2b00      	cmp	r3, #0
 800192e:	d1db      	bne.n	80018e8 <tranquinho+0x138>
				break;
		}
	}
}
 8001930:	e000      	b.n	8001934 <tranquinho+0x184>
				break;
 8001932:	bf00      	nop
}
 8001934:	bf00      	nop
 8001936:	bd80      	pop	{r7, pc}
 8001938:	2000020a 	.word	0x2000020a
 800193c:	2000020b 	.word	0x2000020b
 8001940:	2000020c 	.word	0x2000020c
 8001944:	2000020d 	.word	0x2000020d
 8001948:	20000210 	.word	0x20000210
 800194c:	2000022c 	.word	0x2000022c

08001950 <nhecoNheco>:
void nhecoNheco() {
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
	if (tag_line_front_l || tag_line_front_r) {
 8001954:	4b67      	ldr	r3, [pc, #412]	; (8001af4 <nhecoNheco+0x1a4>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	b2db      	uxtb	r3, r3
 800195a:	2b00      	cmp	r3, #0
 800195c:	d104      	bne.n	8001968 <nhecoNheco+0x18>
 800195e:	4b66      	ldr	r3, [pc, #408]	; (8001af8 <nhecoNheco+0x1a8>)
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	b2db      	uxtb	r3, r3
 8001964:	2b00      	cmp	r3, #0
 8001966:	d075      	beq.n	8001a54 <nhecoNheco+0x104>
		if (tag_line_front_l && !tag_line_front_r && !tagliner) {
 8001968:	4b62      	ldr	r3, [pc, #392]	; (8001af4 <nhecoNheco+0x1a4>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	b2db      	uxtb	r3, r3
 800196e:	2b00      	cmp	r3, #0
 8001970:	d024      	beq.n	80019bc <nhecoNheco+0x6c>
 8001972:	4b61      	ldr	r3, [pc, #388]	; (8001af8 <nhecoNheco+0x1a8>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	b2db      	uxtb	r3, r3
 8001978:	f083 0301 	eor.w	r3, r3, #1
 800197c:	b2db      	uxtb	r3, r3
 800197e:	2b00      	cmp	r3, #0
 8001980:	d01c      	beq.n	80019bc <nhecoNheco+0x6c>
 8001982:	4b5e      	ldr	r3, [pc, #376]	; (8001afc <nhecoNheco+0x1ac>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	b2db      	uxtb	r3, r3
 8001988:	f083 0301 	eor.w	r3, r3, #1
 800198c:	b2db      	uxtb	r3, r3
 800198e:	2b00      	cmp	r3, #0
 8001990:	d014      	beq.n	80019bc <nhecoNheco+0x6c>
			controlMotor(-100, -100);
 8001992:	f06f 0163 	mvn.w	r1, #99	; 0x63
 8001996:	f06f 0063 	mvn.w	r0, #99	; 0x63
 800199a:	f7ff fc59 	bl	8001250 <controlMotor>
			HAL_Delay(15);
 800199e:	200f      	movs	r0, #15
 80019a0:	f002 f886 	bl	8003ab0 <HAL_Delay>
			controlMotor(100, -100);
 80019a4:	f06f 0163 	mvn.w	r1, #99	; 0x63
 80019a8:	2064      	movs	r0, #100	; 0x64
 80019aa:	f7ff fc51 	bl	8001250 <controlMotor>
			HAL_Delay(65);
 80019ae:	2041      	movs	r0, #65	; 0x41
 80019b0:	f002 f87e 	bl	8003ab0 <HAL_Delay>
			taglinel = 1;
 80019b4:	4b52      	ldr	r3, [pc, #328]	; (8001b00 <nhecoNheco+0x1b0>)
 80019b6:	2201      	movs	r2, #1
 80019b8:	701a      	strb	r2, [r3, #0]
 80019ba:	e044      	b.n	8001a46 <nhecoNheco+0xf6>

		} else if (!tag_line_front_l && tag_line_front_r && !taglinel) {
 80019bc:	4b4d      	ldr	r3, [pc, #308]	; (8001af4 <nhecoNheco+0x1a4>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	f083 0301 	eor.w	r3, r3, #1
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d021      	beq.n	8001a10 <nhecoNheco+0xc0>
 80019cc:	4b4a      	ldr	r3, [pc, #296]	; (8001af8 <nhecoNheco+0x1a8>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d01c      	beq.n	8001a10 <nhecoNheco+0xc0>
 80019d6:	4b4a      	ldr	r3, [pc, #296]	; (8001b00 <nhecoNheco+0x1b0>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	f083 0301 	eor.w	r3, r3, #1
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d014      	beq.n	8001a10 <nhecoNheco+0xc0>
			controlMotor(-100, -100);
 80019e6:	f06f 0163 	mvn.w	r1, #99	; 0x63
 80019ea:	f06f 0063 	mvn.w	r0, #99	; 0x63
 80019ee:	f7ff fc2f 	bl	8001250 <controlMotor>
			HAL_Delay(15);
 80019f2:	200f      	movs	r0, #15
 80019f4:	f002 f85c 	bl	8003ab0 <HAL_Delay>
			controlMotor(-100, 100);
 80019f8:	2164      	movs	r1, #100	; 0x64
 80019fa:	f06f 0063 	mvn.w	r0, #99	; 0x63
 80019fe:	f7ff fc27 	bl	8001250 <controlMotor>
			HAL_Delay(65);
 8001a02:	2041      	movs	r0, #65	; 0x41
 8001a04:	f002 f854 	bl	8003ab0 <HAL_Delay>
			tagliner = 1;
 8001a08:	4b3c      	ldr	r3, [pc, #240]	; (8001afc <nhecoNheco+0x1ac>)
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	701a      	strb	r2, [r3, #0]
 8001a0e:	e01a      	b.n	8001a46 <nhecoNheco+0xf6>

		} else if (tag_line_front_l && tag_line_front_r) {
 8001a10:	4b38      	ldr	r3, [pc, #224]	; (8001af4 <nhecoNheco+0x1a4>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d015      	beq.n	8001a46 <nhecoNheco+0xf6>
 8001a1a:	4b37      	ldr	r3, [pc, #220]	; (8001af8 <nhecoNheco+0x1a8>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d010      	beq.n	8001a46 <nhecoNheco+0xf6>
			controlMotor(-100, -100);
 8001a24:	f06f 0163 	mvn.w	r1, #99	; 0x63
 8001a28:	f06f 0063 	mvn.w	r0, #99	; 0x63
 8001a2c:	f7ff fc10 	bl	8001250 <controlMotor>
			HAL_Delay(15);
 8001a30:	200f      	movs	r0, #15
 8001a32:	f002 f83d 	bl	8003ab0 <HAL_Delay>
			controlMotor(100, -100);
 8001a36:	f06f 0163 	mvn.w	r1, #99	; 0x63
 8001a3a:	2064      	movs	r0, #100	; 0x64
 8001a3c:	f7ff fc08 	bl	8001250 <controlMotor>
			HAL_Delay(70);
 8001a40:	2046      	movs	r0, #70	; 0x46
 8001a42:	f002 f835 	bl	8003ab0 <HAL_Delay>
		}
		tag_line_front_l = 0;
 8001a46:	4b2b      	ldr	r3, [pc, #172]	; (8001af4 <nhecoNheco+0x1a4>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	701a      	strb	r2, [r3, #0]
		tag_line_front_r = 0;
 8001a4c:	4b2a      	ldr	r3, [pc, #168]	; (8001af8 <nhecoNheco+0x1a8>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	701a      	strb	r2, [r3, #0]
 8001a52:	e04d      	b.n	8001af0 <nhecoNheco+0x1a0>

	} else {
		if (var_nheco) {
 8001a54:	4b2b      	ldr	r3, [pc, #172]	; (8001b04 <nhecoNheco+0x1b4>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d004      	beq.n	8001a66 <nhecoNheco+0x116>
			controlMotor(100, 100);
 8001a5c:	2164      	movs	r1, #100	; 0x64
 8001a5e:	2064      	movs	r0, #100	; 0x64
 8001a60:	f7ff fbf6 	bl	8001250 <controlMotor>
 8001a64:	e005      	b.n	8001a72 <nhecoNheco+0x122>
		} else {
			controlMotor(-80, -80);
 8001a66:	f06f 014f 	mvn.w	r1, #79	; 0x4f
 8001a6a:	f06f 004f 	mvn.w	r0, #79	; 0x4f
 8001a6e:	f7ff fbef 	bl	8001250 <controlMotor>
		}

		HAL_Delay(25);
 8001a72:	2019      	movs	r0, #25
 8001a74:	f002 f81c 	bl	8003ab0 <HAL_Delay>
		tempo = HAL_GetTick();
 8001a78:	f002 f80e 	bl	8003a98 <HAL_GetTick>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	4a22      	ldr	r2, [pc, #136]	; (8001b08 <nhecoNheco+0x1b8>)
 8001a80:	6013      	str	r3, [r2, #0]
		while (HAL_GetTick() - tempo < 2500 && !tag_line_front_l
 8001a82:	e009      	b.n	8001a98 <nhecoNheco+0x148>
				&& !tag_line_front_r) {
			controlMotor(0, 0);
 8001a84:	2100      	movs	r1, #0
 8001a86:	2000      	movs	r0, #0
 8001a88:	f7ff fbe2 	bl	8001250 <controlMotor>
			readSensors();
 8001a8c:	f7ff fb06 	bl	800109c <readSensors>
			if (busca != 0)
 8001a90:	4b1e      	ldr	r3, [pc, #120]	; (8001b0c <nhecoNheco+0x1bc>)
 8001a92:	881b      	ldrh	r3, [r3, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d11a      	bne.n	8001ace <nhecoNheco+0x17e>
		while (HAL_GetTick() - tempo < 2500 && !tag_line_front_l
 8001a98:	f001 fffe 	bl	8003a98 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	4b1a      	ldr	r3, [pc, #104]	; (8001b08 <nhecoNheco+0x1b8>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d811      	bhi.n	8001ad0 <nhecoNheco+0x180>
 8001aac:	4b11      	ldr	r3, [pc, #68]	; (8001af4 <nhecoNheco+0x1a4>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	f083 0301 	eor.w	r3, r3, #1
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d009      	beq.n	8001ad0 <nhecoNheco+0x180>
				&& !tag_line_front_r) {
 8001abc:	4b0e      	ldr	r3, [pc, #56]	; (8001af8 <nhecoNheco+0x1a8>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	f083 0301 	eor.w	r3, r3, #1
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d1db      	bne.n	8001a84 <nhecoNheco+0x134>
 8001acc:	e000      	b.n	8001ad0 <nhecoNheco+0x180>
				break;
 8001ace:	bf00      	nop
		}
		var_nheco = !var_nheco;
 8001ad0:	4b0c      	ldr	r3, [pc, #48]	; (8001b04 <nhecoNheco+0x1b4>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	bf14      	ite	ne
 8001ad8:	2301      	movne	r3, #1
 8001ada:	2300      	moveq	r3, #0
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	f083 0301 	eor.w	r3, r3, #1
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	f003 0301 	and.w	r3, r3, #1
 8001ae8:	b2da      	uxtb	r2, r3
 8001aea:	4b06      	ldr	r3, [pc, #24]	; (8001b04 <nhecoNheco+0x1b4>)
 8001aec:	701a      	strb	r2, [r3, #0]
	}

}
 8001aee:	bf00      	nop
 8001af0:	bf00      	nop
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	2000020a 	.word	0x2000020a
 8001af8:	2000020b 	.word	0x2000020b
 8001afc:	2000020c 	.word	0x2000020c
 8001b00:	2000020d 	.word	0x2000020d
 8001b04:	20000234 	.word	0x20000234
 8001b08:	20000210 	.word	0x20000210
 8001b0c:	2000022c 	.word	0x2000022c

08001b10 <basicSearch>:

void basicSearch(int velAvc, int velBaixa, int velMedia, int velAlta) {
 8001b10:	b590      	push	{r4, r7, lr}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
 8001b1c:	603b      	str	r3, [r7, #0]
	if (!HAL_GPIO_ReadPin(GPIOB, SFS_Pin)) {
 8001b1e:	2180      	movs	r1, #128	; 0x80
 8001b20:	4855      	ldr	r0, [pc, #340]	; (8001c78 <basicSearch+0x168>)
 8001b22:	f002 ff1b 	bl	800495c <HAL_GPIO_ReadPin>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	f040 80a9 	bne.w	8001c80 <basicSearch+0x170>
		if (flagfront < 50) {
 8001b2e:	4b53      	ldr	r3, [pc, #332]	; (8001c7c <basicSearch+0x16c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2b31      	cmp	r3, #49	; 0x31
 8001b34:	dc27      	bgt.n	8001b86 <basicSearch+0x76>
			controlMotor(velAvc * 0.6, velAvc * 0.6);
 8001b36:	68f8      	ldr	r0, [r7, #12]
 8001b38:	f7fe fd14 	bl	8000564 <__aeabi_i2d>
 8001b3c:	a348      	add	r3, pc, #288	; (adr r3, 8001c60 <basicSearch+0x150>)
 8001b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b42:	f7fe fd79 	bl	8000638 <__aeabi_dmul>
 8001b46:	4602      	mov	r2, r0
 8001b48:	460b      	mov	r3, r1
 8001b4a:	4610      	mov	r0, r2
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	f7ff f823 	bl	8000b98 <__aeabi_d2iz>
 8001b52:	4604      	mov	r4, r0
 8001b54:	68f8      	ldr	r0, [r7, #12]
 8001b56:	f7fe fd05 	bl	8000564 <__aeabi_i2d>
 8001b5a:	a341      	add	r3, pc, #260	; (adr r3, 8001c60 <basicSearch+0x150>)
 8001b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b60:	f7fe fd6a 	bl	8000638 <__aeabi_dmul>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	4610      	mov	r0, r2
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	f7ff f814 	bl	8000b98 <__aeabi_d2iz>
 8001b70:	4603      	mov	r3, r0
 8001b72:	4619      	mov	r1, r3
 8001b74:	4620      	mov	r0, r4
 8001b76:	f7ff fb6b 	bl	8001250 <controlMotor>
			flagfront++;
 8001b7a:	4b40      	ldr	r3, [pc, #256]	; (8001c7c <basicSearch+0x16c>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	3301      	adds	r3, #1
 8001b80:	4a3e      	ldr	r2, [pc, #248]	; (8001c7c <basicSearch+0x16c>)
 8001b82:	6013      	str	r3, [r2, #0]
			 }*/
			break;

		}
	}
}
 8001b84:	e2cd      	b.n	8002122 <basicSearch+0x612>
		} else if ((flagfront >= 50) && (flagfront < 200)) {
 8001b86:	4b3d      	ldr	r3, [pc, #244]	; (8001c7c <basicSearch+0x16c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2b31      	cmp	r3, #49	; 0x31
 8001b8c:	dd2b      	ble.n	8001be6 <basicSearch+0xd6>
 8001b8e:	4b3b      	ldr	r3, [pc, #236]	; (8001c7c <basicSearch+0x16c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2bc7      	cmp	r3, #199	; 0xc7
 8001b94:	dc27      	bgt.n	8001be6 <basicSearch+0xd6>
			controlMotor(velAvc * 0.7, velAvc * 0.7);
 8001b96:	68f8      	ldr	r0, [r7, #12]
 8001b98:	f7fe fce4 	bl	8000564 <__aeabi_i2d>
 8001b9c:	a332      	add	r3, pc, #200	; (adr r3, 8001c68 <basicSearch+0x158>)
 8001b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba2:	f7fe fd49 	bl	8000638 <__aeabi_dmul>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	4610      	mov	r0, r2
 8001bac:	4619      	mov	r1, r3
 8001bae:	f7fe fff3 	bl	8000b98 <__aeabi_d2iz>
 8001bb2:	4604      	mov	r4, r0
 8001bb4:	68f8      	ldr	r0, [r7, #12]
 8001bb6:	f7fe fcd5 	bl	8000564 <__aeabi_i2d>
 8001bba:	a32b      	add	r3, pc, #172	; (adr r3, 8001c68 <basicSearch+0x158>)
 8001bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc0:	f7fe fd3a 	bl	8000638 <__aeabi_dmul>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	4610      	mov	r0, r2
 8001bca:	4619      	mov	r1, r3
 8001bcc:	f7fe ffe4 	bl	8000b98 <__aeabi_d2iz>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4620      	mov	r0, r4
 8001bd6:	f7ff fb3b 	bl	8001250 <controlMotor>
			flagfront++;
 8001bda:	4b28      	ldr	r3, [pc, #160]	; (8001c7c <basicSearch+0x16c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	3301      	adds	r3, #1
 8001be0:	4a26      	ldr	r2, [pc, #152]	; (8001c7c <basicSearch+0x16c>)
 8001be2:	6013      	str	r3, [r2, #0]
 8001be4:	e29d      	b.n	8002122 <basicSearch+0x612>
		} else if ((flagfront >= 200) && (flagfront < 350)) {
 8001be6:	4b25      	ldr	r3, [pc, #148]	; (8001c7c <basicSearch+0x16c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2bc7      	cmp	r3, #199	; 0xc7
 8001bec:	dd2c      	ble.n	8001c48 <basicSearch+0x138>
 8001bee:	4b23      	ldr	r3, [pc, #140]	; (8001c7c <basicSearch+0x16c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8001bf6:	da27      	bge.n	8001c48 <basicSearch+0x138>
			controlMotor(velAvc * 0.8, velAvc * 0.8);
 8001bf8:	68f8      	ldr	r0, [r7, #12]
 8001bfa:	f7fe fcb3 	bl	8000564 <__aeabi_i2d>
 8001bfe:	a31c      	add	r3, pc, #112	; (adr r3, 8001c70 <basicSearch+0x160>)
 8001c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c04:	f7fe fd18 	bl	8000638 <__aeabi_dmul>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	4610      	mov	r0, r2
 8001c0e:	4619      	mov	r1, r3
 8001c10:	f7fe ffc2 	bl	8000b98 <__aeabi_d2iz>
 8001c14:	4604      	mov	r4, r0
 8001c16:	68f8      	ldr	r0, [r7, #12]
 8001c18:	f7fe fca4 	bl	8000564 <__aeabi_i2d>
 8001c1c:	a314      	add	r3, pc, #80	; (adr r3, 8001c70 <basicSearch+0x160>)
 8001c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c22:	f7fe fd09 	bl	8000638 <__aeabi_dmul>
 8001c26:	4602      	mov	r2, r0
 8001c28:	460b      	mov	r3, r1
 8001c2a:	4610      	mov	r0, r2
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	f7fe ffb3 	bl	8000b98 <__aeabi_d2iz>
 8001c32:	4603      	mov	r3, r0
 8001c34:	4619      	mov	r1, r3
 8001c36:	4620      	mov	r0, r4
 8001c38:	f7ff fb0a 	bl	8001250 <controlMotor>
			flagfront++;
 8001c3c:	4b0f      	ldr	r3, [pc, #60]	; (8001c7c <basicSearch+0x16c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	3301      	adds	r3, #1
 8001c42:	4a0e      	ldr	r2, [pc, #56]	; (8001c7c <basicSearch+0x16c>)
 8001c44:	6013      	str	r3, [r2, #0]
 8001c46:	e26c      	b.n	8002122 <basicSearch+0x612>
		} else if (flagfront >= 350) {
 8001c48:	4b0c      	ldr	r3, [pc, #48]	; (8001c7c <basicSearch+0x16c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8001c50:	f2c0 8267 	blt.w	8002122 <basicSearch+0x612>
			controlMotor(velAvc, velAvc);
 8001c54:	68f9      	ldr	r1, [r7, #12]
 8001c56:	68f8      	ldr	r0, [r7, #12]
 8001c58:	f7ff fafa 	bl	8001250 <controlMotor>
}
 8001c5c:	e261      	b.n	8002122 <basicSearch+0x612>
 8001c5e:	bf00      	nop
 8001c60:	33333333 	.word	0x33333333
 8001c64:	3fe33333 	.word	0x3fe33333
 8001c68:	66666666 	.word	0x66666666
 8001c6c:	3fe66666 	.word	0x3fe66666
 8001c70:	9999999a 	.word	0x9999999a
 8001c74:	3fe99999 	.word	0x3fe99999
 8001c78:	40020400 	.word	0x40020400
 8001c7c:	20000230 	.word	0x20000230
		switch (busca) {
 8001c80:	4bd2      	ldr	r3, [pc, #840]	; (8001fcc <basicSearch+0x4bc>)
 8001c82:	881b      	ldrh	r3, [r3, #0]
 8001c84:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001c88:	f000 8228 	beq.w	80020dc <basicSearch+0x5cc>
 8001c8c:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001c90:	f300 8242 	bgt.w	8002118 <basicSearch+0x608>
 8001c94:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001c98:	f000 81f8 	beq.w	800208c <basicSearch+0x57c>
 8001c9c:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001ca0:	f300 823a 	bgt.w	8002118 <basicSearch+0x608>
 8001ca4:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8001ca8:	f000 81c8 	beq.w	800203c <basicSearch+0x52c>
 8001cac:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8001cb0:	f300 8232 	bgt.w	8002118 <basicSearch+0x608>
 8001cb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cb8:	f000 81b6 	beq.w	8002028 <basicSearch+0x518>
 8001cbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cc0:	f300 822a 	bgt.w	8002118 <basicSearch+0x608>
 8001cc4:	2be0      	cmp	r3, #224	; 0xe0
 8001cc6:	f000 81ff 	beq.w	80020c8 <basicSearch+0x5b8>
 8001cca:	2be0      	cmp	r3, #224	; 0xe0
 8001ccc:	f300 8224 	bgt.w	8002118 <basicSearch+0x608>
 8001cd0:	2b80      	cmp	r3, #128	; 0x80
 8001cd2:	f300 810b 	bgt.w	8001eec <basicSearch+0x3dc>
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	f2c0 821e 	blt.w	8002118 <basicSearch+0x608>
 8001cdc:	2b80      	cmp	r3, #128	; 0x80
 8001cde:	f200 821b 	bhi.w	8002118 <basicSearch+0x608>
 8001ce2:	a201      	add	r2, pc, #4	; (adr r2, 8001ce8 <basicSearch+0x1d8>)
 8001ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce8:	08001ef5 	.word	0x08001ef5
 8001cec:	08001f2b 	.word	0x08001f2b
 8001cf0:	08001f53 	.word	0x08001f53
 8001cf4:	08001f3f 	.word	0x08001f3f
 8001cf8:	08001f7b 	.word	0x08001f7b
 8001cfc:	08002119 	.word	0x08002119
 8001d00:	08001f67 	.word	0x08001f67
 8001d04:	08001f8f 	.word	0x08001f8f
 8001d08:	08001fa3 	.word	0x08001fa3
 8001d0c:	08002119 	.word	0x08002119
 8001d10:	08002119 	.word	0x08002119
 8001d14:	08002119 	.word	0x08002119
 8001d18:	08001fb7 	.word	0x08001fb7
 8001d1c:	08002119 	.word	0x08002119
 8001d20:	08001fd9 	.word	0x08001fd9
 8001d24:	08001fed 	.word	0x08001fed
 8001d28:	08002119 	.word	0x08002119
 8001d2c:	08002119 	.word	0x08002119
 8001d30:	08002119 	.word	0x08002119
 8001d34:	08002119 	.word	0x08002119
 8001d38:	08002119 	.word	0x08002119
 8001d3c:	08002119 	.word	0x08002119
 8001d40:	08002119 	.word	0x08002119
 8001d44:	08002119 	.word	0x08002119
 8001d48:	08002001 	.word	0x08002001
 8001d4c:	08002119 	.word	0x08002119
 8001d50:	08002119 	.word	0x08002119
 8001d54:	08002119 	.word	0x08002119
 8001d58:	08002015 	.word	0x08002015
 8001d5c:	08002119 	.word	0x08002119
 8001d60:	08002119 	.word	0x08002119
 8001d64:	08002119 	.word	0x08002119
 8001d68:	080020a1 	.word	0x080020a1
 8001d6c:	08002119 	.word	0x08002119
 8001d70:	08002119 	.word	0x08002119
 8001d74:	08002119 	.word	0x08002119
 8001d78:	08002119 	.word	0x08002119
 8001d7c:	08002119 	.word	0x08002119
 8001d80:	08002119 	.word	0x08002119
 8001d84:	08002119 	.word	0x08002119
 8001d88:	08002119 	.word	0x08002119
 8001d8c:	08002119 	.word	0x08002119
 8001d90:	08002119 	.word	0x08002119
 8001d94:	08002119 	.word	0x08002119
 8001d98:	08002119 	.word	0x08002119
 8001d9c:	08002119 	.word	0x08002119
 8001da0:	08002119 	.word	0x08002119
 8001da4:	08002119 	.word	0x08002119
 8001da8:	080020f1 	.word	0x080020f1
 8001dac:	08002119 	.word	0x08002119
 8001db0:	08002119 	.word	0x08002119
 8001db4:	08002119 	.word	0x08002119
 8001db8:	08002119 	.word	0x08002119
 8001dbc:	08002119 	.word	0x08002119
 8001dc0:	08002119 	.word	0x08002119
 8001dc4:	08002119 	.word	0x08002119
 8001dc8:	08002119 	.word	0x08002119
 8001dcc:	08002119 	.word	0x08002119
 8001dd0:	08002119 	.word	0x08002119
 8001dd4:	08002119 	.word	0x08002119
 8001dd8:	08002119 	.word	0x08002119
 8001ddc:	08002119 	.word	0x08002119
 8001de0:	08002119 	.word	0x08002119
 8001de4:	08002119 	.word	0x08002119
 8001de8:	08002079 	.word	0x08002079
 8001dec:	08002119 	.word	0x08002119
 8001df0:	08002119 	.word	0x08002119
 8001df4:	08002119 	.word	0x08002119
 8001df8:	08002119 	.word	0x08002119
 8001dfc:	08002119 	.word	0x08002119
 8001e00:	08002119 	.word	0x08002119
 8001e04:	08002119 	.word	0x08002119
 8001e08:	08002119 	.word	0x08002119
 8001e0c:	08002119 	.word	0x08002119
 8001e10:	08002119 	.word	0x08002119
 8001e14:	08002119 	.word	0x08002119
 8001e18:	08002119 	.word	0x08002119
 8001e1c:	08002119 	.word	0x08002119
 8001e20:	08002119 	.word	0x08002119
 8001e24:	08002119 	.word	0x08002119
 8001e28:	08002119 	.word	0x08002119
 8001e2c:	08002119 	.word	0x08002119
 8001e30:	08002119 	.word	0x08002119
 8001e34:	08002119 	.word	0x08002119
 8001e38:	08002119 	.word	0x08002119
 8001e3c:	08002119 	.word	0x08002119
 8001e40:	08002119 	.word	0x08002119
 8001e44:	08002119 	.word	0x08002119
 8001e48:	08002119 	.word	0x08002119
 8001e4c:	08002119 	.word	0x08002119
 8001e50:	08002119 	.word	0x08002119
 8001e54:	08002119 	.word	0x08002119
 8001e58:	08002119 	.word	0x08002119
 8001e5c:	08002119 	.word	0x08002119
 8001e60:	08002119 	.word	0x08002119
 8001e64:	08002119 	.word	0x08002119
 8001e68:	080020b5 	.word	0x080020b5
 8001e6c:	08002119 	.word	0x08002119
 8001e70:	08002119 	.word	0x08002119
 8001e74:	08002119 	.word	0x08002119
 8001e78:	08002119 	.word	0x08002119
 8001e7c:	08002119 	.word	0x08002119
 8001e80:	08002119 	.word	0x08002119
 8001e84:	08002119 	.word	0x08002119
 8001e88:	08002119 	.word	0x08002119
 8001e8c:	08002119 	.word	0x08002119
 8001e90:	08002119 	.word	0x08002119
 8001e94:	08002119 	.word	0x08002119
 8001e98:	08002119 	.word	0x08002119
 8001e9c:	08002119 	.word	0x08002119
 8001ea0:	08002119 	.word	0x08002119
 8001ea4:	08002119 	.word	0x08002119
 8001ea8:	08002105 	.word	0x08002105
 8001eac:	08002119 	.word	0x08002119
 8001eb0:	08002119 	.word	0x08002119
 8001eb4:	08002119 	.word	0x08002119
 8001eb8:	08002119 	.word	0x08002119
 8001ebc:	08002119 	.word	0x08002119
 8001ec0:	08002119 	.word	0x08002119
 8001ec4:	08002119 	.word	0x08002119
 8001ec8:	08002119 	.word	0x08002119
 8001ecc:	08002119 	.word	0x08002119
 8001ed0:	08002119 	.word	0x08002119
 8001ed4:	08002119 	.word	0x08002119
 8001ed8:	08002119 	.word	0x08002119
 8001edc:	08002119 	.word	0x08002119
 8001ee0:	08002119 	.word	0x08002119
 8001ee4:	08002119 	.word	0x08002119
 8001ee8:	08002051 	.word	0x08002051
 8001eec:	2bc0      	cmp	r3, #192	; 0xc0
 8001eee:	f000 80b9 	beq.w	8002064 <basicSearch+0x554>
 8001ef2:	e111      	b.n	8002118 <basicSearch+0x608>
			switch (routine_search) {
 8001ef4:	4b36      	ldr	r3, [pc, #216]	; (8001fd0 <basicSearch+0x4c0>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d00c      	beq.n	8001f16 <basicSearch+0x406>
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	dc0d      	bgt.n	8001f1c <basicSearch+0x40c>
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d002      	beq.n	8001f0a <basicSearch+0x3fa>
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d003      	beq.n	8001f10 <basicSearch+0x400>
 8001f08:	e008      	b.n	8001f1c <basicSearch+0x40c>
				tranquinho();
 8001f0a:	f7ff fc51 	bl	80017b0 <tranquinho>
				break;
 8001f0e:	e008      	b.n	8001f22 <basicSearch+0x412>
				lineSearch();
 8001f10:	f000 f9ce 	bl	80022b0 <lineSearch>
				break;
 8001f14:	e005      	b.n	8001f22 <basicSearch+0x412>
				nhecoNheco();
 8001f16:	f7ff fd1b 	bl	8001950 <nhecoNheco>
				break;
 8001f1a:	e002      	b.n	8001f22 <basicSearch+0x412>
				tranquinho();
 8001f1c:	f7ff fc48 	bl	80017b0 <tranquinho>
				break;
 8001f20:	bf00      	nop
			flagfront = 0;
 8001f22:	4b2c      	ldr	r3, [pc, #176]	; (8001fd4 <basicSearch+0x4c4>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
			break;
 8001f28:	e0fb      	b.n	8002122 <basicSearch+0x612>
			controlMotor(-velAlta, velAlta);
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	425b      	negs	r3, r3
 8001f2e:	6839      	ldr	r1, [r7, #0]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff f98d 	bl	8001250 <controlMotor>
			flagfront = 0;
 8001f36:	4b27      	ldr	r3, [pc, #156]	; (8001fd4 <basicSearch+0x4c4>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
			break;
 8001f3c:	e0f1      	b.n	8002122 <basicSearch+0x612>
			controlMotor(-velMedia, velMedia);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	425b      	negs	r3, r3
 8001f42:	6879      	ldr	r1, [r7, #4]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff f983 	bl	8001250 <controlMotor>
			flagfront = 0;
 8001f4a:	4b22      	ldr	r3, [pc, #136]	; (8001fd4 <basicSearch+0x4c4>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
			break;
 8001f50:	e0e7      	b.n	8002122 <basicSearch+0x612>
			controlMotor(-velMedia, velMedia);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	425b      	negs	r3, r3
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff f979 	bl	8001250 <controlMotor>
			flagfront = 0;
 8001f5e:	4b1d      	ldr	r3, [pc, #116]	; (8001fd4 <basicSearch+0x4c4>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
			break;
 8001f64:	e0dd      	b.n	8002122 <basicSearch+0x612>
			controlMotor(-velBaixa, velMedia);
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	425b      	negs	r3, r3
 8001f6a:	6879      	ldr	r1, [r7, #4]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff f96f 	bl	8001250 <controlMotor>
			flagfront = 0;
 8001f72:	4b18      	ldr	r3, [pc, #96]	; (8001fd4 <basicSearch+0x4c4>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
			break;
 8001f78:	e0d3      	b.n	8002122 <basicSearch+0x612>
			controlMotor(-velBaixa, velBaixa);
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	425b      	negs	r3, r3
 8001f7e:	68b9      	ldr	r1, [r7, #8]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff f965 	bl	8001250 <controlMotor>
			flagfront = 0;
 8001f86:	4b13      	ldr	r3, [pc, #76]	; (8001fd4 <basicSearch+0x4c4>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
			break;
 8001f8c:	e0c9      	b.n	8002122 <basicSearch+0x612>
			controlMotor(-velBaixa, velMedia);
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	425b      	negs	r3, r3
 8001f92:	6879      	ldr	r1, [r7, #4]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff f95b 	bl	8001250 <controlMotor>
			flagfront = 0;
 8001f9a:	4b0e      	ldr	r3, [pc, #56]	; (8001fd4 <basicSearch+0x4c4>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
			break;
 8001fa0:	e0bf      	b.n	8002122 <basicSearch+0x612>
			controlMotor(-velBaixa, velBaixa);
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	425b      	negs	r3, r3
 8001fa6:	68b9      	ldr	r1, [r7, #8]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff f951 	bl	8001250 <controlMotor>
			flagfront = 0;
 8001fae:	4b09      	ldr	r3, [pc, #36]	; (8001fd4 <basicSearch+0x4c4>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
			break;
 8001fb4:	e0b5      	b.n	8002122 <basicSearch+0x612>
			controlMotor(-velBaixa, velBaixa);
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	425b      	negs	r3, r3
 8001fba:	68b9      	ldr	r1, [r7, #8]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff f947 	bl	8001250 <controlMotor>
			flagfront = 0;
 8001fc2:	4b04      	ldr	r3, [pc, #16]	; (8001fd4 <basicSearch+0x4c4>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
			break;
 8001fc8:	e0ab      	b.n	8002122 <basicSearch+0x612>
 8001fca:	bf00      	nop
 8001fcc:	2000022c 	.word	0x2000022c
 8001fd0:	20000209 	.word	0x20000209
 8001fd4:	20000230 	.word	0x20000230
			controlMotor(-velBaixa, velBaixa);
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	425b      	negs	r3, r3
 8001fdc:	68b9      	ldr	r1, [r7, #8]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7ff f936 	bl	8001250 <controlMotor>
			flagfront = 0;
 8001fe4:	4b51      	ldr	r3, [pc, #324]	; (800212c <basicSearch+0x61c>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	601a      	str	r2, [r3, #0]
			break;
 8001fea:	e09a      	b.n	8002122 <basicSearch+0x612>
			controlMotor(-velBaixa, velBaixa);
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	425b      	negs	r3, r3
 8001ff0:	68b9      	ldr	r1, [r7, #8]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff f92c 	bl	8001250 <controlMotor>
			flagfront = 0;
 8001ff8:	4b4c      	ldr	r3, [pc, #304]	; (800212c <basicSearch+0x61c>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	601a      	str	r2, [r3, #0]
			break;
 8001ffe:	e090      	b.n	8002122 <basicSearch+0x612>
			controlMotor(-velBaixa, velBaixa);
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	425b      	negs	r3, r3
 8002004:	68b9      	ldr	r1, [r7, #8]
 8002006:	4618      	mov	r0, r3
 8002008:	f7ff f922 	bl	8001250 <controlMotor>
			flagfront = 0;
 800200c:	4b47      	ldr	r3, [pc, #284]	; (800212c <basicSearch+0x61c>)
 800200e:	2200      	movs	r2, #0
 8002010:	601a      	str	r2, [r3, #0]
			break;
 8002012:	e086      	b.n	8002122 <basicSearch+0x612>
			controlMotor(-velBaixa, velBaixa);
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	425b      	negs	r3, r3
 8002018:	68b9      	ldr	r1, [r7, #8]
 800201a:	4618      	mov	r0, r3
 800201c:	f7ff f918 	bl	8001250 <controlMotor>
			flagfront = 0;
 8002020:	4b42      	ldr	r3, [pc, #264]	; (800212c <basicSearch+0x61c>)
 8002022:	2200      	movs	r2, #0
 8002024:	601a      	str	r2, [r3, #0]
			break;
 8002026:	e07c      	b.n	8002122 <basicSearch+0x612>
			controlMotor(velAlta, -velAlta);
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	425b      	negs	r3, r3
 800202c:	4619      	mov	r1, r3
 800202e:	6838      	ldr	r0, [r7, #0]
 8002030:	f7ff f90e 	bl	8001250 <controlMotor>
			flagfront = 0;
 8002034:	4b3d      	ldr	r3, [pc, #244]	; (800212c <basicSearch+0x61c>)
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]
			break;
 800203a:	e072      	b.n	8002122 <basicSearch+0x612>
			controlMotor(velMedia, -velBaixa);
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	425b      	negs	r3, r3
 8002040:	4619      	mov	r1, r3
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f7ff f904 	bl	8001250 <controlMotor>
			flagfront = 0;
 8002048:	4b38      	ldr	r3, [pc, #224]	; (800212c <basicSearch+0x61c>)
 800204a:	2200      	movs	r2, #0
 800204c:	601a      	str	r2, [r3, #0]
			break;
 800204e:	e068      	b.n	8002122 <basicSearch+0x612>
			controlMotor(velMedia, -velBaixa);
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	425b      	negs	r3, r3
 8002054:	4619      	mov	r1, r3
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f7ff f8fa 	bl	8001250 <controlMotor>
			flagfront = 0;
 800205c:	4b33      	ldr	r3, [pc, #204]	; (800212c <basicSearch+0x61c>)
 800205e:	2200      	movs	r2, #0
 8002060:	601a      	str	r2, [r3, #0]
			break;
 8002062:	e05e      	b.n	8002122 <basicSearch+0x612>
			controlMotor(velMedia, -velBaixa);
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	425b      	negs	r3, r3
 8002068:	4619      	mov	r1, r3
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f7ff f8f0 	bl	8001250 <controlMotor>
			flagfront = 0;
 8002070:	4b2e      	ldr	r3, [pc, #184]	; (800212c <basicSearch+0x61c>)
 8002072:	2200      	movs	r2, #0
 8002074:	601a      	str	r2, [r3, #0]
			break;
 8002076:	e054      	b.n	8002122 <basicSearch+0x612>
			controlMotor(velMedia, -velBaixa);
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	425b      	negs	r3, r3
 800207c:	4619      	mov	r1, r3
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7ff f8e6 	bl	8001250 <controlMotor>
			flagfront = 0;
 8002084:	4b29      	ldr	r3, [pc, #164]	; (800212c <basicSearch+0x61c>)
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]
			break;
 800208a:	e04a      	b.n	8002122 <basicSearch+0x612>
			controlMotor(velMedia, -velBaixa);
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	425b      	negs	r3, r3
 8002090:	4619      	mov	r1, r3
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f7ff f8dc 	bl	8001250 <controlMotor>
			flagfront = 0;
 8002098:	4b24      	ldr	r3, [pc, #144]	; (800212c <basicSearch+0x61c>)
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]
			break;
 800209e:	e040      	b.n	8002122 <basicSearch+0x612>
			controlMotor(velBaixa, -velBaixa);
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	425b      	negs	r3, r3
 80020a4:	4619      	mov	r1, r3
 80020a6:	68b8      	ldr	r0, [r7, #8]
 80020a8:	f7ff f8d2 	bl	8001250 <controlMotor>
			flagfront = 0;
 80020ac:	4b1f      	ldr	r3, [pc, #124]	; (800212c <basicSearch+0x61c>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	601a      	str	r2, [r3, #0]
			break;
 80020b2:	e036      	b.n	8002122 <basicSearch+0x612>
			controlMotor(velBaixa, -velBaixa);
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	425b      	negs	r3, r3
 80020b8:	4619      	mov	r1, r3
 80020ba:	68b8      	ldr	r0, [r7, #8]
 80020bc:	f7ff f8c8 	bl	8001250 <controlMotor>
			flagfront = 0;
 80020c0:	4b1a      	ldr	r3, [pc, #104]	; (800212c <basicSearch+0x61c>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	601a      	str	r2, [r3, #0]
			break;
 80020c6:	e02c      	b.n	8002122 <basicSearch+0x612>
			controlMotor(velBaixa, -velBaixa);
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	425b      	negs	r3, r3
 80020cc:	4619      	mov	r1, r3
 80020ce:	68b8      	ldr	r0, [r7, #8]
 80020d0:	f7ff f8be 	bl	8001250 <controlMotor>
			flagfront = 0;
 80020d4:	4b15      	ldr	r3, [pc, #84]	; (800212c <basicSearch+0x61c>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	601a      	str	r2, [r3, #0]
			break;
 80020da:	e022      	b.n	8002122 <basicSearch+0x612>
			controlMotor(velBaixa, -velBaixa);
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	425b      	negs	r3, r3
 80020e0:	4619      	mov	r1, r3
 80020e2:	68b8      	ldr	r0, [r7, #8]
 80020e4:	f7ff f8b4 	bl	8001250 <controlMotor>
			flagfront = 0;
 80020e8:	4b10      	ldr	r3, [pc, #64]	; (800212c <basicSearch+0x61c>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	601a      	str	r2, [r3, #0]
			break;
 80020ee:	e018      	b.n	8002122 <basicSearch+0x612>
			controlMotor(velBaixa, -velBaixa);
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	425b      	negs	r3, r3
 80020f4:	4619      	mov	r1, r3
 80020f6:	68b8      	ldr	r0, [r7, #8]
 80020f8:	f7ff f8aa 	bl	8001250 <controlMotor>
			flagfront = 0;
 80020fc:	4b0b      	ldr	r3, [pc, #44]	; (800212c <basicSearch+0x61c>)
 80020fe:	2200      	movs	r2, #0
 8002100:	601a      	str	r2, [r3, #0]
			break;
 8002102:	e00e      	b.n	8002122 <basicSearch+0x612>
			controlMotor(velBaixa, -velBaixa);
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	425b      	negs	r3, r3
 8002108:	4619      	mov	r1, r3
 800210a:	68b8      	ldr	r0, [r7, #8]
 800210c:	f7ff f8a0 	bl	8001250 <controlMotor>
			flagfront = 0;
 8002110:	4b06      	ldr	r3, [pc, #24]	; (800212c <basicSearch+0x61c>)
 8002112:	2200      	movs	r2, #0
 8002114:	601a      	str	r2, [r3, #0]
			break;
 8002116:	e004      	b.n	8002122 <basicSearch+0x612>
			controlMotor(0, 0);
 8002118:	2100      	movs	r1, #0
 800211a:	2000      	movs	r0, #0
 800211c:	f7ff f898 	bl	8001250 <controlMotor>
			break;
 8002120:	bf00      	nop
}
 8002122:	bf00      	nop
 8002124:	3714      	adds	r7, #20
 8002126:	46bd      	mov	sp, r7
 8002128:	bd90      	pop	{r4, r7, pc}
 800212a:	bf00      	nop
 800212c:	20000230 	.word	0x20000230

08002130 <lineEscape>:

void lineEscape() {
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
	if (tag_line_front_l && !tag_line_front_r && !tagliner) {
 8002136:	4b5a      	ldr	r3, [pc, #360]	; (80022a0 <lineEscape+0x170>)
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b00      	cmp	r3, #0
 800213e:	d038      	beq.n	80021b2 <lineEscape+0x82>
 8002140:	4b58      	ldr	r3, [pc, #352]	; (80022a4 <lineEscape+0x174>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	b2db      	uxtb	r3, r3
 8002146:	f083 0301 	eor.w	r3, r3, #1
 800214a:	b2db      	uxtb	r3, r3
 800214c:	2b00      	cmp	r3, #0
 800214e:	d030      	beq.n	80021b2 <lineEscape+0x82>
 8002150:	4b55      	ldr	r3, [pc, #340]	; (80022a8 <lineEscape+0x178>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	b2db      	uxtb	r3, r3
 8002156:	f083 0301 	eor.w	r3, r3, #1
 800215a:	b2db      	uxtb	r3, r3
 800215c:	2b00      	cmp	r3, #0
 800215e:	d028      	beq.n	80021b2 <lineEscape+0x82>
		controlMotor(-100, -100);
 8002160:	f06f 0163 	mvn.w	r1, #99	; 0x63
 8002164:	f06f 0063 	mvn.w	r0, #99	; 0x63
 8002168:	f7ff f872 	bl	8001250 <controlMotor>
		HAL_Delay(75);
 800216c:	204b      	movs	r0, #75	; 0x4b
 800216e:	f001 fc9f 	bl	8003ab0 <HAL_Delay>
		controlMotor(0, 0);
 8002172:	2100      	movs	r1, #0
 8002174:	2000      	movs	r0, #0
 8002176:	f7ff f86b 	bl	8001250 <controlMotor>
		HAL_Delay(30);
 800217a:	201e      	movs	r0, #30
 800217c:	f001 fc98 	bl	8003ab0 <HAL_Delay>
		for (int i = 40; i <= 100; i += 20) {
 8002180:	2328      	movs	r3, #40	; 0x28
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	e00b      	b.n	800219e <lineEscape+0x6e>
			controlMotor(i, i * -1);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	425b      	negs	r3, r3
 800218a:	4619      	mov	r1, r3
 800218c:	68f8      	ldr	r0, [r7, #12]
 800218e:	f7ff f85f 	bl	8001250 <controlMotor>
			HAL_Delay(10);
 8002192:	200a      	movs	r0, #10
 8002194:	f001 fc8c 	bl	8003ab0 <HAL_Delay>
		for (int i = 40; i <= 100; i += 20) {
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	3314      	adds	r3, #20
 800219c:	60fb      	str	r3, [r7, #12]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2b64      	cmp	r3, #100	; 0x64
 80021a2:	ddf0      	ble.n	8002186 <lineEscape+0x56>
		}
		HAL_Delay(50);
 80021a4:	2032      	movs	r0, #50	; 0x32
 80021a6:	f001 fc83 	bl	8003ab0 <HAL_Delay>
		taglinel = 1;
 80021aa:	4b40      	ldr	r3, [pc, #256]	; (80022ac <lineEscape+0x17c>)
 80021ac:	2201      	movs	r2, #1
 80021ae:	701a      	strb	r2, [r3, #0]
 80021b0:	e06c      	b.n	800228c <lineEscape+0x15c>

	} else if (!tag_line_front_l && tag_line_front_r && !taglinel) {
 80021b2:	4b3b      	ldr	r3, [pc, #236]	; (80022a0 <lineEscape+0x170>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	f083 0301 	eor.w	r3, r3, #1
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d035      	beq.n	800222e <lineEscape+0xfe>
 80021c2:	4b38      	ldr	r3, [pc, #224]	; (80022a4 <lineEscape+0x174>)
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d030      	beq.n	800222e <lineEscape+0xfe>
 80021cc:	4b37      	ldr	r3, [pc, #220]	; (80022ac <lineEscape+0x17c>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	f083 0301 	eor.w	r3, r3, #1
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d028      	beq.n	800222e <lineEscape+0xfe>
		controlMotor(-100, -100);
 80021dc:	f06f 0163 	mvn.w	r1, #99	; 0x63
 80021e0:	f06f 0063 	mvn.w	r0, #99	; 0x63
 80021e4:	f7ff f834 	bl	8001250 <controlMotor>
		HAL_Delay(75);
 80021e8:	204b      	movs	r0, #75	; 0x4b
 80021ea:	f001 fc61 	bl	8003ab0 <HAL_Delay>
		controlMotor(0, 0);
 80021ee:	2100      	movs	r1, #0
 80021f0:	2000      	movs	r0, #0
 80021f2:	f7ff f82d 	bl	8001250 <controlMotor>
		HAL_Delay(20);
 80021f6:	2014      	movs	r0, #20
 80021f8:	f001 fc5a 	bl	8003ab0 <HAL_Delay>
		for (int i = 40; i <= 100; i += 20) {
 80021fc:	2328      	movs	r3, #40	; 0x28
 80021fe:	60bb      	str	r3, [r7, #8]
 8002200:	e00b      	b.n	800221a <lineEscape+0xea>
			controlMotor(i * -1, i);
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	425b      	negs	r3, r3
 8002206:	68b9      	ldr	r1, [r7, #8]
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff f821 	bl	8001250 <controlMotor>
			HAL_Delay(10);
 800220e:	200a      	movs	r0, #10
 8002210:	f001 fc4e 	bl	8003ab0 <HAL_Delay>
		for (int i = 40; i <= 100; i += 20) {
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	3314      	adds	r3, #20
 8002218:	60bb      	str	r3, [r7, #8]
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	2b64      	cmp	r3, #100	; 0x64
 800221e:	ddf0      	ble.n	8002202 <lineEscape+0xd2>
		}
		HAL_Delay(50);
 8002220:	2032      	movs	r0, #50	; 0x32
 8002222:	f001 fc45 	bl	8003ab0 <HAL_Delay>
		tagliner = 1;
 8002226:	4b20      	ldr	r3, [pc, #128]	; (80022a8 <lineEscape+0x178>)
 8002228:	2201      	movs	r2, #1
 800222a:	701a      	strb	r2, [r3, #0]
 800222c:	e02e      	b.n	800228c <lineEscape+0x15c>

	} else if (tag_line_front_l && tag_line_front_r) {
 800222e:	4b1c      	ldr	r3, [pc, #112]	; (80022a0 <lineEscape+0x170>)
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	b2db      	uxtb	r3, r3
 8002234:	2b00      	cmp	r3, #0
 8002236:	d029      	beq.n	800228c <lineEscape+0x15c>
 8002238:	4b1a      	ldr	r3, [pc, #104]	; (80022a4 <lineEscape+0x174>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b00      	cmp	r3, #0
 8002240:	d024      	beq.n	800228c <lineEscape+0x15c>
		controlMotor(-100, -100);
 8002242:	f06f 0163 	mvn.w	r1, #99	; 0x63
 8002246:	f06f 0063 	mvn.w	r0, #99	; 0x63
 800224a:	f7ff f801 	bl	8001250 <controlMotor>
		HAL_Delay(85);
 800224e:	2055      	movs	r0, #85	; 0x55
 8002250:	f001 fc2e 	bl	8003ab0 <HAL_Delay>
		controlMotor(0, 0);
 8002254:	2100      	movs	r1, #0
 8002256:	2000      	movs	r0, #0
 8002258:	f7fe fffa 	bl	8001250 <controlMotor>
		HAL_Delay(30);
 800225c:	201e      	movs	r0, #30
 800225e:	f001 fc27 	bl	8003ab0 <HAL_Delay>
		for (int i = 40; i <= 100; i += 20) {
 8002262:	2328      	movs	r3, #40	; 0x28
 8002264:	607b      	str	r3, [r7, #4]
 8002266:	e00b      	b.n	8002280 <lineEscape+0x150>
			controlMotor(i * -1, i);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	425b      	negs	r3, r3
 800226c:	6879      	ldr	r1, [r7, #4]
 800226e:	4618      	mov	r0, r3
 8002270:	f7fe ffee 	bl	8001250 <controlMotor>
			HAL_Delay(10);
 8002274:	200a      	movs	r0, #10
 8002276:	f001 fc1b 	bl	8003ab0 <HAL_Delay>
		for (int i = 40; i <= 100; i += 20) {
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	3314      	adds	r3, #20
 800227e:	607b      	str	r3, [r7, #4]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2b64      	cmp	r3, #100	; 0x64
 8002284:	ddf0      	ble.n	8002268 <lineEscape+0x138>
		}
		HAL_Delay(60);
 8002286:	203c      	movs	r0, #60	; 0x3c
 8002288:	f001 fc12 	bl	8003ab0 <HAL_Delay>

	}
	tag_line_front_l = 0;
 800228c:	4b04      	ldr	r3, [pc, #16]	; (80022a0 <lineEscape+0x170>)
 800228e:	2200      	movs	r2, #0
 8002290:	701a      	strb	r2, [r3, #0]
	tag_line_front_r = 0;
 8002292:	4b04      	ldr	r3, [pc, #16]	; (80022a4 <lineEscape+0x174>)
 8002294:	2200      	movs	r2, #0
 8002296:	701a      	strb	r2, [r3, #0]
}
 8002298:	bf00      	nop
 800229a:	3710      	adds	r7, #16
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	2000020a 	.word	0x2000020a
 80022a4:	2000020b 	.word	0x2000020b
 80022a8:	2000020c 	.word	0x2000020c
 80022ac:	2000020d 	.word	0x2000020d

080022b0 <lineSearch>:

void lineSearch() {
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
	if (tag_line_front_l || tag_line_front_r) {
 80022b4:	4b0c      	ldr	r3, [pc, #48]	; (80022e8 <lineSearch+0x38>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d104      	bne.n	80022c8 <lineSearch+0x18>
 80022be:	4b0b      	ldr	r3, [pc, #44]	; (80022ec <lineSearch+0x3c>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d002      	beq.n	80022ce <lineSearch+0x1e>
		lineEscape();
 80022c8:	f7ff ff32 	bl	8002130 <lineEscape>
 80022cc:	e00a      	b.n	80022e4 <lineSearch+0x34>
	} else {
		controlMotor(60, 60);
 80022ce:	213c      	movs	r1, #60	; 0x3c
 80022d0:	203c      	movs	r0, #60	; 0x3c
 80022d2:	f7fe ffbd 	bl	8001250 <controlMotor>
		tagliner = 0;
 80022d6:	4b06      	ldr	r3, [pc, #24]	; (80022f0 <lineSearch+0x40>)
 80022d8:	2200      	movs	r2, #0
 80022da:	701a      	strb	r2, [r3, #0]
		taglinel = 0;
 80022dc:	4b05      	ldr	r3, [pc, #20]	; (80022f4 <lineSearch+0x44>)
 80022de:	2200      	movs	r2, #0
 80022e0:	701a      	strb	r2, [r3, #0]
	}
}
 80022e2:	bf00      	nop
 80022e4:	bf00      	nop
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	2000020a 	.word	0x2000020a
 80022ec:	2000020b 	.word	0x2000020b
 80022f0:	2000020c 	.word	0x2000020c
 80022f4:	2000020d 	.word	0x2000020d

080022f8 <selectIniRoutine>:

//routine Functions
void selectIniRoutine() {
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
	char str[11];
	while (Duty_Ch2 > 7) {
 80022fe:	e041      	b.n	8002384 <selectIniRoutine+0x8c>
		if (Duty_Ch1 > 9.5) {
 8002300:	4b28      	ldr	r3, [pc, #160]	; (80023a4 <selectIniRoutine+0xac>)
 8002302:	edd3 7a00 	vldr	s15, [r3]
 8002306:	eeb2 7a03 	vmov.f32	s14, #35	; 0x41180000  9.5
 800230a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800230e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002312:	dd09      	ble.n	8002328 <selectIniRoutine+0x30>
			routine_ini++;
 8002314:	4b24      	ldr	r3, [pc, #144]	; (80023a8 <selectIniRoutine+0xb0>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	3301      	adds	r3, #1
 800231a:	b2da      	uxtb	r2, r3
 800231c:	4b22      	ldr	r3, [pc, #136]	; (80023a8 <selectIniRoutine+0xb0>)
 800231e:	701a      	strb	r2, [r3, #0]
			HAL_Delay(50);
 8002320:	2032      	movs	r0, #50	; 0x32
 8002322:	f001 fbc5 	bl	8003ab0 <HAL_Delay>
 8002326:	e012      	b.n	800234e <selectIniRoutine+0x56>
		} else if (Duty_Ch1 <= 6) {
 8002328:	4b1e      	ldr	r3, [pc, #120]	; (80023a4 <selectIniRoutine+0xac>)
 800232a:	edd3 7a00 	vldr	s15, [r3]
 800232e:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8002332:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800233a:	d808      	bhi.n	800234e <selectIniRoutine+0x56>
			routine_ini--;
 800233c:	4b1a      	ldr	r3, [pc, #104]	; (80023a8 <selectIniRoutine+0xb0>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	3b01      	subs	r3, #1
 8002342:	b2da      	uxtb	r2, r3
 8002344:	4b18      	ldr	r3, [pc, #96]	; (80023a8 <selectIniRoutine+0xb0>)
 8002346:	701a      	strb	r2, [r3, #0]
			HAL_Delay(50);
 8002348:	2032      	movs	r0, #50	; 0x32
 800234a:	f001 fbb1 	bl	8003ab0 <HAL_Delay>
		}
		if (routine_ini >= 40)
 800234e:	4b16      	ldr	r3, [pc, #88]	; (80023a8 <selectIniRoutine+0xb0>)
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	2b27      	cmp	r3, #39	; 0x27
 8002354:	d902      	bls.n	800235c <selectIniRoutine+0x64>
			routine_ini = 0;
 8002356:	4b14      	ldr	r3, [pc, #80]	; (80023a8 <selectIniRoutine+0xb0>)
 8002358:	2200      	movs	r2, #0
 800235a:	701a      	strb	r2, [r3, #0]
		sprintf(str, "Rotina: %02i", routine_ini);
 800235c:	4b12      	ldr	r3, [pc, #72]	; (80023a8 <selectIniRoutine+0xb0>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	461a      	mov	r2, r3
 8002362:	1d3b      	adds	r3, r7, #4
 8002364:	4911      	ldr	r1, [pc, #68]	; (80023ac <selectIniRoutine+0xb4>)
 8002366:	4618      	mov	r0, r3
 8002368:	f006 fcaa 	bl	8008cc0 <siprintf>
		SSD1306_GotoXY(10, 10);
 800236c:	210a      	movs	r1, #10
 800236e:	200a      	movs	r0, #10
 8002370:	f000 fe80 	bl	8003074 <SSD1306_GotoXY>
		SSD1306_Puts(str, &Font_11x18, 1);
 8002374:	1d3b      	adds	r3, r7, #4
 8002376:	2201      	movs	r2, #1
 8002378:	490d      	ldr	r1, [pc, #52]	; (80023b0 <selectIniRoutine+0xb8>)
 800237a:	4618      	mov	r0, r3
 800237c:	f000 ff10 	bl	80031a0 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8002380:	f000 fdd2 	bl	8002f28 <SSD1306_UpdateScreen>
	while (Duty_Ch2 > 7) {
 8002384:	4b0b      	ldr	r3, [pc, #44]	; (80023b4 <selectIniRoutine+0xbc>)
 8002386:	edd3 7a00 	vldr	s15, [r3]
 800238a:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 800238e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002396:	dcb3      	bgt.n	8002300 <selectIniRoutine+0x8>
	 SSD1306_GotoXY(10, 30);
	 SSD1306_Putc(routine_ini + '0', &Font_11x18, 1);
	 SSD1306_UpdateScreen();

	 }*/
}
 8002398:	bf00      	nop
 800239a:	bf00      	nop
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	20000214 	.word	0x20000214
 80023a8:	20000208 	.word	0x20000208
 80023ac:	0800b1d0 	.word	0x0800b1d0
 80023b0:	20000000 	.word	0x20000000
 80023b4:	20000218 	.word	0x20000218

080023b8 <map>:

// basic functions
float map(float x, float in_max, float in_min, float out_max, float out_min) {
 80023b8:	b480      	push	{r7}
 80023ba:	b087      	sub	sp, #28
 80023bc:	af00      	add	r7, sp, #0
 80023be:	ed87 0a05 	vstr	s0, [r7, #20]
 80023c2:	edc7 0a04 	vstr	s1, [r7, #16]
 80023c6:	ed87 1a03 	vstr	s2, [r7, #12]
 80023ca:	edc7 1a02 	vstr	s3, [r7, #8]
 80023ce:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80023d2:	ed97 7a05 	vldr	s14, [r7, #20]
 80023d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80023da:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023de:	edd7 6a02 	vldr	s13, [r7, #8]
 80023e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80023e6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80023ea:	ee67 6a27 	vmul.f32	s13, s14, s15
 80023ee:	ed97 7a04 	vldr	s14, [r7, #16]
 80023f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80023f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8002402:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8002406:	eeb0 0a67 	vmov.f32	s0, s15
 800240a:	371c      	adds	r7, #28
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 800241c:	1d39      	adds	r1, r7, #4
 800241e:	f04f 33ff 	mov.w	r3, #4294967295
 8002422:	2201      	movs	r2, #1
 8002424:	4803      	ldr	r0, [pc, #12]	; (8002434 <__io_putchar+0x20>)
 8002426:	f005 fc3a 	bl	8007c9e <HAL_UART_Transmit>
	return ch;
 800242a:	687b      	ldr	r3, [r7, #4]
}
 800242c:	4618      	mov	r0, r3
 800242e:	3708      	adds	r7, #8
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	200003f4 	.word	0x200003f4

08002438 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800243c:	f001 fac6 	bl	80039cc <HAL_Init>
	/* USER CODE BEGIN Init */
	//HAL_Delay(1000);
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002440:	f000 f896 	bl	8002570 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002444:	f000 fbe6 	bl	8002c14 <MX_GPIO_Init>
	MX_TIM1_Init();
 8002448:	f000 f984 	bl	8002754 <MX_TIM1_Init>
	MX_USART2_UART_Init();
 800244c:	f000 fbb8 	bl	8002bc0 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 8002450:	f000 f952 	bl	80026f8 <MX_I2C1_Init>
	MX_TIM2_Init();
 8002454:	f000 fa2c 	bl	80028b0 <MX_TIM2_Init>
	MX_TIM3_Init();
 8002458:	f000 fac6 	bl	80029e8 <MX_TIM3_Init>
	MX_TIM5_Init();
 800245c:	f000 fb12 	bl	8002a84 <MX_TIM5_Init>
	MX_ADC1_Init();
 8002460:	f000 f8f8 	bl	8002654 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Init(&htim3);
 8002464:	483b      	ldr	r0, [pc, #236]	; (8002554 <main+0x11c>)
 8002466:	f003 fe75 	bl	8006154 <HAL_TIM_Base_Init>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800246a:	2100      	movs	r1, #0
 800246c:	483a      	ldr	r0, [pc, #232]	; (8002558 <main+0x120>)
 800246e:	f003 ff19 	bl	80062a4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8002472:	2108      	movs	r1, #8
 8002474:	4838      	ldr	r0, [pc, #224]	; (8002558 <main+0x120>)
 8002476:	f003 ff15 	bl	80062a4 <HAL_TIM_PWM_Start>

	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);   // main channel
 800247a:	2100      	movs	r1, #0
 800247c:	4837      	ldr	r0, [pc, #220]	; (800255c <main+0x124>)
 800247e:	f004 f90f 	bl	80066a0 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);   // indirect channel
 8002482:	2104      	movs	r1, #4
 8002484:	4835      	ldr	r0, [pc, #212]	; (800255c <main+0x124>)
 8002486:	f004 f82f 	bl	80064e8 <HAL_TIM_IC_Start>
	HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_2);   // main channel
 800248a:	2104      	movs	r1, #4
 800248c:	4834      	ldr	r0, [pc, #208]	; (8002560 <main+0x128>)
 800248e:	f004 f907 	bl	80066a0 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start(&htim5, TIM_CHANNEL_1);   // indirect channel
 8002492:	2100      	movs	r1, #0
 8002494:	4832      	ldr	r0, [pc, #200]	; (8002560 <main+0x128>)
 8002496:	f004 f827 	bl	80064e8 <HAL_TIM_IC_Start>

	SSD1306_Init(); // initialize the display
 800249a:	f000 fc81 	bl	8002da0 <SSD1306_Init>
	HAL_ADC_Start_IT(&hadc1);
 800249e:	4831      	ldr	r0, [pc, #196]	; (8002564 <main+0x12c>)
 80024a0:	f001 fb6e 	bl	8003b80 <HAL_ADC_Start_IT>

	controlMotor(0, 0);
 80024a4:	2100      	movs	r1, #0
 80024a6:	2000      	movs	r0, #0
 80024a8:	f7fe fed2 	bl	8001250 <controlMotor>
		/*controlMotor(0, 0);
		 HAL_Delay(1000);
		 controlMotor(50, 50);
		 HAL_Delay(2000);
		 if (HAL_GPIO_ReadPin(GPIOC, AUTO_Pin)) {*/
		selectIniRoutine();
 80024ac:	f7ff ff24 	bl	80022f8 <selectIniRoutine>
		SSD1306_Clear();
 80024b0:	f000 fe9b 	bl	80031ea <SSD1306_Clear>
		HAL_GPIO_WritePin(GPIOA, LED_Pin, 0);
 80024b4:	2200      	movs	r2, #0
 80024b6:	2120      	movs	r1, #32
 80024b8:	482b      	ldr	r0, [pc, #172]	; (8002568 <main+0x130>)
 80024ba:	f002 fa67 	bl	800498c <HAL_GPIO_WritePin>
		while (!HAL_GPIO_ReadPin(GPIOA, IR_Pin)) {
 80024be:	e016      	b.n	80024ee <main+0xb6>
			controlMotor(0, 0);
 80024c0:	2100      	movs	r1, #0
 80024c2:	2000      	movs	r0, #0
 80024c4:	f7fe fec4 	bl	8001250 <controlMotor>
			readSensors();
 80024c8:	f7fe fde8 	bl	800109c <readSensors>
			printSensors();
 80024cc:	f7fe fe9c 	bl	8001208 <printSensors>
			HAL_GPIO_WritePin(GPIOA, LED_Pin, !HAL_GPIO_ReadPin(GPIOC, SF_Pin));
 80024d0:	2120      	movs	r1, #32
 80024d2:	4826      	ldr	r0, [pc, #152]	; (800256c <main+0x134>)
 80024d4:	f002 fa42 	bl	800495c <HAL_GPIO_ReadPin>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	bf0c      	ite	eq
 80024de:	2301      	moveq	r3, #1
 80024e0:	2300      	movne	r3, #0
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	461a      	mov	r2, r3
 80024e6:	2120      	movs	r1, #32
 80024e8:	481f      	ldr	r0, [pc, #124]	; (8002568 <main+0x130>)
 80024ea:	f002 fa4f 	bl	800498c <HAL_GPIO_WritePin>
		while (!HAL_GPIO_ReadPin(GPIOA, IR_Pin)) {
 80024ee:	2140      	movs	r1, #64	; 0x40
 80024f0:	481d      	ldr	r0, [pc, #116]	; (8002568 <main+0x130>)
 80024f2:	f002 fa33 	bl	800495c <HAL_GPIO_ReadPin>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d0e1      	beq.n	80024c0 <main+0x88>
		}
		SSD1306_Clear();
 80024fc:	f000 fe75 	bl	80031ea <SSD1306_Clear>
		HAL_GPIO_WritePin(GPIOA, LED_Pin, 0);
 8002500:	2200      	movs	r2, #0
 8002502:	2120      	movs	r1, #32
 8002504:	4818      	ldr	r0, [pc, #96]	; (8002568 <main+0x130>)
 8002506:	f002 fa41 	bl	800498c <HAL_GPIO_WritePin>
		inicialMoviment();
 800250a:	f7ff f85d 	bl	80015c8 <inicialMoviment>
		while (HAL_GPIO_ReadPin(GPIOA, IR_Pin)) {
 800250e:	e007      	b.n	8002520 <main+0xe8>
			readSensors();
 8002510:	f7fe fdc4 	bl	800109c <readSensors>
			//printSensors();
			basicSearch(100, 65, 80, 85);
 8002514:	2355      	movs	r3, #85	; 0x55
 8002516:	2250      	movs	r2, #80	; 0x50
 8002518:	2141      	movs	r1, #65	; 0x41
 800251a:	2064      	movs	r0, #100	; 0x64
 800251c:	f7ff faf8 	bl	8001b10 <basicSearch>
		while (HAL_GPIO_ReadPin(GPIOA, IR_Pin)) {
 8002520:	2140      	movs	r1, #64	; 0x40
 8002522:	4811      	ldr	r0, [pc, #68]	; (8002568 <main+0x130>)
 8002524:	f002 fa1a 	bl	800495c <HAL_GPIO_ReadPin>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1f0      	bne.n	8002510 <main+0xd8>
		}
		HAL_GPIO_WritePin(GPIOA, LED_Pin, 1);
 800252e:	2201      	movs	r2, #1
 8002530:	2120      	movs	r1, #32
 8002532:	480d      	ldr	r0, [pc, #52]	; (8002568 <main+0x130>)
 8002534:	f002 fa2a 	bl	800498c <HAL_GPIO_WritePin>
		controlMotor(0, 0);
 8002538:	2100      	movs	r1, #0
 800253a:	2000      	movs	r0, #0
 800253c:	f7fe fe88 	bl	8001250 <controlMotor>
		while (1) {
			controlMotor(0, 0);
 8002540:	2100      	movs	r1, #0
 8002542:	2000      	movs	r0, #0
 8002544:	f7fe fe84 	bl	8001250 <controlMotor>
			readSensors();
 8002548:	f7fe fda8 	bl	800109c <readSensors>
			printSensors();
 800254c:	f7fe fe5c 	bl	8001208 <printSensors>
			controlMotor(0, 0);
 8002550:	e7f6      	b.n	8002540 <main+0x108>
 8002552:	bf00      	nop
 8002554:	20000280 	.word	0x20000280
 8002558:	20000238 	.word	0x20000238
 800255c:	20000364 	.word	0x20000364
 8002560:	200003ac 	.word	0x200003ac
 8002564:	200002c8 	.word	0x200002c8
 8002568:	40020000 	.word	0x40020000
 800256c:	40020800 	.word	0x40020800

08002570 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002570:	b580      	push	{r7, lr}
 8002572:	b094      	sub	sp, #80	; 0x50
 8002574:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002576:	f107 031c 	add.w	r3, r7, #28
 800257a:	2234      	movs	r2, #52	; 0x34
 800257c:	2100      	movs	r1, #0
 800257e:	4618      	mov	r0, r3
 8002580:	f005 ff2c 	bl	80083dc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002584:	f107 0308 	add.w	r3, r7, #8
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	605a      	str	r2, [r3, #4]
 800258e:	609a      	str	r2, [r3, #8]
 8002590:	60da      	str	r2, [r3, #12]
 8002592:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002594:	2300      	movs	r3, #0
 8002596:	607b      	str	r3, [r7, #4]
 8002598:	4b2c      	ldr	r3, [pc, #176]	; (800264c <SystemClock_Config+0xdc>)
 800259a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259c:	4a2b      	ldr	r2, [pc, #172]	; (800264c <SystemClock_Config+0xdc>)
 800259e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025a2:	6413      	str	r3, [r2, #64]	; 0x40
 80025a4:	4b29      	ldr	r3, [pc, #164]	; (800264c <SystemClock_Config+0xdc>)
 80025a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ac:	607b      	str	r3, [r7, #4]
 80025ae:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80025b0:	2300      	movs	r3, #0
 80025b2:	603b      	str	r3, [r7, #0]
 80025b4:	4b26      	ldr	r3, [pc, #152]	; (8002650 <SystemClock_Config+0xe0>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a25      	ldr	r2, [pc, #148]	; (8002650 <SystemClock_Config+0xe0>)
 80025ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025be:	6013      	str	r3, [r2, #0]
 80025c0:	4b23      	ldr	r3, [pc, #140]	; (8002650 <SystemClock_Config+0xe0>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80025c8:	603b      	str	r3, [r7, #0]
 80025ca:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80025cc:	2302      	movs	r3, #2
 80025ce:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025d0:	2301      	movs	r3, #1
 80025d2:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80025d4:	2310      	movs	r3, #16
 80025d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025d8:	2302      	movs	r3, #2
 80025da:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80025dc:	2300      	movs	r3, #0
 80025de:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 80025e0:	2308      	movs	r3, #8
 80025e2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 80025e4:	23b4      	movs	r3, #180	; 0xb4
 80025e6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80025e8:	2302      	movs	r3, #2
 80025ea:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80025ec:	2302      	movs	r3, #2
 80025ee:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 80025f0:	2302      	movs	r3, #2
 80025f2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80025f4:	f107 031c 	add.w	r3, r7, #28
 80025f8:	4618      	mov	r0, r3
 80025fa:	f003 fb0d 	bl	8005c18 <HAL_RCC_OscConfig>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <SystemClock_Config+0x98>
		Error_Handler();
 8002604:	f000 fbc6 	bl	8002d94 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8002608:	f002 ff6c 	bl	80054e4 <HAL_PWREx_EnableOverDrive>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <SystemClock_Config+0xa6>
		Error_Handler();
 8002612:	f000 fbbf 	bl	8002d94 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002616:	230f      	movs	r3, #15
 8002618:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800261a:	2302      	movs	r3, #2
 800261c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800261e:	2300      	movs	r3, #0
 8002620:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002622:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002626:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 8002628:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800262c:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 800262e:	f107 0308 	add.w	r3, r7, #8
 8002632:	2105      	movs	r1, #5
 8002634:	4618      	mov	r0, r3
 8002636:	f002 ffa5 	bl	8005584 <HAL_RCC_ClockConfig>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <SystemClock_Config+0xd4>
		Error_Handler();
 8002640:	f000 fba8 	bl	8002d94 <Error_Handler>
	}
}
 8002644:	bf00      	nop
 8002646:	3750      	adds	r7, #80	; 0x50
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	40023800 	.word	0x40023800
 8002650:	40007000 	.word	0x40007000

08002654 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800265a:	463b      	mov	r3, r7
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]
 8002660:	605a      	str	r2, [r3, #4]
 8002662:	609a      	str	r2, [r3, #8]
 8002664:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8002666:	4b21      	ldr	r3, [pc, #132]	; (80026ec <MX_ADC1_Init+0x98>)
 8002668:	4a21      	ldr	r2, [pc, #132]	; (80026f0 <MX_ADC1_Init+0x9c>)
 800266a:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800266c:	4b1f      	ldr	r3, [pc, #124]	; (80026ec <MX_ADC1_Init+0x98>)
 800266e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002672:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002674:	4b1d      	ldr	r3, [pc, #116]	; (80026ec <MX_ADC1_Init+0x98>)
 8002676:	2200      	movs	r2, #0
 8002678:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 800267a:	4b1c      	ldr	r3, [pc, #112]	; (80026ec <MX_ADC1_Init+0x98>)
 800267c:	2200      	movs	r2, #0
 800267e:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8002680:	4b1a      	ldr	r3, [pc, #104]	; (80026ec <MX_ADC1_Init+0x98>)
 8002682:	2200      	movs	r2, #0
 8002684:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002686:	4b19      	ldr	r3, [pc, #100]	; (80026ec <MX_ADC1_Init+0x98>)
 8002688:	2200      	movs	r2, #0
 800268a:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800268e:	4b17      	ldr	r3, [pc, #92]	; (80026ec <MX_ADC1_Init+0x98>)
 8002690:	2200      	movs	r2, #0
 8002692:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002694:	4b15      	ldr	r3, [pc, #84]	; (80026ec <MX_ADC1_Init+0x98>)
 8002696:	4a17      	ldr	r2, [pc, #92]	; (80026f4 <MX_ADC1_Init+0xa0>)
 8002698:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800269a:	4b14      	ldr	r3, [pc, #80]	; (80026ec <MX_ADC1_Init+0x98>)
 800269c:	2200      	movs	r2, #0
 800269e:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 80026a0:	4b12      	ldr	r3, [pc, #72]	; (80026ec <MX_ADC1_Init+0x98>)
 80026a2:	2201      	movs	r2, #1
 80026a4:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80026a6:	4b11      	ldr	r3, [pc, #68]	; (80026ec <MX_ADC1_Init+0x98>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80026ae:	4b0f      	ldr	r3, [pc, #60]	; (80026ec <MX_ADC1_Init+0x98>)
 80026b0:	2201      	movs	r2, #1
 80026b2:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80026b4:	480d      	ldr	r0, [pc, #52]	; (80026ec <MX_ADC1_Init+0x98>)
 80026b6:	f001 fa1f 	bl	8003af8 <HAL_ADC_Init>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <MX_ADC1_Init+0x70>
		Error_Handler();
 80026c0:	f000 fb68 	bl	8002d94 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 80026c4:	2304      	movs	r3, #4
 80026c6:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80026c8:	2301      	movs	r3, #1
 80026ca:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80026cc:	2300      	movs	r3, #0
 80026ce:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80026d0:	463b      	mov	r3, r7
 80026d2:	4619      	mov	r1, r3
 80026d4:	4805      	ldr	r0, [pc, #20]	; (80026ec <MX_ADC1_Init+0x98>)
 80026d6:	f001 fc63 	bl	8003fa0 <HAL_ADC_ConfigChannel>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <MX_ADC1_Init+0x90>
		Error_Handler();
 80026e0:	f000 fb58 	bl	8002d94 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80026e4:	bf00      	nop
 80026e6:	3710      	adds	r7, #16
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	200002c8 	.word	0x200002c8
 80026f0:	40012000 	.word	0x40012000
 80026f4:	0f000001 	.word	0x0f000001

080026f8 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80026fc:	4b12      	ldr	r3, [pc, #72]	; (8002748 <MX_I2C1_Init+0x50>)
 80026fe:	4a13      	ldr	r2, [pc, #76]	; (800274c <MX_I2C1_Init+0x54>)
 8002700:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 8002702:	4b11      	ldr	r3, [pc, #68]	; (8002748 <MX_I2C1_Init+0x50>)
 8002704:	4a12      	ldr	r2, [pc, #72]	; (8002750 <MX_I2C1_Init+0x58>)
 8002706:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002708:	4b0f      	ldr	r3, [pc, #60]	; (8002748 <MX_I2C1_Init+0x50>)
 800270a:	2200      	movs	r2, #0
 800270c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800270e:	4b0e      	ldr	r3, [pc, #56]	; (8002748 <MX_I2C1_Init+0x50>)
 8002710:	2200      	movs	r2, #0
 8002712:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002714:	4b0c      	ldr	r3, [pc, #48]	; (8002748 <MX_I2C1_Init+0x50>)
 8002716:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800271a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800271c:	4b0a      	ldr	r3, [pc, #40]	; (8002748 <MX_I2C1_Init+0x50>)
 800271e:	2200      	movs	r2, #0
 8002720:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8002722:	4b09      	ldr	r3, [pc, #36]	; (8002748 <MX_I2C1_Init+0x50>)
 8002724:	2200      	movs	r2, #0
 8002726:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002728:	4b07      	ldr	r3, [pc, #28]	; (8002748 <MX_I2C1_Init+0x50>)
 800272a:	2200      	movs	r2, #0
 800272c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800272e:	4b06      	ldr	r3, [pc, #24]	; (8002748 <MX_I2C1_Init+0x50>)
 8002730:	2200      	movs	r2, #0
 8002732:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8002734:	4804      	ldr	r0, [pc, #16]	; (8002748 <MX_I2C1_Init+0x50>)
 8002736:	f002 f95b 	bl	80049f0 <HAL_I2C_Init>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8002740:	f000 fb28 	bl	8002d94 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */
	/* USER CODE END I2C1_Init 2 */

}
 8002744:	bf00      	nop
 8002746:	bd80      	pop	{r7, pc}
 8002748:	20000310 	.word	0x20000310
 800274c:	40005400 	.word	0x40005400
 8002750:	00061a80 	.word	0x00061a80

08002754 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8002754:	b580      	push	{r7, lr}
 8002756:	b096      	sub	sp, #88	; 0x58
 8002758:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800275a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800275e:	2200      	movs	r2, #0
 8002760:	601a      	str	r2, [r3, #0]
 8002762:	605a      	str	r2, [r3, #4]
 8002764:	609a      	str	r2, [r3, #8]
 8002766:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002768:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002772:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002776:	2200      	movs	r2, #0
 8002778:	601a      	str	r2, [r3, #0]
 800277a:	605a      	str	r2, [r3, #4]
 800277c:	609a      	str	r2, [r3, #8]
 800277e:	60da      	str	r2, [r3, #12]
 8002780:	611a      	str	r2, [r3, #16]
 8002782:	615a      	str	r2, [r3, #20]
 8002784:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8002786:	1d3b      	adds	r3, r7, #4
 8002788:	2220      	movs	r2, #32
 800278a:	2100      	movs	r1, #0
 800278c:	4618      	mov	r0, r3
 800278e:	f005 fe25 	bl	80083dc <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8002792:	4b45      	ldr	r3, [pc, #276]	; (80028a8 <MX_TIM1_Init+0x154>)
 8002794:	4a45      	ldr	r2, [pc, #276]	; (80028ac <MX_TIM1_Init+0x158>)
 8002796:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 900 - 1;
 8002798:	4b43      	ldr	r3, [pc, #268]	; (80028a8 <MX_TIM1_Init+0x154>)
 800279a:	f240 3283 	movw	r2, #899	; 0x383
 800279e:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027a0:	4b41      	ldr	r3, [pc, #260]	; (80028a8 <MX_TIM1_Init+0x154>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1000 - 1;
 80027a6:	4b40      	ldr	r3, [pc, #256]	; (80028a8 <MX_TIM1_Init+0x154>)
 80027a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80027ac:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027ae:	4b3e      	ldr	r3, [pc, #248]	; (80028a8 <MX_TIM1_Init+0x154>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80027b4:	4b3c      	ldr	r3, [pc, #240]	; (80028a8 <MX_TIM1_Init+0x154>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027ba:	4b3b      	ldr	r3, [pc, #236]	; (80028a8 <MX_TIM1_Init+0x154>)
 80027bc:	2200      	movs	r2, #0
 80027be:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80027c0:	4839      	ldr	r0, [pc, #228]	; (80028a8 <MX_TIM1_Init+0x154>)
 80027c2:	f003 fcc7 	bl	8006154 <HAL_TIM_Base_Init>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <MX_TIM1_Init+0x7c>
		Error_Handler();
 80027cc:	f000 fae2 	bl	8002d94 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027d4:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80027d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80027da:	4619      	mov	r1, r3
 80027dc:	4832      	ldr	r0, [pc, #200]	; (80028a8 <MX_TIM1_Init+0x154>)
 80027de:	f004 faed 	bl	8006dbc <HAL_TIM_ConfigClockSource>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <MX_TIM1_Init+0x98>
		Error_Handler();
 80027e8:	f000 fad4 	bl	8002d94 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 80027ec:	482e      	ldr	r0, [pc, #184]	; (80028a8 <MX_TIM1_Init+0x154>)
 80027ee:	f003 fd00 	bl	80061f2 <HAL_TIM_PWM_Init>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <MX_TIM1_Init+0xa8>
		Error_Handler();
 80027f8:	f000 facc 	bl	8002d94 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027fc:	2300      	movs	r3, #0
 80027fe:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002800:	2300      	movs	r3, #0
 8002802:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8002804:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002808:	4619      	mov	r1, r3
 800280a:	4827      	ldr	r0, [pc, #156]	; (80028a8 <MX_TIM1_Init+0x154>)
 800280c:	f005 f918 	bl	8007a40 <HAL_TIMEx_MasterConfigSynchronization>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <MX_TIM1_Init+0xc6>
			!= HAL_OK) {
		Error_Handler();
 8002816:	f000 fabd 	bl	8002d94 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800281a:	2360      	movs	r3, #96	; 0x60
 800281c:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 800281e:	2300      	movs	r3, #0
 8002820:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002822:	2300      	movs	r3, #0
 8002824:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002826:	2300      	movs	r3, #0
 8002828:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800282a:	2300      	movs	r3, #0
 800282c:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800282e:	2300      	movs	r3, #0
 8002830:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002832:	2300      	movs	r3, #0
 8002834:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8002836:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800283a:	2200      	movs	r2, #0
 800283c:	4619      	mov	r1, r3
 800283e:	481a      	ldr	r0, [pc, #104]	; (80028a8 <MX_TIM1_Init+0x154>)
 8002840:	f004 f9fa 	bl	8006c38 <HAL_TIM_PWM_ConfigChannel>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <MX_TIM1_Init+0xfa>
			!= HAL_OK) {
		Error_Handler();
 800284a:	f000 faa3 	bl	8002d94 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3)
 800284e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002852:	2208      	movs	r2, #8
 8002854:	4619      	mov	r1, r3
 8002856:	4814      	ldr	r0, [pc, #80]	; (80028a8 <MX_TIM1_Init+0x154>)
 8002858:	f004 f9ee 	bl	8006c38 <HAL_TIM_PWM_ConfigChannel>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <MX_TIM1_Init+0x112>
			!= HAL_OK) {
		Error_Handler();
 8002862:	f000 fa97 	bl	8002d94 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002866:	2300      	movs	r3, #0
 8002868:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800286a:	2300      	movs	r3, #0
 800286c:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800286e:	2300      	movs	r3, #0
 8002870:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8002872:	2300      	movs	r3, #0
 8002874:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002876:	2300      	movs	r3, #0
 8002878:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800287a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800287e:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002880:	2300      	movs	r3, #0
 8002882:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8002884:	1d3b      	adds	r3, r7, #4
 8002886:	4619      	mov	r1, r3
 8002888:	4807      	ldr	r0, [pc, #28]	; (80028a8 <MX_TIM1_Init+0x154>)
 800288a:	f005 f955 	bl	8007b38 <HAL_TIMEx_ConfigBreakDeadTime>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <MX_TIM1_Init+0x144>
			!= HAL_OK) {
		Error_Handler();
 8002894:	f000 fa7e 	bl	8002d94 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8002898:	4803      	ldr	r0, [pc, #12]	; (80028a8 <MX_TIM1_Init+0x154>)
 800289a:	f000 febb 	bl	8003614 <HAL_TIM_MspPostInit>

}
 800289e:	bf00      	nop
 80028a0:	3758      	adds	r7, #88	; 0x58
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	20000238 	.word	0x20000238
 80028ac:	40010000 	.word	0x40010000

080028b0 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b090      	sub	sp, #64	; 0x40
 80028b4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80028b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80028ba:	2200      	movs	r2, #0
 80028bc:	601a      	str	r2, [r3, #0]
 80028be:	605a      	str	r2, [r3, #4]
 80028c0:	609a      	str	r2, [r3, #8]
 80028c2:	60da      	str	r2, [r3, #12]
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 80028c4:	f107 031c 	add.w	r3, r7, #28
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	605a      	str	r2, [r3, #4]
 80028ce:	609a      	str	r2, [r3, #8]
 80028d0:	60da      	str	r2, [r3, #12]
 80028d2:	611a      	str	r2, [r3, #16]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 80028d4:	f107 030c 	add.w	r3, r7, #12
 80028d8:	2200      	movs	r2, #0
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	605a      	str	r2, [r3, #4]
 80028de:	609a      	str	r2, [r3, #8]
 80028e0:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80028e2:	1d3b      	adds	r3, r7, #4
 80028e4:	2200      	movs	r2, #0
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80028ea:	4b3e      	ldr	r3, [pc, #248]	; (80029e4 <MX_TIM2_Init+0x134>)
 80028ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80028f0:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 80028f2:	4b3c      	ldr	r3, [pc, #240]	; (80029e4 <MX_TIM2_Init+0x134>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028f8:	4b3a      	ldr	r3, [pc, #232]	; (80029e4 <MX_TIM2_Init+0x134>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 80028fe:	4b39      	ldr	r3, [pc, #228]	; (80029e4 <MX_TIM2_Init+0x134>)
 8002900:	f04f 32ff 	mov.w	r2, #4294967295
 8002904:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002906:	4b37      	ldr	r3, [pc, #220]	; (80029e4 <MX_TIM2_Init+0x134>)
 8002908:	2200      	movs	r2, #0
 800290a:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800290c:	4b35      	ldr	r3, [pc, #212]	; (80029e4 <MX_TIM2_Init+0x134>)
 800290e:	2200      	movs	r2, #0
 8002910:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8002912:	4834      	ldr	r0, [pc, #208]	; (80029e4 <MX_TIM2_Init+0x134>)
 8002914:	f003 fc1e 	bl	8006154 <HAL_TIM_Base_Init>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <MX_TIM2_Init+0x72>
		Error_Handler();
 800291e:	f000 fa39 	bl	8002d94 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002922:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002926:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8002928:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800292c:	4619      	mov	r1, r3
 800292e:	482d      	ldr	r0, [pc, #180]	; (80029e4 <MX_TIM2_Init+0x134>)
 8002930:	f004 fa44 	bl	8006dbc <HAL_TIM_ConfigClockSource>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <MX_TIM2_Init+0x8e>
		Error_Handler();
 800293a:	f000 fa2b 	bl	8002d94 <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 800293e:	4829      	ldr	r0, [pc, #164]	; (80029e4 <MX_TIM2_Init+0x134>)
 8002940:	f003 fd78 	bl	8006434 <HAL_TIM_IC_Init>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <MX_TIM2_Init+0x9e>
		Error_Handler();
 800294a:	f000 fa23 	bl	8002d94 <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800294e:	2304      	movs	r3, #4
 8002950:	61fb      	str	r3, [r7, #28]
	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002952:	2350      	movs	r3, #80	; 0x50
 8002954:	623b      	str	r3, [r7, #32]
	sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002956:	2300      	movs	r3, #0
 8002958:	627b      	str	r3, [r7, #36]	; 0x24
	sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800295a:	2300      	movs	r3, #0
 800295c:	62bb      	str	r3, [r7, #40]	; 0x28
	sSlaveConfig.TriggerFilter = 0;
 800295e:	2300      	movs	r3, #0
 8002960:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK) {
 8002962:	f107 031c 	add.w	r3, r7, #28
 8002966:	4619      	mov	r1, r3
 8002968:	481e      	ldr	r0, [pc, #120]	; (80029e4 <MX_TIM2_Init+0x134>)
 800296a:	f004 faee 	bl	8006f4a <HAL_TIM_SlaveConfigSynchro>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d001      	beq.n	8002978 <MX_TIM2_Init+0xc8>
		Error_Handler();
 8002974:	f000 fa0e 	bl	8002d94 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002978:	2300      	movs	r3, #0
 800297a:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800297c:	2301      	movs	r3, #1
 800297e:	613b      	str	r3, [r7, #16]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002980:	2300      	movs	r3, #0
 8002982:	617b      	str	r3, [r7, #20]
	sConfigIC.ICFilter = 0;
 8002984:	2300      	movs	r3, #0
 8002986:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8002988:	f107 030c 	add.w	r3, r7, #12
 800298c:	2200      	movs	r2, #0
 800298e:	4619      	mov	r1, r3
 8002990:	4814      	ldr	r0, [pc, #80]	; (80029e4 <MX_TIM2_Init+0x134>)
 8002992:	f004 f8b5 	bl	8006b00 <HAL_TIM_IC_ConfigChannel>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <MX_TIM2_Init+0xf0>
		Error_Handler();
 800299c:	f000 f9fa 	bl	8002d94 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80029a0:	2302      	movs	r3, #2
 80029a2:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80029a4:	2302      	movs	r3, #2
 80029a6:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 80029a8:	f107 030c 	add.w	r3, r7, #12
 80029ac:	2204      	movs	r2, #4
 80029ae:	4619      	mov	r1, r3
 80029b0:	480c      	ldr	r0, [pc, #48]	; (80029e4 <MX_TIM2_Init+0x134>)
 80029b2:	f004 f8a5 	bl	8006b00 <HAL_TIM_IC_ConfigChannel>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <MX_TIM2_Init+0x110>
		Error_Handler();
 80029bc:	f000 f9ea 	bl	8002d94 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029c0:	2300      	movs	r3, #0
 80029c2:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029c4:	2300      	movs	r3, #0
 80029c6:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80029c8:	1d3b      	adds	r3, r7, #4
 80029ca:	4619      	mov	r1, r3
 80029cc:	4805      	ldr	r0, [pc, #20]	; (80029e4 <MX_TIM2_Init+0x134>)
 80029ce:	f005 f837 	bl	8007a40 <HAL_TIMEx_MasterConfigSynchronization>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d001      	beq.n	80029dc <MX_TIM2_Init+0x12c>
			!= HAL_OK) {
		Error_Handler();
 80029d8:	f000 f9dc 	bl	8002d94 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80029dc:	bf00      	nop
 80029de:	3740      	adds	r7, #64	; 0x40
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	20000364 	.word	0x20000364

080029e8 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80029ee:	f107 0308 	add.w	r3, r7, #8
 80029f2:	2200      	movs	r2, #0
 80029f4:	601a      	str	r2, [r3, #0]
 80029f6:	605a      	str	r2, [r3, #4]
 80029f8:	609a      	str	r2, [r3, #8]
 80029fa:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80029fc:	463b      	mov	r3, r7
 80029fe:	2200      	movs	r2, #0
 8002a00:	601a      	str	r2, [r3, #0]
 8002a02:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8002a04:	4b1d      	ldr	r3, [pc, #116]	; (8002a7c <MX_TIM3_Init+0x94>)
 8002a06:	4a1e      	ldr	r2, [pc, #120]	; (8002a80 <MX_TIM3_Init+0x98>)
 8002a08:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8002a0a:	4b1c      	ldr	r3, [pc, #112]	; (8002a7c <MX_TIM3_Init+0x94>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a10:	4b1a      	ldr	r3, [pc, #104]	; (8002a7c <MX_TIM3_Init+0x94>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8002a16:	4b19      	ldr	r3, [pc, #100]	; (8002a7c <MX_TIM3_Init+0x94>)
 8002a18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a1c:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a1e:	4b17      	ldr	r3, [pc, #92]	; (8002a7c <MX_TIM3_Init+0x94>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a24:	4b15      	ldr	r3, [pc, #84]	; (8002a7c <MX_TIM3_Init+0x94>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8002a2a:	4814      	ldr	r0, [pc, #80]	; (8002a7c <MX_TIM3_Init+0x94>)
 8002a2c:	f003 fb92 	bl	8006154 <HAL_TIM_Base_Init>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <MX_TIM3_Init+0x52>
		Error_Handler();
 8002a36:	f000 f9ad 	bl	8002d94 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a3e:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8002a40:	f107 0308 	add.w	r3, r7, #8
 8002a44:	4619      	mov	r1, r3
 8002a46:	480d      	ldr	r0, [pc, #52]	; (8002a7c <MX_TIM3_Init+0x94>)
 8002a48:	f004 f9b8 	bl	8006dbc <HAL_TIM_ConfigClockSource>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <MX_TIM3_Init+0x6e>
		Error_Handler();
 8002a52:	f000 f99f 	bl	8002d94 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a56:	2300      	movs	r3, #0
 8002a58:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8002a5e:	463b      	mov	r3, r7
 8002a60:	4619      	mov	r1, r3
 8002a62:	4806      	ldr	r0, [pc, #24]	; (8002a7c <MX_TIM3_Init+0x94>)
 8002a64:	f004 ffec 	bl	8007a40 <HAL_TIMEx_MasterConfigSynchronization>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <MX_TIM3_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8002a6e:	f000 f991 	bl	8002d94 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8002a72:	bf00      	nop
 8002a74:	3718      	adds	r7, #24
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	20000280 	.word	0x20000280
 8002a80:	40000400 	.word	0x40000400

08002a84 <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b090      	sub	sp, #64	; 0x40
 8002a88:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002a8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a8e:	2200      	movs	r2, #0
 8002a90:	601a      	str	r2, [r3, #0]
 8002a92:	605a      	str	r2, [r3, #4]
 8002a94:	609a      	str	r2, [r3, #8]
 8002a96:	60da      	str	r2, [r3, #12]
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8002a98:	f107 031c 	add.w	r3, r7, #28
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	605a      	str	r2, [r3, #4]
 8002aa2:	609a      	str	r2, [r3, #8]
 8002aa4:	60da      	str	r2, [r3, #12]
 8002aa6:	611a      	str	r2, [r3, #16]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8002aa8:	f107 030c 	add.w	r3, r7, #12
 8002aac:	2200      	movs	r2, #0
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	605a      	str	r2, [r3, #4]
 8002ab2:	609a      	str	r2, [r3, #8]
 8002ab4:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002ab6:	1d3b      	adds	r3, r7, #4
 8002ab8:	2200      	movs	r2, #0
 8002aba:	601a      	str	r2, [r3, #0]
 8002abc:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8002abe:	4b3e      	ldr	r3, [pc, #248]	; (8002bb8 <MX_TIM5_Init+0x134>)
 8002ac0:	4a3e      	ldr	r2, [pc, #248]	; (8002bbc <MX_TIM5_Init+0x138>)
 8002ac2:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 8002ac4:	4b3c      	ldr	r3, [pc, #240]	; (8002bb8 <MX_TIM5_Init+0x134>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aca:	4b3b      	ldr	r3, [pc, #236]	; (8002bb8 <MX_TIM5_Init+0x134>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 8002ad0:	4b39      	ldr	r3, [pc, #228]	; (8002bb8 <MX_TIM5_Init+0x134>)
 8002ad2:	f04f 32ff 	mov.w	r2, #4294967295
 8002ad6:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ad8:	4b37      	ldr	r3, [pc, #220]	; (8002bb8 <MX_TIM5_Init+0x134>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ade:	4b36      	ldr	r3, [pc, #216]	; (8002bb8 <MX_TIM5_Init+0x134>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 8002ae4:	4834      	ldr	r0, [pc, #208]	; (8002bb8 <MX_TIM5_Init+0x134>)
 8002ae6:	f003 fb35 	bl	8006154 <HAL_TIM_Base_Init>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <MX_TIM5_Init+0x70>
		Error_Handler();
 8002af0:	f000 f950 	bl	8002d94 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002af4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002af8:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 8002afa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002afe:	4619      	mov	r1, r3
 8002b00:	482d      	ldr	r0, [pc, #180]	; (8002bb8 <MX_TIM5_Init+0x134>)
 8002b02:	f004 f95b 	bl	8006dbc <HAL_TIM_ConfigClockSource>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <MX_TIM5_Init+0x8c>
		Error_Handler();
 8002b0c:	f000 f942 	bl	8002d94 <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim5) != HAL_OK) {
 8002b10:	4829      	ldr	r0, [pc, #164]	; (8002bb8 <MX_TIM5_Init+0x134>)
 8002b12:	f003 fc8f 	bl	8006434 <HAL_TIM_IC_Init>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d001      	beq.n	8002b20 <MX_TIM5_Init+0x9c>
		Error_Handler();
 8002b1c:	f000 f93a 	bl	8002d94 <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002b20:	2304      	movs	r3, #4
 8002b22:	61fb      	str	r3, [r7, #28]
	sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8002b24:	2360      	movs	r3, #96	; 0x60
 8002b26:	623b      	str	r3, [r7, #32]
	sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002b28:	2302      	movs	r3, #2
 8002b2a:	627b      	str	r3, [r7, #36]	; 0x24
	sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	62bb      	str	r3, [r7, #40]	; 0x28
	sSlaveConfig.TriggerFilter = 0;
 8002b30:	2300      	movs	r3, #0
 8002b32:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK) {
 8002b34:	f107 031c 	add.w	r3, r7, #28
 8002b38:	4619      	mov	r1, r3
 8002b3a:	481f      	ldr	r0, [pc, #124]	; (8002bb8 <MX_TIM5_Init+0x134>)
 8002b3c:	f004 fa05 	bl	8006f4a <HAL_TIM_SlaveConfigSynchro>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <MX_TIM5_Init+0xc6>
		Error_Handler();
 8002b46:	f000 f925 	bl	8002d94 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002b4e:	2302      	movs	r3, #2
 8002b50:	613b      	str	r3, [r7, #16]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002b52:	2300      	movs	r3, #0
 8002b54:	617b      	str	r3, [r7, #20]
	sConfigIC.ICFilter = 0;
 8002b56:	2300      	movs	r3, #0
 8002b58:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8002b5a:	f107 030c 	add.w	r3, r7, #12
 8002b5e:	2200      	movs	r2, #0
 8002b60:	4619      	mov	r1, r3
 8002b62:	4815      	ldr	r0, [pc, #84]	; (8002bb8 <MX_TIM5_Init+0x134>)
 8002b64:	f003 ffcc 	bl	8006b00 <HAL_TIM_IC_ConfigChannel>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <MX_TIM5_Init+0xee>
		Error_Handler();
 8002b6e:	f000 f911 	bl	8002d94 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002b72:	2302      	movs	r3, #2
 8002b74:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002b76:	2301      	movs	r3, #1
 8002b78:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 8002b7a:	f107 030c 	add.w	r3, r7, #12
 8002b7e:	2204      	movs	r2, #4
 8002b80:	4619      	mov	r1, r3
 8002b82:	480d      	ldr	r0, [pc, #52]	; (8002bb8 <MX_TIM5_Init+0x134>)
 8002b84:	f003 ffbc 	bl	8006b00 <HAL_TIM_IC_ConfigChannel>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <MX_TIM5_Init+0x10e>
		Error_Handler();
 8002b8e:	f000 f901 	bl	8002d94 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b92:	2300      	movs	r3, #0
 8002b94:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b96:	2300      	movs	r3, #0
 8002b98:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8002b9a:	1d3b      	adds	r3, r7, #4
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	4806      	ldr	r0, [pc, #24]	; (8002bb8 <MX_TIM5_Init+0x134>)
 8002ba0:	f004 ff4e 	bl	8007a40 <HAL_TIMEx_MasterConfigSynchronization>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <MX_TIM5_Init+0x12a>
			!= HAL_OK) {
		Error_Handler();
 8002baa:	f000 f8f3 	bl	8002d94 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 8002bae:	bf00      	nop
 8002bb0:	3740      	adds	r7, #64	; 0x40
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	200003ac 	.word	0x200003ac
 8002bbc:	40000c00 	.word	0x40000c00

08002bc0 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8002bc4:	4b11      	ldr	r3, [pc, #68]	; (8002c0c <MX_USART2_UART_Init+0x4c>)
 8002bc6:	4a12      	ldr	r2, [pc, #72]	; (8002c10 <MX_USART2_UART_Init+0x50>)
 8002bc8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8002bca:	4b10      	ldr	r3, [pc, #64]	; (8002c0c <MX_USART2_UART_Init+0x4c>)
 8002bcc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002bd0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002bd2:	4b0e      	ldr	r3, [pc, #56]	; (8002c0c <MX_USART2_UART_Init+0x4c>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002bd8:	4b0c      	ldr	r3, [pc, #48]	; (8002c0c <MX_USART2_UART_Init+0x4c>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002bde:	4b0b      	ldr	r3, [pc, #44]	; (8002c0c <MX_USART2_UART_Init+0x4c>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002be4:	4b09      	ldr	r3, [pc, #36]	; (8002c0c <MX_USART2_UART_Init+0x4c>)
 8002be6:	220c      	movs	r2, #12
 8002be8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bea:	4b08      	ldr	r3, [pc, #32]	; (8002c0c <MX_USART2_UART_Init+0x4c>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bf0:	4b06      	ldr	r3, [pc, #24]	; (8002c0c <MX_USART2_UART_Init+0x4c>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8002bf6:	4805      	ldr	r0, [pc, #20]	; (8002c0c <MX_USART2_UART_Init+0x4c>)
 8002bf8:	f005 f804 	bl	8007c04 <HAL_UART_Init>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8002c02:	f000 f8c7 	bl	8002d94 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8002c06:	bf00      	nop
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	200003f4 	.word	0x200003f4
 8002c10:	40004400 	.word	0x40004400

08002c14 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b08a      	sub	sp, #40	; 0x28
 8002c18:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002c1a:	f107 0314 	add.w	r3, r7, #20
 8002c1e:	2200      	movs	r2, #0
 8002c20:	601a      	str	r2, [r3, #0]
 8002c22:	605a      	str	r2, [r3, #4]
 8002c24:	609a      	str	r2, [r3, #8]
 8002c26:	60da      	str	r2, [r3, #12]
 8002c28:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	613b      	str	r3, [r7, #16]
 8002c2e:	4b55      	ldr	r3, [pc, #340]	; (8002d84 <MX_GPIO_Init+0x170>)
 8002c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c32:	4a54      	ldr	r2, [pc, #336]	; (8002d84 <MX_GPIO_Init+0x170>)
 8002c34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c38:	6313      	str	r3, [r2, #48]	; 0x30
 8002c3a:	4b52      	ldr	r3, [pc, #328]	; (8002d84 <MX_GPIO_Init+0x170>)
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c42:	613b      	str	r3, [r7, #16]
 8002c44:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002c46:	2300      	movs	r3, #0
 8002c48:	60fb      	str	r3, [r7, #12]
 8002c4a:	4b4e      	ldr	r3, [pc, #312]	; (8002d84 <MX_GPIO_Init+0x170>)
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4e:	4a4d      	ldr	r2, [pc, #308]	; (8002d84 <MX_GPIO_Init+0x170>)
 8002c50:	f043 0304 	orr.w	r3, r3, #4
 8002c54:	6313      	str	r3, [r2, #48]	; 0x30
 8002c56:	4b4b      	ldr	r3, [pc, #300]	; (8002d84 <MX_GPIO_Init+0x170>)
 8002c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5a:	f003 0304 	and.w	r3, r3, #4
 8002c5e:	60fb      	str	r3, [r7, #12]
 8002c60:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002c62:	2300      	movs	r3, #0
 8002c64:	60bb      	str	r3, [r7, #8]
 8002c66:	4b47      	ldr	r3, [pc, #284]	; (8002d84 <MX_GPIO_Init+0x170>)
 8002c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6a:	4a46      	ldr	r2, [pc, #280]	; (8002d84 <MX_GPIO_Init+0x170>)
 8002c6c:	f043 0301 	orr.w	r3, r3, #1
 8002c70:	6313      	str	r3, [r2, #48]	; 0x30
 8002c72:	4b44      	ldr	r3, [pc, #272]	; (8002d84 <MX_GPIO_Init+0x170>)
 8002c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	60bb      	str	r3, [r7, #8]
 8002c7c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002c7e:	2300      	movs	r3, #0
 8002c80:	607b      	str	r3, [r7, #4]
 8002c82:	4b40      	ldr	r3, [pc, #256]	; (8002d84 <MX_GPIO_Init+0x170>)
 8002c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c86:	4a3f      	ldr	r2, [pc, #252]	; (8002d84 <MX_GPIO_Init+0x170>)
 8002c88:	f043 0302 	orr.w	r3, r3, #2
 8002c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c8e:	4b3d      	ldr	r3, [pc, #244]	; (8002d84 <MX_GPIO_Init+0x170>)
 8002c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	607b      	str	r3, [r7, #4]
 8002c98:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	2120      	movs	r1, #32
 8002c9e:	483a      	ldr	r0, [pc, #232]	; (8002d88 <MX_GPIO_Init+0x174>)
 8002ca0:	f001 fe74 	bl	800498c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : SLFL_Pin SLFR_Pin */
	GPIO_InitStruct.Pin = SLFL_Pin | SLFR_Pin;
 8002ca4:	f640 0302 	movw	r3, #2050	; 0x802
 8002ca8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002caa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002cae:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cb4:	f107 0314 	add.w	r3, r7, #20
 8002cb8:	4619      	mov	r1, r3
 8002cba:	4834      	ldr	r0, [pc, #208]	; (8002d8c <MX_GPIO_Init+0x178>)
 8002cbc:	f001 fcba 	bl	8004634 <HAL_GPIO_Init>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 8002cc0:	2320      	movs	r3, #32
 8002cc2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002cd0:	f107 0314 	add.w	r3, r7, #20
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	482c      	ldr	r0, [pc, #176]	; (8002d88 <MX_GPIO_Init+0x174>)
 8002cd8:	f001 fcac 	bl	8004634 <HAL_GPIO_Init>

	/*Configure GPIO pin : IR_Pin */
	GPIO_InitStruct.Pin = IR_Pin;
 8002cdc:	2340      	movs	r3, #64	; 0x40
 8002cde:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(IR_GPIO_Port, &GPIO_InitStruct);
 8002ce8:	f107 0314 	add.w	r3, r7, #20
 8002cec:	4619      	mov	r1, r3
 8002cee:	4826      	ldr	r0, [pc, #152]	; (8002d88 <MX_GPIO_Init+0x174>)
 8002cf0:	f001 fca0 	bl	8004634 <HAL_GPIO_Init>

	/*Configure GPIO pins : SDR_Pin SD2R_Pin */
	GPIO_InitStruct.Pin = SDR_Pin | SD2R_Pin;
 8002cf4:	f44f 7320 	mov.w	r3, #640	; 0x280
 8002cf8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d02:	f107 0314 	add.w	r3, r7, #20
 8002d06:	4619      	mov	r1, r3
 8002d08:	481f      	ldr	r0, [pc, #124]	; (8002d88 <MX_GPIO_Init+0x174>)
 8002d0a:	f001 fc93 	bl	8004634 <HAL_GPIO_Init>

	/*Configure GPIO pins : SF_Pin SFR_Pin */
	GPIO_InitStruct.Pin = SF_Pin | SFR_Pin;
 8002d0e:	23a0      	movs	r3, #160	; 0xa0
 8002d10:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d12:	2300      	movs	r3, #0
 8002d14:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d16:	2301      	movs	r3, #1
 8002d18:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d1a:	f107 0314 	add.w	r3, r7, #20
 8002d1e:	4619      	mov	r1, r3
 8002d20:	481a      	ldr	r0, [pc, #104]	; (8002d8c <MX_GPIO_Init+0x178>)
 8002d22:	f001 fc87 	bl	8004634 <HAL_GPIO_Init>

	/*Configure GPIO pins : SLL_Pin SD2L_Pin SLR_Pin SFL_Pin
	 SDL_Pin SFS_Pin */
	GPIO_InitStruct.Pin = SLL_Pin | SD2L_Pin | SLR_Pin | SFL_Pin | SDL_Pin
 8002d26:	f240 43f1 	movw	r3, #1265	; 0x4f1
 8002d2a:	617b      	str	r3, [r7, #20]
			| SFS_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d30:	2301      	movs	r3, #1
 8002d32:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d34:	f107 0314 	add.w	r3, r7, #20
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4815      	ldr	r0, [pc, #84]	; (8002d90 <MX_GPIO_Init+0x17c>)
 8002d3c:	f001 fc7a 	bl	8004634 <HAL_GPIO_Init>

	/*Configure GPIO pin : AUTO_Pin */
	GPIO_InitStruct.Pin = AUTO_Pin;
 8002d40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d44:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d46:	2300      	movs	r3, #0
 8002d48:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(AUTO_GPIO_Port, &GPIO_InitStruct);
 8002d4e:	f107 0314 	add.w	r3, r7, #20
 8002d52:	4619      	mov	r1, r3
 8002d54:	480d      	ldr	r0, [pc, #52]	; (8002d8c <MX_GPIO_Init+0x178>)
 8002d56:	f001 fc6d 	bl	8004634 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	2100      	movs	r1, #0
 8002d5e:	2007      	movs	r0, #7
 8002d60:	f001 fc31 	bl	80045c6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002d64:	2007      	movs	r0, #7
 8002d66:	f001 fc4a 	bl	80045fe <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	2100      	movs	r1, #0
 8002d6e:	2028      	movs	r0, #40	; 0x28
 8002d70:	f001 fc29 	bl	80045c6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002d74:	2028      	movs	r0, #40	; 0x28
 8002d76:	f001 fc42 	bl	80045fe <HAL_NVIC_EnableIRQ>

}
 8002d7a:	bf00      	nop
 8002d7c:	3728      	adds	r7, #40	; 0x28
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	40023800 	.word	0x40023800
 8002d88:	40020000 	.word	0x40020000
 8002d8c:	40020800 	.word	0x40020800
 8002d90:	40020400 	.word	0x40020400

08002d94 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d98:	b672      	cpsid	i
}
 8002d9a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002d9c:	e7fe      	b.n	8002d9c <Error_Handler+0x8>
	...

08002da0 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8002da6:	f000 fa29 	bl	80031fc <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8002daa:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002dae:	2201      	movs	r2, #1
 8002db0:	2178      	movs	r1, #120	; 0x78
 8002db2:	485b      	ldr	r0, [pc, #364]	; (8002f20 <SSD1306_Init+0x180>)
 8002db4:	f002 f85e 	bl	8004e74 <HAL_I2C_IsDeviceReady>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	e0a9      	b.n	8002f16 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8002dc2:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8002dc6:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002dc8:	e002      	b.n	8002dd0 <SSD1306_Init+0x30>
		p--;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1f9      	bne.n	8002dca <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8002dd6:	22ae      	movs	r2, #174	; 0xae
 8002dd8:	2100      	movs	r1, #0
 8002dda:	2078      	movs	r0, #120	; 0x78
 8002ddc:	f000 fa8a 	bl	80032f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8002de0:	2220      	movs	r2, #32
 8002de2:	2100      	movs	r1, #0
 8002de4:	2078      	movs	r0, #120	; 0x78
 8002de6:	f000 fa85 	bl	80032f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8002dea:	2210      	movs	r2, #16
 8002dec:	2100      	movs	r1, #0
 8002dee:	2078      	movs	r0, #120	; 0x78
 8002df0:	f000 fa80 	bl	80032f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002df4:	22b0      	movs	r2, #176	; 0xb0
 8002df6:	2100      	movs	r1, #0
 8002df8:	2078      	movs	r0, #120	; 0x78
 8002dfa:	f000 fa7b 	bl	80032f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8002dfe:	22c8      	movs	r2, #200	; 0xc8
 8002e00:	2100      	movs	r1, #0
 8002e02:	2078      	movs	r0, #120	; 0x78
 8002e04:	f000 fa76 	bl	80032f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002e08:	2200      	movs	r2, #0
 8002e0a:	2100      	movs	r1, #0
 8002e0c:	2078      	movs	r0, #120	; 0x78
 8002e0e:	f000 fa71 	bl	80032f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8002e12:	2210      	movs	r2, #16
 8002e14:	2100      	movs	r1, #0
 8002e16:	2078      	movs	r0, #120	; 0x78
 8002e18:	f000 fa6c 	bl	80032f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002e1c:	2240      	movs	r2, #64	; 0x40
 8002e1e:	2100      	movs	r1, #0
 8002e20:	2078      	movs	r0, #120	; 0x78
 8002e22:	f000 fa67 	bl	80032f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8002e26:	2281      	movs	r2, #129	; 0x81
 8002e28:	2100      	movs	r1, #0
 8002e2a:	2078      	movs	r0, #120	; 0x78
 8002e2c:	f000 fa62 	bl	80032f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002e30:	22ff      	movs	r2, #255	; 0xff
 8002e32:	2100      	movs	r1, #0
 8002e34:	2078      	movs	r0, #120	; 0x78
 8002e36:	f000 fa5d 	bl	80032f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8002e3a:	22a1      	movs	r2, #161	; 0xa1
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	2078      	movs	r0, #120	; 0x78
 8002e40:	f000 fa58 	bl	80032f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8002e44:	22a6      	movs	r2, #166	; 0xa6
 8002e46:	2100      	movs	r1, #0
 8002e48:	2078      	movs	r0, #120	; 0x78
 8002e4a:	f000 fa53 	bl	80032f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8002e4e:	22a8      	movs	r2, #168	; 0xa8
 8002e50:	2100      	movs	r1, #0
 8002e52:	2078      	movs	r0, #120	; 0x78
 8002e54:	f000 fa4e 	bl	80032f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8002e58:	223f      	movs	r2, #63	; 0x3f
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	2078      	movs	r0, #120	; 0x78
 8002e5e:	f000 fa49 	bl	80032f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002e62:	22a4      	movs	r2, #164	; 0xa4
 8002e64:	2100      	movs	r1, #0
 8002e66:	2078      	movs	r0, #120	; 0x78
 8002e68:	f000 fa44 	bl	80032f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002e6c:	22d3      	movs	r2, #211	; 0xd3
 8002e6e:	2100      	movs	r1, #0
 8002e70:	2078      	movs	r0, #120	; 0x78
 8002e72:	f000 fa3f 	bl	80032f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8002e76:	2200      	movs	r2, #0
 8002e78:	2100      	movs	r1, #0
 8002e7a:	2078      	movs	r0, #120	; 0x78
 8002e7c:	f000 fa3a 	bl	80032f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002e80:	22d5      	movs	r2, #213	; 0xd5
 8002e82:	2100      	movs	r1, #0
 8002e84:	2078      	movs	r0, #120	; 0x78
 8002e86:	f000 fa35 	bl	80032f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8002e8a:	22f0      	movs	r2, #240	; 0xf0
 8002e8c:	2100      	movs	r1, #0
 8002e8e:	2078      	movs	r0, #120	; 0x78
 8002e90:	f000 fa30 	bl	80032f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002e94:	22d9      	movs	r2, #217	; 0xd9
 8002e96:	2100      	movs	r1, #0
 8002e98:	2078      	movs	r0, #120	; 0x78
 8002e9a:	f000 fa2b 	bl	80032f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8002e9e:	2222      	movs	r2, #34	; 0x22
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	2078      	movs	r0, #120	; 0x78
 8002ea4:	f000 fa26 	bl	80032f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8002ea8:	22da      	movs	r2, #218	; 0xda
 8002eaa:	2100      	movs	r1, #0
 8002eac:	2078      	movs	r0, #120	; 0x78
 8002eae:	f000 fa21 	bl	80032f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8002eb2:	2212      	movs	r2, #18
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	2078      	movs	r0, #120	; 0x78
 8002eb8:	f000 fa1c 	bl	80032f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002ebc:	22db      	movs	r2, #219	; 0xdb
 8002ebe:	2100      	movs	r1, #0
 8002ec0:	2078      	movs	r0, #120	; 0x78
 8002ec2:	f000 fa17 	bl	80032f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8002ec6:	2220      	movs	r2, #32
 8002ec8:	2100      	movs	r1, #0
 8002eca:	2078      	movs	r0, #120	; 0x78
 8002ecc:	f000 fa12 	bl	80032f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002ed0:	228d      	movs	r2, #141	; 0x8d
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	2078      	movs	r0, #120	; 0x78
 8002ed6:	f000 fa0d 	bl	80032f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8002eda:	2214      	movs	r2, #20
 8002edc:	2100      	movs	r1, #0
 8002ede:	2078      	movs	r0, #120	; 0x78
 8002ee0:	f000 fa08 	bl	80032f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002ee4:	22af      	movs	r2, #175	; 0xaf
 8002ee6:	2100      	movs	r1, #0
 8002ee8:	2078      	movs	r0, #120	; 0x78
 8002eea:	f000 fa03 	bl	80032f4 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8002eee:	222e      	movs	r2, #46	; 0x2e
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	2078      	movs	r0, #120	; 0x78
 8002ef4:	f000 f9fe 	bl	80032f4 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002ef8:	2000      	movs	r0, #0
 8002efa:	f000 f843 	bl	8002f84 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8002efe:	f000 f813 	bl	8002f28 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8002f02:	4b08      	ldr	r3, [pc, #32]	; (8002f24 <SSD1306_Init+0x184>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002f08:	4b06      	ldr	r3, [pc, #24]	; (8002f24 <SSD1306_Init+0x184>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8002f0e:	4b05      	ldr	r3, [pc, #20]	; (8002f24 <SSD1306_Init+0x184>)
 8002f10:	2201      	movs	r2, #1
 8002f12:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8002f14:	2301      	movs	r3, #1
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3708      	adds	r7, #8
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	20000310 	.word	0x20000310
 8002f24:	20000838 	.word	0x20000838

08002f28 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8002f2e:	2300      	movs	r3, #0
 8002f30:	71fb      	strb	r3, [r7, #7]
 8002f32:	e01d      	b.n	8002f70 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8002f34:	79fb      	ldrb	r3, [r7, #7]
 8002f36:	3b50      	subs	r3, #80	; 0x50
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	2078      	movs	r0, #120	; 0x78
 8002f40:	f000 f9d8 	bl	80032f4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002f44:	2200      	movs	r2, #0
 8002f46:	2100      	movs	r1, #0
 8002f48:	2078      	movs	r0, #120	; 0x78
 8002f4a:	f000 f9d3 	bl	80032f4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8002f4e:	2210      	movs	r2, #16
 8002f50:	2100      	movs	r1, #0
 8002f52:	2078      	movs	r0, #120	; 0x78
 8002f54:	f000 f9ce 	bl	80032f4 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002f58:	79fb      	ldrb	r3, [r7, #7]
 8002f5a:	01db      	lsls	r3, r3, #7
 8002f5c:	4a08      	ldr	r2, [pc, #32]	; (8002f80 <SSD1306_UpdateScreen+0x58>)
 8002f5e:	441a      	add	r2, r3
 8002f60:	2380      	movs	r3, #128	; 0x80
 8002f62:	2140      	movs	r1, #64	; 0x40
 8002f64:	2078      	movs	r0, #120	; 0x78
 8002f66:	f000 f95f 	bl	8003228 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8002f6a:	79fb      	ldrb	r3, [r7, #7]
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	71fb      	strb	r3, [r7, #7]
 8002f70:	79fb      	ldrb	r3, [r7, #7]
 8002f72:	2b07      	cmp	r3, #7
 8002f74:	d9de      	bls.n	8002f34 <SSD1306_UpdateScreen+0xc>
	}
}
 8002f76:	bf00      	nop
 8002f78:	bf00      	nop
 8002f7a:	3708      	adds	r7, #8
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	20000438 	.word	0x20000438

08002f84 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002f8e:	79fb      	ldrb	r3, [r7, #7]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d101      	bne.n	8002f98 <SSD1306_Fill+0x14>
 8002f94:	2300      	movs	r3, #0
 8002f96:	e000      	b.n	8002f9a <SSD1306_Fill+0x16>
 8002f98:	23ff      	movs	r3, #255	; 0xff
 8002f9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	4803      	ldr	r0, [pc, #12]	; (8002fb0 <SSD1306_Fill+0x2c>)
 8002fa2:	f005 fa1b 	bl	80083dc <memset>
}
 8002fa6:	bf00      	nop
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	20000438 	.word	0x20000438

08002fb4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	4603      	mov	r3, r0
 8002fbc:	80fb      	strh	r3, [r7, #6]
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	80bb      	strh	r3, [r7, #4]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	70fb      	strb	r3, [r7, #3]
	if (
 8002fc6:	88fb      	ldrh	r3, [r7, #6]
 8002fc8:	2b7f      	cmp	r3, #127	; 0x7f
 8002fca:	d848      	bhi.n	800305e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8002fcc:	88bb      	ldrh	r3, [r7, #4]
 8002fce:	2b3f      	cmp	r3, #63	; 0x3f
 8002fd0:	d845      	bhi.n	800305e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8002fd2:	4b26      	ldr	r3, [pc, #152]	; (800306c <SSD1306_DrawPixel+0xb8>)
 8002fd4:	791b      	ldrb	r3, [r3, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d006      	beq.n	8002fe8 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8002fda:	78fb      	ldrb	r3, [r7, #3]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	bf0c      	ite	eq
 8002fe0:	2301      	moveq	r3, #1
 8002fe2:	2300      	movne	r3, #0
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8002fe8:	78fb      	ldrb	r3, [r7, #3]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d11a      	bne.n	8003024 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002fee:	88fa      	ldrh	r2, [r7, #6]
 8002ff0:	88bb      	ldrh	r3, [r7, #4]
 8002ff2:	08db      	lsrs	r3, r3, #3
 8002ff4:	b298      	uxth	r0, r3
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	01db      	lsls	r3, r3, #7
 8002ffa:	4413      	add	r3, r2
 8002ffc:	4a1c      	ldr	r2, [pc, #112]	; (8003070 <SSD1306_DrawPixel+0xbc>)
 8002ffe:	5cd3      	ldrb	r3, [r2, r3]
 8003000:	b25a      	sxtb	r2, r3
 8003002:	88bb      	ldrh	r3, [r7, #4]
 8003004:	f003 0307 	and.w	r3, r3, #7
 8003008:	2101      	movs	r1, #1
 800300a:	fa01 f303 	lsl.w	r3, r1, r3
 800300e:	b25b      	sxtb	r3, r3
 8003010:	4313      	orrs	r3, r2
 8003012:	b259      	sxtb	r1, r3
 8003014:	88fa      	ldrh	r2, [r7, #6]
 8003016:	4603      	mov	r3, r0
 8003018:	01db      	lsls	r3, r3, #7
 800301a:	4413      	add	r3, r2
 800301c:	b2c9      	uxtb	r1, r1
 800301e:	4a14      	ldr	r2, [pc, #80]	; (8003070 <SSD1306_DrawPixel+0xbc>)
 8003020:	54d1      	strb	r1, [r2, r3]
 8003022:	e01d      	b.n	8003060 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003024:	88fa      	ldrh	r2, [r7, #6]
 8003026:	88bb      	ldrh	r3, [r7, #4]
 8003028:	08db      	lsrs	r3, r3, #3
 800302a:	b298      	uxth	r0, r3
 800302c:	4603      	mov	r3, r0
 800302e:	01db      	lsls	r3, r3, #7
 8003030:	4413      	add	r3, r2
 8003032:	4a0f      	ldr	r2, [pc, #60]	; (8003070 <SSD1306_DrawPixel+0xbc>)
 8003034:	5cd3      	ldrb	r3, [r2, r3]
 8003036:	b25a      	sxtb	r2, r3
 8003038:	88bb      	ldrh	r3, [r7, #4]
 800303a:	f003 0307 	and.w	r3, r3, #7
 800303e:	2101      	movs	r1, #1
 8003040:	fa01 f303 	lsl.w	r3, r1, r3
 8003044:	b25b      	sxtb	r3, r3
 8003046:	43db      	mvns	r3, r3
 8003048:	b25b      	sxtb	r3, r3
 800304a:	4013      	ands	r3, r2
 800304c:	b259      	sxtb	r1, r3
 800304e:	88fa      	ldrh	r2, [r7, #6]
 8003050:	4603      	mov	r3, r0
 8003052:	01db      	lsls	r3, r3, #7
 8003054:	4413      	add	r3, r2
 8003056:	b2c9      	uxtb	r1, r1
 8003058:	4a05      	ldr	r2, [pc, #20]	; (8003070 <SSD1306_DrawPixel+0xbc>)
 800305a:	54d1      	strb	r1, [r2, r3]
 800305c:	e000      	b.n	8003060 <SSD1306_DrawPixel+0xac>
		return;
 800305e:	bf00      	nop
	}
}
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	20000838 	.word	0x20000838
 8003070:	20000438 	.word	0x20000438

08003074 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	4603      	mov	r3, r0
 800307c:	460a      	mov	r2, r1
 800307e:	80fb      	strh	r3, [r7, #6]
 8003080:	4613      	mov	r3, r2
 8003082:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8003084:	4a05      	ldr	r2, [pc, #20]	; (800309c <SSD1306_GotoXY+0x28>)
 8003086:	88fb      	ldrh	r3, [r7, #6]
 8003088:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800308a:	4a04      	ldr	r2, [pc, #16]	; (800309c <SSD1306_GotoXY+0x28>)
 800308c:	88bb      	ldrh	r3, [r7, #4]
 800308e:	8053      	strh	r3, [r2, #2]
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr
 800309c:	20000838 	.word	0x20000838

080030a0 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	4603      	mov	r3, r0
 80030a8:	6039      	str	r1, [r7, #0]
 80030aa:	71fb      	strb	r3, [r7, #7]
 80030ac:	4613      	mov	r3, r2
 80030ae:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80030b0:	4b3a      	ldr	r3, [pc, #232]	; (800319c <SSD1306_Putc+0xfc>)
 80030b2:	881b      	ldrh	r3, [r3, #0]
 80030b4:	461a      	mov	r2, r3
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	4413      	add	r3, r2
	if (
 80030bc:	2b7f      	cmp	r3, #127	; 0x7f
 80030be:	dc07      	bgt.n	80030d0 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80030c0:	4b36      	ldr	r3, [pc, #216]	; (800319c <SSD1306_Putc+0xfc>)
 80030c2:	885b      	ldrh	r3, [r3, #2]
 80030c4:	461a      	mov	r2, r3
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	785b      	ldrb	r3, [r3, #1]
 80030ca:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80030cc:	2b3f      	cmp	r3, #63	; 0x3f
 80030ce:	dd01      	ble.n	80030d4 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80030d0:	2300      	movs	r3, #0
 80030d2:	e05e      	b.n	8003192 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80030d4:	2300      	movs	r3, #0
 80030d6:	617b      	str	r3, [r7, #20]
 80030d8:	e04b      	b.n	8003172 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685a      	ldr	r2, [r3, #4]
 80030de:	79fb      	ldrb	r3, [r7, #7]
 80030e0:	3b20      	subs	r3, #32
 80030e2:	6839      	ldr	r1, [r7, #0]
 80030e4:	7849      	ldrb	r1, [r1, #1]
 80030e6:	fb01 f303 	mul.w	r3, r1, r3
 80030ea:	4619      	mov	r1, r3
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	440b      	add	r3, r1
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	4413      	add	r3, r2
 80030f4:	881b      	ldrh	r3, [r3, #0]
 80030f6:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80030f8:	2300      	movs	r3, #0
 80030fa:	613b      	str	r3, [r7, #16]
 80030fc:	e030      	b.n	8003160 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	fa02 f303 	lsl.w	r3, r2, r3
 8003106:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d010      	beq.n	8003130 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800310e:	4b23      	ldr	r3, [pc, #140]	; (800319c <SSD1306_Putc+0xfc>)
 8003110:	881a      	ldrh	r2, [r3, #0]
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	b29b      	uxth	r3, r3
 8003116:	4413      	add	r3, r2
 8003118:	b298      	uxth	r0, r3
 800311a:	4b20      	ldr	r3, [pc, #128]	; (800319c <SSD1306_Putc+0xfc>)
 800311c:	885a      	ldrh	r2, [r3, #2]
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	b29b      	uxth	r3, r3
 8003122:	4413      	add	r3, r2
 8003124:	b29b      	uxth	r3, r3
 8003126:	79ba      	ldrb	r2, [r7, #6]
 8003128:	4619      	mov	r1, r3
 800312a:	f7ff ff43 	bl	8002fb4 <SSD1306_DrawPixel>
 800312e:	e014      	b.n	800315a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8003130:	4b1a      	ldr	r3, [pc, #104]	; (800319c <SSD1306_Putc+0xfc>)
 8003132:	881a      	ldrh	r2, [r3, #0]
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	b29b      	uxth	r3, r3
 8003138:	4413      	add	r3, r2
 800313a:	b298      	uxth	r0, r3
 800313c:	4b17      	ldr	r3, [pc, #92]	; (800319c <SSD1306_Putc+0xfc>)
 800313e:	885a      	ldrh	r2, [r3, #2]
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	b29b      	uxth	r3, r3
 8003144:	4413      	add	r3, r2
 8003146:	b299      	uxth	r1, r3
 8003148:	79bb      	ldrb	r3, [r7, #6]
 800314a:	2b00      	cmp	r3, #0
 800314c:	bf0c      	ite	eq
 800314e:	2301      	moveq	r3, #1
 8003150:	2300      	movne	r3, #0
 8003152:	b2db      	uxtb	r3, r3
 8003154:	461a      	mov	r2, r3
 8003156:	f7ff ff2d 	bl	8002fb4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	3301      	adds	r3, #1
 800315e:	613b      	str	r3, [r7, #16]
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	461a      	mov	r2, r3
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	4293      	cmp	r3, r2
 800316a:	d3c8      	bcc.n	80030fe <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	3301      	adds	r3, #1
 8003170:	617b      	str	r3, [r7, #20]
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	785b      	ldrb	r3, [r3, #1]
 8003176:	461a      	mov	r2, r3
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	4293      	cmp	r3, r2
 800317c:	d3ad      	bcc.n	80030da <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800317e:	4b07      	ldr	r3, [pc, #28]	; (800319c <SSD1306_Putc+0xfc>)
 8003180:	881a      	ldrh	r2, [r3, #0]
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	b29b      	uxth	r3, r3
 8003188:	4413      	add	r3, r2
 800318a:	b29a      	uxth	r2, r3
 800318c:	4b03      	ldr	r3, [pc, #12]	; (800319c <SSD1306_Putc+0xfc>)
 800318e:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8003190:	79fb      	ldrb	r3, [r7, #7]
}
 8003192:	4618      	mov	r0, r3
 8003194:	3718      	adds	r7, #24
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	20000838 	.word	0x20000838

080031a0 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	4613      	mov	r3, r2
 80031ac:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80031ae:	e012      	b.n	80031d6 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	79fa      	ldrb	r2, [r7, #7]
 80031b6:	68b9      	ldr	r1, [r7, #8]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7ff ff71 	bl	80030a0 <SSD1306_Putc>
 80031be:	4603      	mov	r3, r0
 80031c0:	461a      	mov	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d002      	beq.n	80031d0 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	e008      	b.n	80031e2 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	3301      	adds	r3, #1
 80031d4:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1e8      	bne.n	80031b0 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	781b      	ldrb	r3, [r3, #0]
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80031ee:	2000      	movs	r0, #0
 80031f0:	f7ff fec8 	bl	8002f84 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80031f4:	f7ff fe98 	bl	8002f28 <SSD1306_UpdateScreen>
}
 80031f8:	bf00      	nop
 80031fa:	bd80      	pop	{r7, pc}

080031fc <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8003202:	4b08      	ldr	r3, [pc, #32]	; (8003224 <ssd1306_I2C_Init+0x28>)
 8003204:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003206:	e002      	b.n	800320e <ssd1306_I2C_Init+0x12>
		p--;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	3b01      	subs	r3, #1
 800320c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d1f9      	bne.n	8003208 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8003214:	bf00      	nop
 8003216:	bf00      	nop
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	0003d090 	.word	0x0003d090

08003228 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8003228:	b590      	push	{r4, r7, lr}
 800322a:	b0c7      	sub	sp, #284	; 0x11c
 800322c:	af02      	add	r7, sp, #8
 800322e:	4604      	mov	r4, r0
 8003230:	4608      	mov	r0, r1
 8003232:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8003236:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800323a:	600a      	str	r2, [r1, #0]
 800323c:	4619      	mov	r1, r3
 800323e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003242:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8003246:	4622      	mov	r2, r4
 8003248:	701a      	strb	r2, [r3, #0]
 800324a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800324e:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8003252:	4602      	mov	r2, r0
 8003254:	701a      	strb	r2, [r3, #0]
 8003256:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800325a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800325e:	460a      	mov	r2, r1
 8003260:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8003262:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003266:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800326a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800326e:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8003272:	7812      	ldrb	r2, [r2, #0]
 8003274:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8003276:	2300      	movs	r3, #0
 8003278:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800327c:	e015      	b.n	80032aa <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800327e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003282:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8003286:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800328a:	6812      	ldr	r2, [r2, #0]
 800328c:	441a      	add	r2, r3
 800328e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003292:	3301      	adds	r3, #1
 8003294:	7811      	ldrb	r1, [r2, #0]
 8003296:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800329a:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800329e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80032a0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80032a4:	3301      	adds	r3, #1
 80032a6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80032aa:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80032b4:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80032b8:	8812      	ldrh	r2, [r2, #0]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d8df      	bhi.n	800327e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80032be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80032c2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	b299      	uxth	r1, r3
 80032ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80032ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80032d2:	881b      	ldrh	r3, [r3, #0]
 80032d4:	3301      	adds	r3, #1
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	f107 020c 	add.w	r2, r7, #12
 80032dc:	200a      	movs	r0, #10
 80032de:	9000      	str	r0, [sp, #0]
 80032e0:	4803      	ldr	r0, [pc, #12]	; (80032f0 <ssd1306_I2C_WriteMulti+0xc8>)
 80032e2:	f001 fcc9 	bl	8004c78 <HAL_I2C_Master_Transmit>
}
 80032e6:	bf00      	nop
 80032e8:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd90      	pop	{r4, r7, pc}
 80032f0:	20000310 	.word	0x20000310

080032f4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b086      	sub	sp, #24
 80032f8:	af02      	add	r7, sp, #8
 80032fa:	4603      	mov	r3, r0
 80032fc:	71fb      	strb	r3, [r7, #7]
 80032fe:	460b      	mov	r3, r1
 8003300:	71bb      	strb	r3, [r7, #6]
 8003302:	4613      	mov	r3, r2
 8003304:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8003306:	79bb      	ldrb	r3, [r7, #6]
 8003308:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800330a:	797b      	ldrb	r3, [r7, #5]
 800330c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800330e:	79fb      	ldrb	r3, [r7, #7]
 8003310:	b299      	uxth	r1, r3
 8003312:	f107 020c 	add.w	r2, r7, #12
 8003316:	230a      	movs	r3, #10
 8003318:	9300      	str	r3, [sp, #0]
 800331a:	2302      	movs	r3, #2
 800331c:	4803      	ldr	r0, [pc, #12]	; (800332c <ssd1306_I2C_Write+0x38>)
 800331e:	f001 fcab 	bl	8004c78 <HAL_I2C_Master_Transmit>
}
 8003322:	bf00      	nop
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	20000310 	.word	0x20000310

08003330 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003336:	2300      	movs	r3, #0
 8003338:	607b      	str	r3, [r7, #4]
 800333a:	4b10      	ldr	r3, [pc, #64]	; (800337c <HAL_MspInit+0x4c>)
 800333c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333e:	4a0f      	ldr	r2, [pc, #60]	; (800337c <HAL_MspInit+0x4c>)
 8003340:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003344:	6453      	str	r3, [r2, #68]	; 0x44
 8003346:	4b0d      	ldr	r3, [pc, #52]	; (800337c <HAL_MspInit+0x4c>)
 8003348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800334a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800334e:	607b      	str	r3, [r7, #4]
 8003350:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003352:	2300      	movs	r3, #0
 8003354:	603b      	str	r3, [r7, #0]
 8003356:	4b09      	ldr	r3, [pc, #36]	; (800337c <HAL_MspInit+0x4c>)
 8003358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335a:	4a08      	ldr	r2, [pc, #32]	; (800337c <HAL_MspInit+0x4c>)
 800335c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003360:	6413      	str	r3, [r2, #64]	; 0x40
 8003362:	4b06      	ldr	r3, [pc, #24]	; (800337c <HAL_MspInit+0x4c>)
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800336a:	603b      	str	r3, [r7, #0]
 800336c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 800336e:	2006      	movs	r0, #6
 8003370:	f001 f91e 	bl	80045b0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003374:	bf00      	nop
 8003376:	3708      	adds	r7, #8
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	40023800 	.word	0x40023800

08003380 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b08a      	sub	sp, #40	; 0x28
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003388:	f107 0314 	add.w	r3, r7, #20
 800338c:	2200      	movs	r2, #0
 800338e:	601a      	str	r2, [r3, #0]
 8003390:	605a      	str	r2, [r3, #4]
 8003392:	609a      	str	r2, [r3, #8]
 8003394:	60da      	str	r2, [r3, #12]
 8003396:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a1b      	ldr	r2, [pc, #108]	; (800340c <HAL_ADC_MspInit+0x8c>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d12f      	bne.n	8003402 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80033a2:	2300      	movs	r3, #0
 80033a4:	613b      	str	r3, [r7, #16]
 80033a6:	4b1a      	ldr	r3, [pc, #104]	; (8003410 <HAL_ADC_MspInit+0x90>)
 80033a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033aa:	4a19      	ldr	r2, [pc, #100]	; (8003410 <HAL_ADC_MspInit+0x90>)
 80033ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033b0:	6453      	str	r3, [r2, #68]	; 0x44
 80033b2:	4b17      	ldr	r3, [pc, #92]	; (8003410 <HAL_ADC_MspInit+0x90>)
 80033b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ba:	613b      	str	r3, [r7, #16]
 80033bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033be:	2300      	movs	r3, #0
 80033c0:	60fb      	str	r3, [r7, #12]
 80033c2:	4b13      	ldr	r3, [pc, #76]	; (8003410 <HAL_ADC_MspInit+0x90>)
 80033c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c6:	4a12      	ldr	r2, [pc, #72]	; (8003410 <HAL_ADC_MspInit+0x90>)
 80033c8:	f043 0301 	orr.w	r3, r3, #1
 80033cc:	6313      	str	r3, [r2, #48]	; 0x30
 80033ce:	4b10      	ldr	r3, [pc, #64]	; (8003410 <HAL_ADC_MspInit+0x90>)
 80033d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	60fb      	str	r3, [r7, #12]
 80033d8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = TEMP_Pin;
 80033da:	2310      	movs	r3, #16
 80033dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033de:	2303      	movs	r3, #3
 80033e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e2:	2300      	movs	r3, #0
 80033e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TEMP_GPIO_Port, &GPIO_InitStruct);
 80033e6:	f107 0314 	add.w	r3, r7, #20
 80033ea:	4619      	mov	r1, r3
 80033ec:	4809      	ldr	r0, [pc, #36]	; (8003414 <HAL_ADC_MspInit+0x94>)
 80033ee:	f001 f921 	bl	8004634 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80033f2:	2200      	movs	r2, #0
 80033f4:	2100      	movs	r1, #0
 80033f6:	2012      	movs	r0, #18
 80033f8:	f001 f8e5 	bl	80045c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80033fc:	2012      	movs	r0, #18
 80033fe:	f001 f8fe 	bl	80045fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003402:	bf00      	nop
 8003404:	3728      	adds	r7, #40	; 0x28
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	40012000 	.word	0x40012000
 8003410:	40023800 	.word	0x40023800
 8003414:	40020000 	.word	0x40020000

08003418 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b08a      	sub	sp, #40	; 0x28
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003420:	f107 0314 	add.w	r3, r7, #20
 8003424:	2200      	movs	r2, #0
 8003426:	601a      	str	r2, [r3, #0]
 8003428:	605a      	str	r2, [r3, #4]
 800342a:	609a      	str	r2, [r3, #8]
 800342c:	60da      	str	r2, [r3, #12]
 800342e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a19      	ldr	r2, [pc, #100]	; (800349c <HAL_I2C_MspInit+0x84>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d12c      	bne.n	8003494 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800343a:	2300      	movs	r3, #0
 800343c:	613b      	str	r3, [r7, #16]
 800343e:	4b18      	ldr	r3, [pc, #96]	; (80034a0 <HAL_I2C_MspInit+0x88>)
 8003440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003442:	4a17      	ldr	r2, [pc, #92]	; (80034a0 <HAL_I2C_MspInit+0x88>)
 8003444:	f043 0302 	orr.w	r3, r3, #2
 8003448:	6313      	str	r3, [r2, #48]	; 0x30
 800344a:	4b15      	ldr	r3, [pc, #84]	; (80034a0 <HAL_I2C_MspInit+0x88>)
 800344c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	613b      	str	r3, [r7, #16]
 8003454:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003456:	f44f 7340 	mov.w	r3, #768	; 0x300
 800345a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800345c:	2312      	movs	r3, #18
 800345e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003460:	2300      	movs	r3, #0
 8003462:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003464:	2303      	movs	r3, #3
 8003466:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003468:	2304      	movs	r3, #4
 800346a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800346c:	f107 0314 	add.w	r3, r7, #20
 8003470:	4619      	mov	r1, r3
 8003472:	480c      	ldr	r0, [pc, #48]	; (80034a4 <HAL_I2C_MspInit+0x8c>)
 8003474:	f001 f8de 	bl	8004634 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003478:	2300      	movs	r3, #0
 800347a:	60fb      	str	r3, [r7, #12]
 800347c:	4b08      	ldr	r3, [pc, #32]	; (80034a0 <HAL_I2C_MspInit+0x88>)
 800347e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003480:	4a07      	ldr	r2, [pc, #28]	; (80034a0 <HAL_I2C_MspInit+0x88>)
 8003482:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003486:	6413      	str	r3, [r2, #64]	; 0x40
 8003488:	4b05      	ldr	r3, [pc, #20]	; (80034a0 <HAL_I2C_MspInit+0x88>)
 800348a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003490:	60fb      	str	r3, [r7, #12]
 8003492:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003494:	bf00      	nop
 8003496:	3728      	adds	r7, #40	; 0x28
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	40005400 	.word	0x40005400
 80034a0:	40023800 	.word	0x40023800
 80034a4:	40020400 	.word	0x40020400

080034a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b08e      	sub	sp, #56	; 0x38
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034b4:	2200      	movs	r2, #0
 80034b6:	601a      	str	r2, [r3, #0]
 80034b8:	605a      	str	r2, [r3, #4]
 80034ba:	609a      	str	r2, [r3, #8]
 80034bc:	60da      	str	r2, [r3, #12]
 80034be:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a4e      	ldr	r2, [pc, #312]	; (8003600 <HAL_TIM_Base_MspInit+0x158>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d10e      	bne.n	80034e8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80034ca:	2300      	movs	r3, #0
 80034cc:	623b      	str	r3, [r7, #32]
 80034ce:	4b4d      	ldr	r3, [pc, #308]	; (8003604 <HAL_TIM_Base_MspInit+0x15c>)
 80034d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d2:	4a4c      	ldr	r2, [pc, #304]	; (8003604 <HAL_TIM_Base_MspInit+0x15c>)
 80034d4:	f043 0301 	orr.w	r3, r3, #1
 80034d8:	6453      	str	r3, [r2, #68]	; 0x44
 80034da:	4b4a      	ldr	r3, [pc, #296]	; (8003604 <HAL_TIM_Base_MspInit+0x15c>)
 80034dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	623b      	str	r3, [r7, #32]
 80034e4:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80034e6:	e086      	b.n	80035f6 <HAL_TIM_Base_MspInit+0x14e>
  else if(htim_base->Instance==TIM2)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034f0:	d134      	bne.n	800355c <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80034f2:	2300      	movs	r3, #0
 80034f4:	61fb      	str	r3, [r7, #28]
 80034f6:	4b43      	ldr	r3, [pc, #268]	; (8003604 <HAL_TIM_Base_MspInit+0x15c>)
 80034f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fa:	4a42      	ldr	r2, [pc, #264]	; (8003604 <HAL_TIM_Base_MspInit+0x15c>)
 80034fc:	f043 0301 	orr.w	r3, r3, #1
 8003500:	6413      	str	r3, [r2, #64]	; 0x40
 8003502:	4b40      	ldr	r3, [pc, #256]	; (8003604 <HAL_TIM_Base_MspInit+0x15c>)
 8003504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	61fb      	str	r3, [r7, #28]
 800350c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800350e:	2300      	movs	r3, #0
 8003510:	61bb      	str	r3, [r7, #24]
 8003512:	4b3c      	ldr	r3, [pc, #240]	; (8003604 <HAL_TIM_Base_MspInit+0x15c>)
 8003514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003516:	4a3b      	ldr	r2, [pc, #236]	; (8003604 <HAL_TIM_Base_MspInit+0x15c>)
 8003518:	f043 0301 	orr.w	r3, r3, #1
 800351c:	6313      	str	r3, [r2, #48]	; 0x30
 800351e:	4b39      	ldr	r3, [pc, #228]	; (8003604 <HAL_TIM_Base_MspInit+0x15c>)
 8003520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	61bb      	str	r3, [r7, #24]
 8003528:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800352a:	2301      	movs	r3, #1
 800352c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800352e:	2302      	movs	r3, #2
 8003530:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003532:	2300      	movs	r3, #0
 8003534:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003536:	2300      	movs	r3, #0
 8003538:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800353a:	2301      	movs	r3, #1
 800353c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800353e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003542:	4619      	mov	r1, r3
 8003544:	4830      	ldr	r0, [pc, #192]	; (8003608 <HAL_TIM_Base_MspInit+0x160>)
 8003546:	f001 f875 	bl	8004634 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 1);
 800354a:	2201      	movs	r2, #1
 800354c:	2100      	movs	r1, #0
 800354e:	201c      	movs	r0, #28
 8003550:	f001 f839 	bl	80045c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003554:	201c      	movs	r0, #28
 8003556:	f001 f852 	bl	80045fe <HAL_NVIC_EnableIRQ>
}
 800355a:	e04c      	b.n	80035f6 <HAL_TIM_Base_MspInit+0x14e>
  else if(htim_base->Instance==TIM3)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a2a      	ldr	r2, [pc, #168]	; (800360c <HAL_TIM_Base_MspInit+0x164>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d10e      	bne.n	8003584 <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003566:	2300      	movs	r3, #0
 8003568:	617b      	str	r3, [r7, #20]
 800356a:	4b26      	ldr	r3, [pc, #152]	; (8003604 <HAL_TIM_Base_MspInit+0x15c>)
 800356c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356e:	4a25      	ldr	r2, [pc, #148]	; (8003604 <HAL_TIM_Base_MspInit+0x15c>)
 8003570:	f043 0302 	orr.w	r3, r3, #2
 8003574:	6413      	str	r3, [r2, #64]	; 0x40
 8003576:	4b23      	ldr	r3, [pc, #140]	; (8003604 <HAL_TIM_Base_MspInit+0x15c>)
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	617b      	str	r3, [r7, #20]
 8003580:	697b      	ldr	r3, [r7, #20]
}
 8003582:	e038      	b.n	80035f6 <HAL_TIM_Base_MspInit+0x14e>
  else if(htim_base->Instance==TIM5)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a21      	ldr	r2, [pc, #132]	; (8003610 <HAL_TIM_Base_MspInit+0x168>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d133      	bne.n	80035f6 <HAL_TIM_Base_MspInit+0x14e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800358e:	2300      	movs	r3, #0
 8003590:	613b      	str	r3, [r7, #16]
 8003592:	4b1c      	ldr	r3, [pc, #112]	; (8003604 <HAL_TIM_Base_MspInit+0x15c>)
 8003594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003596:	4a1b      	ldr	r2, [pc, #108]	; (8003604 <HAL_TIM_Base_MspInit+0x15c>)
 8003598:	f043 0308 	orr.w	r3, r3, #8
 800359c:	6413      	str	r3, [r2, #64]	; 0x40
 800359e:	4b19      	ldr	r3, [pc, #100]	; (8003604 <HAL_TIM_Base_MspInit+0x15c>)
 80035a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a2:	f003 0308 	and.w	r3, r3, #8
 80035a6:	613b      	str	r3, [r7, #16]
 80035a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035aa:	2300      	movs	r3, #0
 80035ac:	60fb      	str	r3, [r7, #12]
 80035ae:	4b15      	ldr	r3, [pc, #84]	; (8003604 <HAL_TIM_Base_MspInit+0x15c>)
 80035b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b2:	4a14      	ldr	r2, [pc, #80]	; (8003604 <HAL_TIM_Base_MspInit+0x15c>)
 80035b4:	f043 0301 	orr.w	r3, r3, #1
 80035b8:	6313      	str	r3, [r2, #48]	; 0x30
 80035ba:	4b12      	ldr	r3, [pc, #72]	; (8003604 <HAL_TIM_Base_MspInit+0x15c>)
 80035bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	60fb      	str	r3, [r7, #12]
 80035c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80035c6:	2302      	movs	r3, #2
 80035c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ca:	2302      	movs	r3, #2
 80035cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ce:	2300      	movs	r3, #0
 80035d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035d2:	2300      	movs	r3, #0
 80035d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80035d6:	2302      	movs	r3, #2
 80035d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035de:	4619      	mov	r1, r3
 80035e0:	4809      	ldr	r0, [pc, #36]	; (8003608 <HAL_TIM_Base_MspInit+0x160>)
 80035e2:	f001 f827 	bl	8004634 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 1);
 80035e6:	2201      	movs	r2, #1
 80035e8:	2100      	movs	r1, #0
 80035ea:	2032      	movs	r0, #50	; 0x32
 80035ec:	f000 ffeb 	bl	80045c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80035f0:	2032      	movs	r0, #50	; 0x32
 80035f2:	f001 f804 	bl	80045fe <HAL_NVIC_EnableIRQ>
}
 80035f6:	bf00      	nop
 80035f8:	3738      	adds	r7, #56	; 0x38
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	40010000 	.word	0x40010000
 8003604:	40023800 	.word	0x40023800
 8003608:	40020000 	.word	0x40020000
 800360c:	40000400 	.word	0x40000400
 8003610:	40000c00 	.word	0x40000c00

08003614 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b088      	sub	sp, #32
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800361c:	f107 030c 	add.w	r3, r7, #12
 8003620:	2200      	movs	r2, #0
 8003622:	601a      	str	r2, [r3, #0]
 8003624:	605a      	str	r2, [r3, #4]
 8003626:	609a      	str	r2, [r3, #8]
 8003628:	60da      	str	r2, [r3, #12]
 800362a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a12      	ldr	r2, [pc, #72]	; (800367c <HAL_TIM_MspPostInit+0x68>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d11e      	bne.n	8003674 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003636:	2300      	movs	r3, #0
 8003638:	60bb      	str	r3, [r7, #8]
 800363a:	4b11      	ldr	r3, [pc, #68]	; (8003680 <HAL_TIM_MspPostInit+0x6c>)
 800363c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363e:	4a10      	ldr	r2, [pc, #64]	; (8003680 <HAL_TIM_MspPostInit+0x6c>)
 8003640:	f043 0301 	orr.w	r3, r3, #1
 8003644:	6313      	str	r3, [r2, #48]	; 0x30
 8003646:	4b0e      	ldr	r3, [pc, #56]	; (8003680 <HAL_TIM_MspPostInit+0x6c>)
 8003648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	60bb      	str	r3, [r7, #8]
 8003650:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8003652:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8003656:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003658:	2302      	movs	r3, #2
 800365a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800365c:	2300      	movs	r3, #0
 800365e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003660:	2300      	movs	r3, #0
 8003662:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003664:	2301      	movs	r3, #1
 8003666:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003668:	f107 030c 	add.w	r3, r7, #12
 800366c:	4619      	mov	r1, r3
 800366e:	4805      	ldr	r0, [pc, #20]	; (8003684 <HAL_TIM_MspPostInit+0x70>)
 8003670:	f000 ffe0 	bl	8004634 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003674:	bf00      	nop
 8003676:	3720      	adds	r7, #32
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	40010000 	.word	0x40010000
 8003680:	40023800 	.word	0x40023800
 8003684:	40020000 	.word	0x40020000

08003688 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b08a      	sub	sp, #40	; 0x28
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003690:	f107 0314 	add.w	r3, r7, #20
 8003694:	2200      	movs	r2, #0
 8003696:	601a      	str	r2, [r3, #0]
 8003698:	605a      	str	r2, [r3, #4]
 800369a:	609a      	str	r2, [r3, #8]
 800369c:	60da      	str	r2, [r3, #12]
 800369e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a19      	ldr	r2, [pc, #100]	; (800370c <HAL_UART_MspInit+0x84>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d12b      	bne.n	8003702 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80036aa:	2300      	movs	r3, #0
 80036ac:	613b      	str	r3, [r7, #16]
 80036ae:	4b18      	ldr	r3, [pc, #96]	; (8003710 <HAL_UART_MspInit+0x88>)
 80036b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b2:	4a17      	ldr	r2, [pc, #92]	; (8003710 <HAL_UART_MspInit+0x88>)
 80036b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036b8:	6413      	str	r3, [r2, #64]	; 0x40
 80036ba:	4b15      	ldr	r3, [pc, #84]	; (8003710 <HAL_UART_MspInit+0x88>)
 80036bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c2:	613b      	str	r3, [r7, #16]
 80036c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036c6:	2300      	movs	r3, #0
 80036c8:	60fb      	str	r3, [r7, #12]
 80036ca:	4b11      	ldr	r3, [pc, #68]	; (8003710 <HAL_UART_MspInit+0x88>)
 80036cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ce:	4a10      	ldr	r2, [pc, #64]	; (8003710 <HAL_UART_MspInit+0x88>)
 80036d0:	f043 0301 	orr.w	r3, r3, #1
 80036d4:	6313      	str	r3, [r2, #48]	; 0x30
 80036d6:	4b0e      	ldr	r3, [pc, #56]	; (8003710 <HAL_UART_MspInit+0x88>)
 80036d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	60fb      	str	r3, [r7, #12]
 80036e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80036e2:	230c      	movs	r3, #12
 80036e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036e6:	2302      	movs	r3, #2
 80036e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ea:	2300      	movs	r3, #0
 80036ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036ee:	2303      	movs	r3, #3
 80036f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80036f2:	2307      	movs	r3, #7
 80036f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036f6:	f107 0314 	add.w	r3, r7, #20
 80036fa:	4619      	mov	r1, r3
 80036fc:	4805      	ldr	r0, [pc, #20]	; (8003714 <HAL_UART_MspInit+0x8c>)
 80036fe:	f000 ff99 	bl	8004634 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003702:	bf00      	nop
 8003704:	3728      	adds	r7, #40	; 0x28
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	40004400 	.word	0x40004400
 8003710:	40023800 	.word	0x40023800
 8003714:	40020000 	.word	0x40020000

08003718 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800371c:	e7fe      	b.n	800371c <NMI_Handler+0x4>

0800371e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800371e:	b480      	push	{r7}
 8003720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003722:	e7fe      	b.n	8003722 <HardFault_Handler+0x4>

08003724 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003728:	e7fe      	b.n	8003728 <MemManage_Handler+0x4>

0800372a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800372a:	b480      	push	{r7}
 800372c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800372e:	e7fe      	b.n	800372e <BusFault_Handler+0x4>

08003730 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003734:	e7fe      	b.n	8003734 <UsageFault_Handler+0x4>

08003736 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003736:	b480      	push	{r7}
 8003738:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800373a:	bf00      	nop
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003744:	b480      	push	{r7}
 8003746:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003748:	bf00      	nop
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr

08003752 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003752:	b480      	push	{r7}
 8003754:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003756:	bf00      	nop
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003764:	f000 f984 	bl	8003a70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003768:	bf00      	nop
 800376a:	bd80      	pop	{r7, pc}

0800376c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SLFL_Pin);
 8003770:	2002      	movs	r0, #2
 8003772:	f001 f925 	bl	80049c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003776:	bf00      	nop
 8003778:	bd80      	pop	{r7, pc}
	...

0800377c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003780:	4802      	ldr	r0, [pc, #8]	; (800378c <ADC_IRQHandler+0x10>)
 8003782:	f000 fadb 	bl	8003d3c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003786:	bf00      	nop
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	200002c8 	.word	0x200002c8

08003790 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003794:	4802      	ldr	r0, [pc, #8]	; (80037a0 <TIM2_IRQHandler+0x10>)
 8003796:	f003 f8ab 	bl	80068f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800379a:	bf00      	nop
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	20000364 	.word	0x20000364

080037a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SLFR_Pin);
 80037a8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80037ac:	f001 f908 	bl	80049c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80037b0:	bf00      	nop
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80037b8:	4802      	ldr	r0, [pc, #8]	; (80037c4 <TIM5_IRQHandler+0x10>)
 80037ba:	f003 f899 	bl	80068f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80037be:	bf00      	nop
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	200003ac 	.word	0x200003ac

080037c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80037c8:	b480      	push	{r7}
 80037ca:	af00      	add	r7, sp, #0
	return 1;
 80037cc:	2301      	movs	r3, #1
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <_kill>:

int _kill(int pid, int sig)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80037e2:	f004 fdd1 	bl	8008388 <__errno>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2216      	movs	r2, #22
 80037ea:	601a      	str	r2, [r3, #0]
	return -1;
 80037ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3708      	adds	r7, #8
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <_exit>:

void _exit (int status)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003800:	f04f 31ff 	mov.w	r1, #4294967295
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f7ff ffe7 	bl	80037d8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800380a:	e7fe      	b.n	800380a <_exit+0x12>

0800380c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b086      	sub	sp, #24
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003818:	2300      	movs	r3, #0
 800381a:	617b      	str	r3, [r7, #20]
 800381c:	e00a      	b.n	8003834 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800381e:	f3af 8000 	nop.w
 8003822:	4601      	mov	r1, r0
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	1c5a      	adds	r2, r3, #1
 8003828:	60ba      	str	r2, [r7, #8]
 800382a:	b2ca      	uxtb	r2, r1
 800382c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	3301      	adds	r3, #1
 8003832:	617b      	str	r3, [r7, #20]
 8003834:	697a      	ldr	r2, [r7, #20]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	429a      	cmp	r2, r3
 800383a:	dbf0      	blt.n	800381e <_read+0x12>
	}

return len;
 800383c:	687b      	ldr	r3, [r7, #4]
}
 800383e:	4618      	mov	r0, r3
 8003840:	3718      	adds	r7, #24
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b086      	sub	sp, #24
 800384a:	af00      	add	r7, sp, #0
 800384c:	60f8      	str	r0, [r7, #12]
 800384e:	60b9      	str	r1, [r7, #8]
 8003850:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003852:	2300      	movs	r3, #0
 8003854:	617b      	str	r3, [r7, #20]
 8003856:	e009      	b.n	800386c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	1c5a      	adds	r2, r3, #1
 800385c:	60ba      	str	r2, [r7, #8]
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	4618      	mov	r0, r3
 8003862:	f7fe fdd7 	bl	8002414 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	3301      	adds	r3, #1
 800386a:	617b      	str	r3, [r7, #20]
 800386c:	697a      	ldr	r2, [r7, #20]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	429a      	cmp	r2, r3
 8003872:	dbf1      	blt.n	8003858 <_write+0x12>
	}
	return len;
 8003874:	687b      	ldr	r3, [r7, #4]
}
 8003876:	4618      	mov	r0, r3
 8003878:	3718      	adds	r7, #24
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}

0800387e <_close>:

int _close(int file)
{
 800387e:	b480      	push	{r7}
 8003880:	b083      	sub	sp, #12
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
	return -1;
 8003886:	f04f 33ff 	mov.w	r3, #4294967295
}
 800388a:	4618      	mov	r0, r3
 800388c:	370c      	adds	r7, #12
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr

08003896 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003896:	b480      	push	{r7}
 8003898:	b083      	sub	sp, #12
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
 800389e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80038a6:	605a      	str	r2, [r3, #4]
	return 0;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	370c      	adds	r7, #12
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr

080038b6 <_isatty>:

int _isatty(int file)
{
 80038b6:	b480      	push	{r7}
 80038b8:	b083      	sub	sp, #12
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
	return 1;
 80038be:	2301      	movs	r3, #1
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b085      	sub	sp, #20
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
	return 0;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3714      	adds	r7, #20
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
	...

080038e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b086      	sub	sp, #24
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038f0:	4a14      	ldr	r2, [pc, #80]	; (8003944 <_sbrk+0x5c>)
 80038f2:	4b15      	ldr	r3, [pc, #84]	; (8003948 <_sbrk+0x60>)
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038fc:	4b13      	ldr	r3, [pc, #76]	; (800394c <_sbrk+0x64>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d102      	bne.n	800390a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003904:	4b11      	ldr	r3, [pc, #68]	; (800394c <_sbrk+0x64>)
 8003906:	4a12      	ldr	r2, [pc, #72]	; (8003950 <_sbrk+0x68>)
 8003908:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800390a:	4b10      	ldr	r3, [pc, #64]	; (800394c <_sbrk+0x64>)
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4413      	add	r3, r2
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	429a      	cmp	r2, r3
 8003916:	d207      	bcs.n	8003928 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003918:	f004 fd36 	bl	8008388 <__errno>
 800391c:	4603      	mov	r3, r0
 800391e:	220c      	movs	r2, #12
 8003920:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003922:	f04f 33ff 	mov.w	r3, #4294967295
 8003926:	e009      	b.n	800393c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003928:	4b08      	ldr	r3, [pc, #32]	; (800394c <_sbrk+0x64>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800392e:	4b07      	ldr	r3, [pc, #28]	; (800394c <_sbrk+0x64>)
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4413      	add	r3, r2
 8003936:	4a05      	ldr	r2, [pc, #20]	; (800394c <_sbrk+0x64>)
 8003938:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800393a:	68fb      	ldr	r3, [r7, #12]
}
 800393c:	4618      	mov	r0, r3
 800393e:	3718      	adds	r7, #24
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	20020000 	.word	0x20020000
 8003948:	00000400 	.word	0x00000400
 800394c:	20000840 	.word	0x20000840
 8003950:	20000858 	.word	0x20000858

08003954 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003954:	b480      	push	{r7}
 8003956:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003958:	4b06      	ldr	r3, [pc, #24]	; (8003974 <SystemInit+0x20>)
 800395a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800395e:	4a05      	ldr	r2, [pc, #20]	; (8003974 <SystemInit+0x20>)
 8003960:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003964:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003968:	bf00      	nop
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	e000ed00 	.word	0xe000ed00

08003978 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003978:	f8df d034 	ldr.w	sp, [pc, #52]	; 80039b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800397c:	480d      	ldr	r0, [pc, #52]	; (80039b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800397e:	490e      	ldr	r1, [pc, #56]	; (80039b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003980:	4a0e      	ldr	r2, [pc, #56]	; (80039bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003982:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003984:	e002      	b.n	800398c <LoopCopyDataInit>

08003986 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003986:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003988:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800398a:	3304      	adds	r3, #4

0800398c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800398c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800398e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003990:	d3f9      	bcc.n	8003986 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003992:	4a0b      	ldr	r2, [pc, #44]	; (80039c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003994:	4c0b      	ldr	r4, [pc, #44]	; (80039c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003996:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003998:	e001      	b.n	800399e <LoopFillZerobss>

0800399a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800399a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800399c:	3204      	adds	r2, #4

0800399e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800399e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80039a0:	d3fb      	bcc.n	800399a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80039a2:	f7ff ffd7 	bl	8003954 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80039a6:	f004 fcf5 	bl	8008394 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80039aa:	f7fe fd45 	bl	8002438 <main>
  bx  lr    
 80039ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80039b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80039b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80039b8:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80039bc:	0800c33c 	.word	0x0800c33c
  ldr r2, =_sbss
 80039c0:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80039c4:	20000858 	.word	0x20000858

080039c8 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80039c8:	e7fe      	b.n	80039c8 <CAN1_RX0_IRQHandler>
	...

080039cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80039d0:	4b0e      	ldr	r3, [pc, #56]	; (8003a0c <HAL_Init+0x40>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a0d      	ldr	r2, [pc, #52]	; (8003a0c <HAL_Init+0x40>)
 80039d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80039dc:	4b0b      	ldr	r3, [pc, #44]	; (8003a0c <HAL_Init+0x40>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a0a      	ldr	r2, [pc, #40]	; (8003a0c <HAL_Init+0x40>)
 80039e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80039e8:	4b08      	ldr	r3, [pc, #32]	; (8003a0c <HAL_Init+0x40>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a07      	ldr	r2, [pc, #28]	; (8003a0c <HAL_Init+0x40>)
 80039ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039f4:	2003      	movs	r0, #3
 80039f6:	f000 fddb 	bl	80045b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80039fa:	2000      	movs	r0, #0
 80039fc:	f000 f808 	bl	8003a10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a00:	f7ff fc96 	bl	8003330 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	40023c00 	.word	0x40023c00

08003a10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a18:	4b12      	ldr	r3, [pc, #72]	; (8003a64 <HAL_InitTick+0x54>)
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	4b12      	ldr	r3, [pc, #72]	; (8003a68 <HAL_InitTick+0x58>)
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	4619      	mov	r1, r3
 8003a22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a26:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f000 fdf3 	bl	800461a <HAL_SYSTICK_Config>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d001      	beq.n	8003a3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e00e      	b.n	8003a5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2b0f      	cmp	r3, #15
 8003a42:	d80a      	bhi.n	8003a5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a44:	2200      	movs	r2, #0
 8003a46:	6879      	ldr	r1, [r7, #4]
 8003a48:	f04f 30ff 	mov.w	r0, #4294967295
 8003a4c:	f000 fdbb 	bl	80045c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a50:	4a06      	ldr	r2, [pc, #24]	; (8003a6c <HAL_InitTick+0x5c>)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a56:	2300      	movs	r3, #0
 8003a58:	e000      	b.n	8003a5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3708      	adds	r7, #8
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	20000010 	.word	0x20000010
 8003a68:	20000018 	.word	0x20000018
 8003a6c:	20000014 	.word	0x20000014

08003a70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a70:	b480      	push	{r7}
 8003a72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a74:	4b06      	ldr	r3, [pc, #24]	; (8003a90 <HAL_IncTick+0x20>)
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	461a      	mov	r2, r3
 8003a7a:	4b06      	ldr	r3, [pc, #24]	; (8003a94 <HAL_IncTick+0x24>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4413      	add	r3, r2
 8003a80:	4a04      	ldr	r2, [pc, #16]	; (8003a94 <HAL_IncTick+0x24>)
 8003a82:	6013      	str	r3, [r2, #0]
}
 8003a84:	bf00      	nop
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	20000018 	.word	0x20000018
 8003a94:	20000844 	.word	0x20000844

08003a98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	af00      	add	r7, sp, #0
  return uwTick;
 8003a9c:	4b03      	ldr	r3, [pc, #12]	; (8003aac <HAL_GetTick+0x14>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	20000844 	.word	0x20000844

08003ab0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ab8:	f7ff ffee 	bl	8003a98 <HAL_GetTick>
 8003abc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac8:	d005      	beq.n	8003ad6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003aca:	4b0a      	ldr	r3, [pc, #40]	; (8003af4 <HAL_Delay+0x44>)
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	461a      	mov	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003ad6:	bf00      	nop
 8003ad8:	f7ff ffde 	bl	8003a98 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d8f7      	bhi.n	8003ad8 <HAL_Delay+0x28>
  {
  }
}
 8003ae8:	bf00      	nop
 8003aea:	bf00      	nop
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	20000018 	.word	0x20000018

08003af8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b00:	2300      	movs	r3, #0
 8003b02:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d101      	bne.n	8003b0e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e033      	b.n	8003b76 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d109      	bne.n	8003b2a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f7ff fc32 	bl	8003380 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2e:	f003 0310 	and.w	r3, r3, #16
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d118      	bne.n	8003b68 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003b3e:	f023 0302 	bic.w	r3, r3, #2
 8003b42:	f043 0202 	orr.w	r2, r3, #2
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 fb5a 	bl	8004204 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5a:	f023 0303 	bic.w	r3, r3, #3
 8003b5e:	f043 0201 	orr.w	r2, r3, #1
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	641a      	str	r2, [r3, #64]	; 0x40
 8003b66:	e001      	b.n	8003b6c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3710      	adds	r7, #16
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
	...

08003b80 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d101      	bne.n	8003b9a <HAL_ADC_Start_IT+0x1a>
 8003b96:	2302      	movs	r3, #2
 8003b98:	e0bd      	b.n	8003d16 <HAL_ADC_Start_IT+0x196>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f003 0301 	and.w	r3, r3, #1
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d018      	beq.n	8003be2 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	689a      	ldr	r2, [r3, #8]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f042 0201 	orr.w	r2, r2, #1
 8003bbe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003bc0:	4b58      	ldr	r3, [pc, #352]	; (8003d24 <HAL_ADC_Start_IT+0x1a4>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a58      	ldr	r2, [pc, #352]	; (8003d28 <HAL_ADC_Start_IT+0x1a8>)
 8003bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bca:	0c9a      	lsrs	r2, r3, #18
 8003bcc:	4613      	mov	r3, r2
 8003bce:	005b      	lsls	r3, r3, #1
 8003bd0:	4413      	add	r3, r2
 8003bd2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003bd4:	e002      	b.n	8003bdc <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	3b01      	subs	r3, #1
 8003bda:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1f9      	bne.n	8003bd6 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f003 0301 	and.w	r3, r3, #1
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	f040 8085 	bne.w	8003cfc <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003bfa:	f023 0301 	bic.w	r3, r3, #1
 8003bfe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d007      	beq.n	8003c24 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c18:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003c1c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c30:	d106      	bne.n	8003c40 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c36:	f023 0206 	bic.w	r2, r3, #6
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	645a      	str	r2, [r3, #68]	; 0x44
 8003c3e:	e002      	b.n	8003c46 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c4e:	4b37      	ldr	r3, [pc, #220]	; (8003d2c <HAL_ADC_Start_IT+0x1ac>)
 8003c50:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003c5a:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	6812      	ldr	r2, [r2, #0]
 8003c66:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c6a:	f043 0320 	orr.w	r3, r3, #32
 8003c6e:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f003 031f 	and.w	r3, r3, #31
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d12a      	bne.n	8003cd2 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a2b      	ldr	r2, [pc, #172]	; (8003d30 <HAL_ADC_Start_IT+0x1b0>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d015      	beq.n	8003cb2 <HAL_ADC_Start_IT+0x132>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a2a      	ldr	r2, [pc, #168]	; (8003d34 <HAL_ADC_Start_IT+0x1b4>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d105      	bne.n	8003c9c <HAL_ADC_Start_IT+0x11c>
 8003c90:	4b26      	ldr	r3, [pc, #152]	; (8003d2c <HAL_ADC_Start_IT+0x1ac>)
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f003 031f 	and.w	r3, r3, #31
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00a      	beq.n	8003cb2 <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a25      	ldr	r2, [pc, #148]	; (8003d38 <HAL_ADC_Start_IT+0x1b8>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d136      	bne.n	8003d14 <HAL_ADC_Start_IT+0x194>
 8003ca6:	4b21      	ldr	r3, [pc, #132]	; (8003d2c <HAL_ADC_Start_IT+0x1ac>)
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f003 0310 	and.w	r3, r3, #16
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d130      	bne.n	8003d14 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d129      	bne.n	8003d14 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	689a      	ldr	r2, [r3, #8]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003cce:	609a      	str	r2, [r3, #8]
 8003cd0:	e020      	b.n	8003d14 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a16      	ldr	r2, [pc, #88]	; (8003d30 <HAL_ADC_Start_IT+0x1b0>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d11b      	bne.n	8003d14 <HAL_ADC_Start_IT+0x194>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d114      	bne.n	8003d14 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	689a      	ldr	r2, [r3, #8]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003cf8:	609a      	str	r2, [r3, #8]
 8003cfa:	e00b      	b.n	8003d14 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d00:	f043 0210 	orr.w	r2, r3, #16
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d0c:	f043 0201 	orr.w	r2, r3, #1
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3714      	adds	r7, #20
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	20000010 	.word	0x20000010
 8003d28:	431bde83 	.word	0x431bde83
 8003d2c:	40012300 	.word	0x40012300
 8003d30:	40012000 	.word	0x40012000
 8003d34:	40012100 	.word	0x40012100
 8003d38:	40012200 	.word	0x40012200

08003d3c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b086      	sub	sp, #24
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003d44:	2300      	movs	r3, #0
 8003d46:	617b      	str	r3, [r7, #20]
 8003d48:	2300      	movs	r3, #0
 8003d4a:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	f003 0320 	and.w	r3, r3, #32
 8003d6a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d049      	beq.n	8003e06 <HAL_ADC_IRQHandler+0xca>
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d046      	beq.n	8003e06 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7c:	f003 0310 	and.w	r3, r3, #16
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d105      	bne.n	8003d90 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d88:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d12b      	bne.n	8003df6 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d127      	bne.n	8003df6 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dac:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d006      	beq.n	8003dc2 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d119      	bne.n	8003df6 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	685a      	ldr	r2, [r3, #4]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f022 0220 	bic.w	r2, r2, #32
 8003dd0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d105      	bne.n	8003df6 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dee:	f043 0201 	orr.w	r2, r3, #1
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f7fd f936 	bl	8001068 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f06f 0212 	mvn.w	r2, #18
 8003e04:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f003 0304 	and.w	r3, r3, #4
 8003e0c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e14:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d057      	beq.n	8003ecc <HAL_ADC_IRQHandler+0x190>
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d054      	beq.n	8003ecc <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e26:	f003 0310 	and.w	r3, r3, #16
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d105      	bne.n	8003e3a <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e32:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d139      	bne.n	8003ebc <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e4e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d006      	beq.n	8003e64 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d12b      	bne.n	8003ebc <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d124      	bne.n	8003ebc <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d11d      	bne.n	8003ebc <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d119      	bne.n	8003ebc <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	685a      	ldr	r2, [r3, #4]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e96:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d105      	bne.n	8003ebc <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb4:	f043 0201 	orr.w	r2, r3, #1
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 fa9d 	bl	80043fc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f06f 020c 	mvn.w	r2, #12
 8003eca:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eda:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d017      	beq.n	8003f12 <HAL_ADC_IRQHandler+0x1d6>
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d014      	beq.n	8003f12 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d10d      	bne.n	8003f12 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 f837 	bl	8003f76 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f06f 0201 	mvn.w	r2, #1
 8003f10:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f003 0320 	and.w	r3, r3, #32
 8003f18:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f20:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d015      	beq.n	8003f54 <HAL_ADC_IRQHandler+0x218>
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d012      	beq.n	8003f54 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f32:	f043 0202 	orr.w	r2, r3, #2
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f06f 0220 	mvn.w	r2, #32
 8003f42:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 f820 	bl	8003f8a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f06f 0220 	mvn.w	r2, #32
 8003f52:	601a      	str	r2, [r3, #0]
  }
}
 8003f54:	bf00      	nop
 8003f56:	3718      	adds	r7, #24
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	370c      	adds	r7, #12
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr

08003f76 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003f76:	b480      	push	{r7}
 8003f78:	b083      	sub	sp, #12
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003f7e:	bf00      	nop
 8003f80:	370c      	adds	r7, #12
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr

08003f8a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003f8a:	b480      	push	{r7}
 8003f8c:	b083      	sub	sp, #12
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003f92:	bf00      	nop
 8003f94:	370c      	adds	r7, #12
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
	...

08003fa0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003faa:	2300      	movs	r3, #0
 8003fac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d101      	bne.n	8003fbc <HAL_ADC_ConfigChannel+0x1c>
 8003fb8:	2302      	movs	r3, #2
 8003fba:	e113      	b.n	80041e4 <HAL_ADC_ConfigChannel+0x244>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2b09      	cmp	r3, #9
 8003fca:	d925      	bls.n	8004018 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68d9      	ldr	r1, [r3, #12]
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	461a      	mov	r2, r3
 8003fda:	4613      	mov	r3, r2
 8003fdc:	005b      	lsls	r3, r3, #1
 8003fde:	4413      	add	r3, r2
 8003fe0:	3b1e      	subs	r3, #30
 8003fe2:	2207      	movs	r2, #7
 8003fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe8:	43da      	mvns	r2, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	400a      	ands	r2, r1
 8003ff0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68d9      	ldr	r1, [r3, #12]
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	689a      	ldr	r2, [r3, #8]
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	b29b      	uxth	r3, r3
 8004002:	4618      	mov	r0, r3
 8004004:	4603      	mov	r3, r0
 8004006:	005b      	lsls	r3, r3, #1
 8004008:	4403      	add	r3, r0
 800400a:	3b1e      	subs	r3, #30
 800400c:	409a      	lsls	r2, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	430a      	orrs	r2, r1
 8004014:	60da      	str	r2, [r3, #12]
 8004016:	e022      	b.n	800405e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	6919      	ldr	r1, [r3, #16]
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	b29b      	uxth	r3, r3
 8004024:	461a      	mov	r2, r3
 8004026:	4613      	mov	r3, r2
 8004028:	005b      	lsls	r3, r3, #1
 800402a:	4413      	add	r3, r2
 800402c:	2207      	movs	r2, #7
 800402e:	fa02 f303 	lsl.w	r3, r2, r3
 8004032:	43da      	mvns	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	400a      	ands	r2, r1
 800403a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	6919      	ldr	r1, [r3, #16]
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	689a      	ldr	r2, [r3, #8]
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	b29b      	uxth	r3, r3
 800404c:	4618      	mov	r0, r3
 800404e:	4603      	mov	r3, r0
 8004050:	005b      	lsls	r3, r3, #1
 8004052:	4403      	add	r3, r0
 8004054:	409a      	lsls	r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	430a      	orrs	r2, r1
 800405c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	2b06      	cmp	r3, #6
 8004064:	d824      	bhi.n	80040b0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	4613      	mov	r3, r2
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	4413      	add	r3, r2
 8004076:	3b05      	subs	r3, #5
 8004078:	221f      	movs	r2, #31
 800407a:	fa02 f303 	lsl.w	r3, r2, r3
 800407e:	43da      	mvns	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	400a      	ands	r2, r1
 8004086:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	b29b      	uxth	r3, r3
 8004094:	4618      	mov	r0, r3
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	685a      	ldr	r2, [r3, #4]
 800409a:	4613      	mov	r3, r2
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	4413      	add	r3, r2
 80040a0:	3b05      	subs	r3, #5
 80040a2:	fa00 f203 	lsl.w	r2, r0, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	635a      	str	r2, [r3, #52]	; 0x34
 80040ae:	e04c      	b.n	800414a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	2b0c      	cmp	r3, #12
 80040b6:	d824      	bhi.n	8004102 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	685a      	ldr	r2, [r3, #4]
 80040c2:	4613      	mov	r3, r2
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	4413      	add	r3, r2
 80040c8:	3b23      	subs	r3, #35	; 0x23
 80040ca:	221f      	movs	r2, #31
 80040cc:	fa02 f303 	lsl.w	r3, r2, r3
 80040d0:	43da      	mvns	r2, r3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	400a      	ands	r2, r1
 80040d8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	4618      	mov	r0, r3
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	685a      	ldr	r2, [r3, #4]
 80040ec:	4613      	mov	r3, r2
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	4413      	add	r3, r2
 80040f2:	3b23      	subs	r3, #35	; 0x23
 80040f4:	fa00 f203 	lsl.w	r2, r0, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	430a      	orrs	r2, r1
 80040fe:	631a      	str	r2, [r3, #48]	; 0x30
 8004100:	e023      	b.n	800414a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	685a      	ldr	r2, [r3, #4]
 800410c:	4613      	mov	r3, r2
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	4413      	add	r3, r2
 8004112:	3b41      	subs	r3, #65	; 0x41
 8004114:	221f      	movs	r2, #31
 8004116:	fa02 f303 	lsl.w	r3, r2, r3
 800411a:	43da      	mvns	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	400a      	ands	r2, r1
 8004122:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	b29b      	uxth	r3, r3
 8004130:	4618      	mov	r0, r3
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	685a      	ldr	r2, [r3, #4]
 8004136:	4613      	mov	r3, r2
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	4413      	add	r3, r2
 800413c:	3b41      	subs	r3, #65	; 0x41
 800413e:	fa00 f203 	lsl.w	r2, r0, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	430a      	orrs	r2, r1
 8004148:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800414a:	4b29      	ldr	r3, [pc, #164]	; (80041f0 <HAL_ADC_ConfigChannel+0x250>)
 800414c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a28      	ldr	r2, [pc, #160]	; (80041f4 <HAL_ADC_ConfigChannel+0x254>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d10f      	bne.n	8004178 <HAL_ADC_ConfigChannel+0x1d8>
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2b12      	cmp	r3, #18
 800415e:	d10b      	bne.n	8004178 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a1d      	ldr	r2, [pc, #116]	; (80041f4 <HAL_ADC_ConfigChannel+0x254>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d12b      	bne.n	80041da <HAL_ADC_ConfigChannel+0x23a>
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a1c      	ldr	r2, [pc, #112]	; (80041f8 <HAL_ADC_ConfigChannel+0x258>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d003      	beq.n	8004194 <HAL_ADC_ConfigChannel+0x1f4>
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2b11      	cmp	r3, #17
 8004192:	d122      	bne.n	80041da <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a11      	ldr	r2, [pc, #68]	; (80041f8 <HAL_ADC_ConfigChannel+0x258>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d111      	bne.n	80041da <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80041b6:	4b11      	ldr	r3, [pc, #68]	; (80041fc <HAL_ADC_ConfigChannel+0x25c>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a11      	ldr	r2, [pc, #68]	; (8004200 <HAL_ADC_ConfigChannel+0x260>)
 80041bc:	fba2 2303 	umull	r2, r3, r2, r3
 80041c0:	0c9a      	lsrs	r2, r3, #18
 80041c2:	4613      	mov	r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	4413      	add	r3, r2
 80041c8:	005b      	lsls	r3, r3, #1
 80041ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80041cc:	e002      	b.n	80041d4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	3b01      	subs	r3, #1
 80041d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1f9      	bne.n	80041ce <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80041e2:	2300      	movs	r3, #0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3714      	adds	r7, #20
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr
 80041f0:	40012300 	.word	0x40012300
 80041f4:	40012000 	.word	0x40012000
 80041f8:	10000012 	.word	0x10000012
 80041fc:	20000010 	.word	0x20000010
 8004200:	431bde83 	.word	0x431bde83

08004204 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004204:	b480      	push	{r7}
 8004206:	b085      	sub	sp, #20
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800420c:	4b79      	ldr	r3, [pc, #484]	; (80043f4 <ADC_Init+0x1f0>)
 800420e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	685a      	ldr	r2, [r3, #4]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	431a      	orrs	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	685a      	ldr	r2, [r3, #4]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004238:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	6859      	ldr	r1, [r3, #4]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	021a      	lsls	r2, r3, #8
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	430a      	orrs	r2, r1
 800424c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	685a      	ldr	r2, [r3, #4]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800425c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	6859      	ldr	r1, [r3, #4]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	689a      	ldr	r2, [r3, #8]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	430a      	orrs	r2, r1
 800426e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	689a      	ldr	r2, [r3, #8]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800427e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	6899      	ldr	r1, [r3, #8]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	68da      	ldr	r2, [r3, #12]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	430a      	orrs	r2, r1
 8004290:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004296:	4a58      	ldr	r2, [pc, #352]	; (80043f8 <ADC_Init+0x1f4>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d022      	beq.n	80042e2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	689a      	ldr	r2, [r3, #8]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80042aa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	6899      	ldr	r1, [r3, #8]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	430a      	orrs	r2, r1
 80042bc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	689a      	ldr	r2, [r3, #8]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80042cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	6899      	ldr	r1, [r3, #8]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	430a      	orrs	r2, r1
 80042de:	609a      	str	r2, [r3, #8]
 80042e0:	e00f      	b.n	8004302 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	689a      	ldr	r2, [r3, #8]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80042f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	689a      	ldr	r2, [r3, #8]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004300:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	689a      	ldr	r2, [r3, #8]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f022 0202 	bic.w	r2, r2, #2
 8004310:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	6899      	ldr	r1, [r3, #8]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	7e1b      	ldrb	r3, [r3, #24]
 800431c:	005a      	lsls	r2, r3, #1
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	430a      	orrs	r2, r1
 8004324:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f893 3020 	ldrb.w	r3, [r3, #32]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d01b      	beq.n	8004368 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	685a      	ldr	r2, [r3, #4]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800433e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	685a      	ldr	r2, [r3, #4]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800434e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	6859      	ldr	r1, [r3, #4]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435a:	3b01      	subs	r3, #1
 800435c:	035a      	lsls	r2, r3, #13
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	430a      	orrs	r2, r1
 8004364:	605a      	str	r2, [r3, #4]
 8004366:	e007      	b.n	8004378 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	685a      	ldr	r2, [r3, #4]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004376:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004386:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	69db      	ldr	r3, [r3, #28]
 8004392:	3b01      	subs	r3, #1
 8004394:	051a      	lsls	r2, r3, #20
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	430a      	orrs	r2, r1
 800439c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	689a      	ldr	r2, [r3, #8]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80043ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	6899      	ldr	r1, [r3, #8]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80043ba:	025a      	lsls	r2, r3, #9
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	430a      	orrs	r2, r1
 80043c2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	689a      	ldr	r2, [r3, #8]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	6899      	ldr	r1, [r3, #8]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	029a      	lsls	r2, r3, #10
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	430a      	orrs	r2, r1
 80043e6:	609a      	str	r2, [r3, #8]
}
 80043e8:	bf00      	nop
 80043ea:	3714      	adds	r7, #20
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr
 80043f4:	40012300 	.word	0x40012300
 80043f8:	0f000001 	.word	0x0f000001

080043fc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004404:	bf00      	nop
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004410:	b480      	push	{r7}
 8004412:	b085      	sub	sp, #20
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f003 0307 	and.w	r3, r3, #7
 800441e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004420:	4b0c      	ldr	r3, [pc, #48]	; (8004454 <__NVIC_SetPriorityGrouping+0x44>)
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004426:	68ba      	ldr	r2, [r7, #8]
 8004428:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800442c:	4013      	ands	r3, r2
 800442e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004438:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800443c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004440:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004442:	4a04      	ldr	r2, [pc, #16]	; (8004454 <__NVIC_SetPriorityGrouping+0x44>)
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	60d3      	str	r3, [r2, #12]
}
 8004448:	bf00      	nop
 800444a:	3714      	adds	r7, #20
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr
 8004454:	e000ed00 	.word	0xe000ed00

08004458 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004458:	b480      	push	{r7}
 800445a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800445c:	4b04      	ldr	r3, [pc, #16]	; (8004470 <__NVIC_GetPriorityGrouping+0x18>)
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	0a1b      	lsrs	r3, r3, #8
 8004462:	f003 0307 	and.w	r3, r3, #7
}
 8004466:	4618      	mov	r0, r3
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr
 8004470:	e000ed00 	.word	0xe000ed00

08004474 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	4603      	mov	r3, r0
 800447c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800447e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004482:	2b00      	cmp	r3, #0
 8004484:	db0b      	blt.n	800449e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004486:	79fb      	ldrb	r3, [r7, #7]
 8004488:	f003 021f 	and.w	r2, r3, #31
 800448c:	4907      	ldr	r1, [pc, #28]	; (80044ac <__NVIC_EnableIRQ+0x38>)
 800448e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004492:	095b      	lsrs	r3, r3, #5
 8004494:	2001      	movs	r0, #1
 8004496:	fa00 f202 	lsl.w	r2, r0, r2
 800449a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800449e:	bf00      	nop
 80044a0:	370c      	adds	r7, #12
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	e000e100 	.word	0xe000e100

080044b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	4603      	mov	r3, r0
 80044b8:	6039      	str	r1, [r7, #0]
 80044ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	db0a      	blt.n	80044da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	b2da      	uxtb	r2, r3
 80044c8:	490c      	ldr	r1, [pc, #48]	; (80044fc <__NVIC_SetPriority+0x4c>)
 80044ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ce:	0112      	lsls	r2, r2, #4
 80044d0:	b2d2      	uxtb	r2, r2
 80044d2:	440b      	add	r3, r1
 80044d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80044d8:	e00a      	b.n	80044f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	b2da      	uxtb	r2, r3
 80044de:	4908      	ldr	r1, [pc, #32]	; (8004500 <__NVIC_SetPriority+0x50>)
 80044e0:	79fb      	ldrb	r3, [r7, #7]
 80044e2:	f003 030f 	and.w	r3, r3, #15
 80044e6:	3b04      	subs	r3, #4
 80044e8:	0112      	lsls	r2, r2, #4
 80044ea:	b2d2      	uxtb	r2, r2
 80044ec:	440b      	add	r3, r1
 80044ee:	761a      	strb	r2, [r3, #24]
}
 80044f0:	bf00      	nop
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr
 80044fc:	e000e100 	.word	0xe000e100
 8004500:	e000ed00 	.word	0xe000ed00

08004504 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004504:	b480      	push	{r7}
 8004506:	b089      	sub	sp, #36	; 0x24
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f003 0307 	and.w	r3, r3, #7
 8004516:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	f1c3 0307 	rsb	r3, r3, #7
 800451e:	2b04      	cmp	r3, #4
 8004520:	bf28      	it	cs
 8004522:	2304      	movcs	r3, #4
 8004524:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	3304      	adds	r3, #4
 800452a:	2b06      	cmp	r3, #6
 800452c:	d902      	bls.n	8004534 <NVIC_EncodePriority+0x30>
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	3b03      	subs	r3, #3
 8004532:	e000      	b.n	8004536 <NVIC_EncodePriority+0x32>
 8004534:	2300      	movs	r3, #0
 8004536:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004538:	f04f 32ff 	mov.w	r2, #4294967295
 800453c:	69bb      	ldr	r3, [r7, #24]
 800453e:	fa02 f303 	lsl.w	r3, r2, r3
 8004542:	43da      	mvns	r2, r3
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	401a      	ands	r2, r3
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800454c:	f04f 31ff 	mov.w	r1, #4294967295
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	fa01 f303 	lsl.w	r3, r1, r3
 8004556:	43d9      	mvns	r1, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800455c:	4313      	orrs	r3, r2
         );
}
 800455e:	4618      	mov	r0, r3
 8004560:	3724      	adds	r7, #36	; 0x24
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
	...

0800456c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	3b01      	subs	r3, #1
 8004578:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800457c:	d301      	bcc.n	8004582 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800457e:	2301      	movs	r3, #1
 8004580:	e00f      	b.n	80045a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004582:	4a0a      	ldr	r2, [pc, #40]	; (80045ac <SysTick_Config+0x40>)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	3b01      	subs	r3, #1
 8004588:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800458a:	210f      	movs	r1, #15
 800458c:	f04f 30ff 	mov.w	r0, #4294967295
 8004590:	f7ff ff8e 	bl	80044b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004594:	4b05      	ldr	r3, [pc, #20]	; (80045ac <SysTick_Config+0x40>)
 8004596:	2200      	movs	r2, #0
 8004598:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800459a:	4b04      	ldr	r3, [pc, #16]	; (80045ac <SysTick_Config+0x40>)
 800459c:	2207      	movs	r2, #7
 800459e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3708      	adds	r7, #8
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	e000e010 	.word	0xe000e010

080045b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f7ff ff29 	bl	8004410 <__NVIC_SetPriorityGrouping>
}
 80045be:	bf00      	nop
 80045c0:	3708      	adds	r7, #8
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b086      	sub	sp, #24
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	4603      	mov	r3, r0
 80045ce:	60b9      	str	r1, [r7, #8]
 80045d0:	607a      	str	r2, [r7, #4]
 80045d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80045d4:	2300      	movs	r3, #0
 80045d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80045d8:	f7ff ff3e 	bl	8004458 <__NVIC_GetPriorityGrouping>
 80045dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	68b9      	ldr	r1, [r7, #8]
 80045e2:	6978      	ldr	r0, [r7, #20]
 80045e4:	f7ff ff8e 	bl	8004504 <NVIC_EncodePriority>
 80045e8:	4602      	mov	r2, r0
 80045ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045ee:	4611      	mov	r1, r2
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7ff ff5d 	bl	80044b0 <__NVIC_SetPriority>
}
 80045f6:	bf00      	nop
 80045f8:	3718      	adds	r7, #24
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}

080045fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045fe:	b580      	push	{r7, lr}
 8004600:	b082      	sub	sp, #8
 8004602:	af00      	add	r7, sp, #0
 8004604:	4603      	mov	r3, r0
 8004606:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800460c:	4618      	mov	r0, r3
 800460e:	f7ff ff31 	bl	8004474 <__NVIC_EnableIRQ>
}
 8004612:	bf00      	nop
 8004614:	3708      	adds	r7, #8
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}

0800461a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800461a:	b580      	push	{r7, lr}
 800461c:	b082      	sub	sp, #8
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f7ff ffa2 	bl	800456c <SysTick_Config>
 8004628:	4603      	mov	r3, r0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3708      	adds	r7, #8
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
	...

08004634 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004634:	b480      	push	{r7}
 8004636:	b089      	sub	sp, #36	; 0x24
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800463e:	2300      	movs	r3, #0
 8004640:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004642:	2300      	movs	r3, #0
 8004644:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004646:	2300      	movs	r3, #0
 8004648:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800464a:	2300      	movs	r3, #0
 800464c:	61fb      	str	r3, [r7, #28]
 800464e:	e165      	b.n	800491c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004650:	2201      	movs	r2, #1
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	fa02 f303 	lsl.w	r3, r2, r3
 8004658:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	4013      	ands	r3, r2
 8004662:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	429a      	cmp	r2, r3
 800466a:	f040 8154 	bne.w	8004916 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	f003 0303 	and.w	r3, r3, #3
 8004676:	2b01      	cmp	r3, #1
 8004678:	d005      	beq.n	8004686 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004682:	2b02      	cmp	r3, #2
 8004684:	d130      	bne.n	80046e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	005b      	lsls	r3, r3, #1
 8004690:	2203      	movs	r2, #3
 8004692:	fa02 f303 	lsl.w	r3, r2, r3
 8004696:	43db      	mvns	r3, r3
 8004698:	69ba      	ldr	r2, [r7, #24]
 800469a:	4013      	ands	r3, r2
 800469c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	68da      	ldr	r2, [r3, #12]
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	005b      	lsls	r3, r3, #1
 80046a6:	fa02 f303 	lsl.w	r3, r2, r3
 80046aa:	69ba      	ldr	r2, [r7, #24]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	69ba      	ldr	r2, [r7, #24]
 80046b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80046bc:	2201      	movs	r2, #1
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	fa02 f303 	lsl.w	r3, r2, r3
 80046c4:	43db      	mvns	r3, r3
 80046c6:	69ba      	ldr	r2, [r7, #24]
 80046c8:	4013      	ands	r3, r2
 80046ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	091b      	lsrs	r3, r3, #4
 80046d2:	f003 0201 	and.w	r2, r3, #1
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	fa02 f303 	lsl.w	r3, r2, r3
 80046dc:	69ba      	ldr	r2, [r7, #24]
 80046de:	4313      	orrs	r3, r2
 80046e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	69ba      	ldr	r2, [r7, #24]
 80046e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f003 0303 	and.w	r3, r3, #3
 80046f0:	2b03      	cmp	r3, #3
 80046f2:	d017      	beq.n	8004724 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	005b      	lsls	r3, r3, #1
 80046fe:	2203      	movs	r2, #3
 8004700:	fa02 f303 	lsl.w	r3, r2, r3
 8004704:	43db      	mvns	r3, r3
 8004706:	69ba      	ldr	r2, [r7, #24]
 8004708:	4013      	ands	r3, r2
 800470a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	689a      	ldr	r2, [r3, #8]
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	005b      	lsls	r3, r3, #1
 8004714:	fa02 f303 	lsl.w	r3, r2, r3
 8004718:	69ba      	ldr	r2, [r7, #24]
 800471a:	4313      	orrs	r3, r2
 800471c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	69ba      	ldr	r2, [r7, #24]
 8004722:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	f003 0303 	and.w	r3, r3, #3
 800472c:	2b02      	cmp	r3, #2
 800472e:	d123      	bne.n	8004778 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	08da      	lsrs	r2, r3, #3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	3208      	adds	r2, #8
 8004738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800473c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	f003 0307 	and.w	r3, r3, #7
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	220f      	movs	r2, #15
 8004748:	fa02 f303 	lsl.w	r3, r2, r3
 800474c:	43db      	mvns	r3, r3
 800474e:	69ba      	ldr	r2, [r7, #24]
 8004750:	4013      	ands	r3, r2
 8004752:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	691a      	ldr	r2, [r3, #16]
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	f003 0307 	and.w	r3, r3, #7
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	fa02 f303 	lsl.w	r3, r2, r3
 8004764:	69ba      	ldr	r2, [r7, #24]
 8004766:	4313      	orrs	r3, r2
 8004768:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	08da      	lsrs	r2, r3, #3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	3208      	adds	r2, #8
 8004772:	69b9      	ldr	r1, [r7, #24]
 8004774:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	005b      	lsls	r3, r3, #1
 8004782:	2203      	movs	r2, #3
 8004784:	fa02 f303 	lsl.w	r3, r2, r3
 8004788:	43db      	mvns	r3, r3
 800478a:	69ba      	ldr	r2, [r7, #24]
 800478c:	4013      	ands	r3, r2
 800478e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f003 0203 	and.w	r2, r3, #3
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	005b      	lsls	r3, r3, #1
 800479c:	fa02 f303 	lsl.w	r3, r2, r3
 80047a0:	69ba      	ldr	r2, [r7, #24]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	69ba      	ldr	r2, [r7, #24]
 80047aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f000 80ae 	beq.w	8004916 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047ba:	2300      	movs	r3, #0
 80047bc:	60fb      	str	r3, [r7, #12]
 80047be:	4b5d      	ldr	r3, [pc, #372]	; (8004934 <HAL_GPIO_Init+0x300>)
 80047c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c2:	4a5c      	ldr	r2, [pc, #368]	; (8004934 <HAL_GPIO_Init+0x300>)
 80047c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047c8:	6453      	str	r3, [r2, #68]	; 0x44
 80047ca:	4b5a      	ldr	r3, [pc, #360]	; (8004934 <HAL_GPIO_Init+0x300>)
 80047cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047d2:	60fb      	str	r3, [r7, #12]
 80047d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80047d6:	4a58      	ldr	r2, [pc, #352]	; (8004938 <HAL_GPIO_Init+0x304>)
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	089b      	lsrs	r3, r3, #2
 80047dc:	3302      	adds	r3, #2
 80047de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	f003 0303 	and.w	r3, r3, #3
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	220f      	movs	r2, #15
 80047ee:	fa02 f303 	lsl.w	r3, r2, r3
 80047f2:	43db      	mvns	r3, r3
 80047f4:	69ba      	ldr	r2, [r7, #24]
 80047f6:	4013      	ands	r3, r2
 80047f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a4f      	ldr	r2, [pc, #316]	; (800493c <HAL_GPIO_Init+0x308>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d025      	beq.n	800484e <HAL_GPIO_Init+0x21a>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a4e      	ldr	r2, [pc, #312]	; (8004940 <HAL_GPIO_Init+0x30c>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d01f      	beq.n	800484a <HAL_GPIO_Init+0x216>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a4d      	ldr	r2, [pc, #308]	; (8004944 <HAL_GPIO_Init+0x310>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d019      	beq.n	8004846 <HAL_GPIO_Init+0x212>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a4c      	ldr	r2, [pc, #304]	; (8004948 <HAL_GPIO_Init+0x314>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d013      	beq.n	8004842 <HAL_GPIO_Init+0x20e>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a4b      	ldr	r2, [pc, #300]	; (800494c <HAL_GPIO_Init+0x318>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d00d      	beq.n	800483e <HAL_GPIO_Init+0x20a>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a4a      	ldr	r2, [pc, #296]	; (8004950 <HAL_GPIO_Init+0x31c>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d007      	beq.n	800483a <HAL_GPIO_Init+0x206>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a49      	ldr	r2, [pc, #292]	; (8004954 <HAL_GPIO_Init+0x320>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d101      	bne.n	8004836 <HAL_GPIO_Init+0x202>
 8004832:	2306      	movs	r3, #6
 8004834:	e00c      	b.n	8004850 <HAL_GPIO_Init+0x21c>
 8004836:	2307      	movs	r3, #7
 8004838:	e00a      	b.n	8004850 <HAL_GPIO_Init+0x21c>
 800483a:	2305      	movs	r3, #5
 800483c:	e008      	b.n	8004850 <HAL_GPIO_Init+0x21c>
 800483e:	2304      	movs	r3, #4
 8004840:	e006      	b.n	8004850 <HAL_GPIO_Init+0x21c>
 8004842:	2303      	movs	r3, #3
 8004844:	e004      	b.n	8004850 <HAL_GPIO_Init+0x21c>
 8004846:	2302      	movs	r3, #2
 8004848:	e002      	b.n	8004850 <HAL_GPIO_Init+0x21c>
 800484a:	2301      	movs	r3, #1
 800484c:	e000      	b.n	8004850 <HAL_GPIO_Init+0x21c>
 800484e:	2300      	movs	r3, #0
 8004850:	69fa      	ldr	r2, [r7, #28]
 8004852:	f002 0203 	and.w	r2, r2, #3
 8004856:	0092      	lsls	r2, r2, #2
 8004858:	4093      	lsls	r3, r2
 800485a:	69ba      	ldr	r2, [r7, #24]
 800485c:	4313      	orrs	r3, r2
 800485e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004860:	4935      	ldr	r1, [pc, #212]	; (8004938 <HAL_GPIO_Init+0x304>)
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	089b      	lsrs	r3, r3, #2
 8004866:	3302      	adds	r3, #2
 8004868:	69ba      	ldr	r2, [r7, #24]
 800486a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800486e:	4b3a      	ldr	r3, [pc, #232]	; (8004958 <HAL_GPIO_Init+0x324>)
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	43db      	mvns	r3, r3
 8004878:	69ba      	ldr	r2, [r7, #24]
 800487a:	4013      	ands	r3, r2
 800487c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d003      	beq.n	8004892 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800488a:	69ba      	ldr	r2, [r7, #24]
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	4313      	orrs	r3, r2
 8004890:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004892:	4a31      	ldr	r2, [pc, #196]	; (8004958 <HAL_GPIO_Init+0x324>)
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004898:	4b2f      	ldr	r3, [pc, #188]	; (8004958 <HAL_GPIO_Init+0x324>)
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	43db      	mvns	r3, r3
 80048a2:	69ba      	ldr	r2, [r7, #24]
 80048a4:	4013      	ands	r3, r2
 80048a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d003      	beq.n	80048bc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80048b4:	69ba      	ldr	r2, [r7, #24]
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80048bc:	4a26      	ldr	r2, [pc, #152]	; (8004958 <HAL_GPIO_Init+0x324>)
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80048c2:	4b25      	ldr	r3, [pc, #148]	; (8004958 <HAL_GPIO_Init+0x324>)
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	43db      	mvns	r3, r3
 80048cc:	69ba      	ldr	r2, [r7, #24]
 80048ce:	4013      	ands	r3, r2
 80048d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d003      	beq.n	80048e6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80048de:	69ba      	ldr	r2, [r7, #24]
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80048e6:	4a1c      	ldr	r2, [pc, #112]	; (8004958 <HAL_GPIO_Init+0x324>)
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048ec:	4b1a      	ldr	r3, [pc, #104]	; (8004958 <HAL_GPIO_Init+0x324>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	43db      	mvns	r3, r3
 80048f6:	69ba      	ldr	r2, [r7, #24]
 80048f8:	4013      	ands	r3, r2
 80048fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d003      	beq.n	8004910 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004908:	69ba      	ldr	r2, [r7, #24]
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	4313      	orrs	r3, r2
 800490e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004910:	4a11      	ldr	r2, [pc, #68]	; (8004958 <HAL_GPIO_Init+0x324>)
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	3301      	adds	r3, #1
 800491a:	61fb      	str	r3, [r7, #28]
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	2b0f      	cmp	r3, #15
 8004920:	f67f ae96 	bls.w	8004650 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004924:	bf00      	nop
 8004926:	bf00      	nop
 8004928:	3724      	adds	r7, #36	; 0x24
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	40023800 	.word	0x40023800
 8004938:	40013800 	.word	0x40013800
 800493c:	40020000 	.word	0x40020000
 8004940:	40020400 	.word	0x40020400
 8004944:	40020800 	.word	0x40020800
 8004948:	40020c00 	.word	0x40020c00
 800494c:	40021000 	.word	0x40021000
 8004950:	40021400 	.word	0x40021400
 8004954:	40021800 	.word	0x40021800
 8004958:	40013c00 	.word	0x40013c00

0800495c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800495c:	b480      	push	{r7}
 800495e:	b085      	sub	sp, #20
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	460b      	mov	r3, r1
 8004966:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	691a      	ldr	r2, [r3, #16]
 800496c:	887b      	ldrh	r3, [r7, #2]
 800496e:	4013      	ands	r3, r2
 8004970:	2b00      	cmp	r3, #0
 8004972:	d002      	beq.n	800497a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004974:	2301      	movs	r3, #1
 8004976:	73fb      	strb	r3, [r7, #15]
 8004978:	e001      	b.n	800497e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800497a:	2300      	movs	r3, #0
 800497c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800497e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004980:	4618      	mov	r0, r3
 8004982:	3714      	adds	r7, #20
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	460b      	mov	r3, r1
 8004996:	807b      	strh	r3, [r7, #2]
 8004998:	4613      	mov	r3, r2
 800499a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800499c:	787b      	ldrb	r3, [r7, #1]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d003      	beq.n	80049aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049a2:	887a      	ldrh	r2, [r7, #2]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80049a8:	e003      	b.n	80049b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80049aa:	887b      	ldrh	r3, [r7, #2]
 80049ac:	041a      	lsls	r2, r3, #16
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	619a      	str	r2, [r3, #24]
}
 80049b2:	bf00      	nop
 80049b4:	370c      	adds	r7, #12
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
	...

080049c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	4603      	mov	r3, r0
 80049c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80049ca:	4b08      	ldr	r3, [pc, #32]	; (80049ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80049cc:	695a      	ldr	r2, [r3, #20]
 80049ce:	88fb      	ldrh	r3, [r7, #6]
 80049d0:	4013      	ands	r3, r2
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d006      	beq.n	80049e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80049d6:	4a05      	ldr	r2, [pc, #20]	; (80049ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80049d8:	88fb      	ldrh	r3, [r7, #6]
 80049da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80049dc:	88fb      	ldrh	r3, [r7, #6]
 80049de:	4618      	mov	r0, r3
 80049e0:	f7fc fb1c 	bl	800101c <HAL_GPIO_EXTI_Callback>
  }
}
 80049e4:	bf00      	nop
 80049e6:	3708      	adds	r7, #8
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	40013c00 	.word	0x40013c00

080049f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d101      	bne.n	8004a02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e12b      	b.n	8004c5a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d106      	bne.n	8004a1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f7fe fcfe 	bl	8003418 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2224      	movs	r2, #36	; 0x24
 8004a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f022 0201 	bic.w	r2, r2, #1
 8004a32:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a52:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004a54:	f000 fe88 	bl	8005768 <HAL_RCC_GetPCLK1Freq>
 8004a58:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	4a81      	ldr	r2, [pc, #516]	; (8004c64 <HAL_I2C_Init+0x274>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d807      	bhi.n	8004a74 <HAL_I2C_Init+0x84>
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	4a80      	ldr	r2, [pc, #512]	; (8004c68 <HAL_I2C_Init+0x278>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	bf94      	ite	ls
 8004a6c:	2301      	movls	r3, #1
 8004a6e:	2300      	movhi	r3, #0
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	e006      	b.n	8004a82 <HAL_I2C_Init+0x92>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	4a7d      	ldr	r2, [pc, #500]	; (8004c6c <HAL_I2C_Init+0x27c>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	bf94      	ite	ls
 8004a7c:	2301      	movls	r3, #1
 8004a7e:	2300      	movhi	r3, #0
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d001      	beq.n	8004a8a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e0e7      	b.n	8004c5a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	4a78      	ldr	r2, [pc, #480]	; (8004c70 <HAL_I2C_Init+0x280>)
 8004a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a92:	0c9b      	lsrs	r3, r3, #18
 8004a94:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68ba      	ldr	r2, [r7, #8]
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	6a1b      	ldr	r3, [r3, #32]
 8004ab0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	4a6a      	ldr	r2, [pc, #424]	; (8004c64 <HAL_I2C_Init+0x274>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d802      	bhi.n	8004ac4 <HAL_I2C_Init+0xd4>
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	e009      	b.n	8004ad8 <HAL_I2C_Init+0xe8>
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004aca:	fb02 f303 	mul.w	r3, r2, r3
 8004ace:	4a69      	ldr	r2, [pc, #420]	; (8004c74 <HAL_I2C_Init+0x284>)
 8004ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad4:	099b      	lsrs	r3, r3, #6
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	6812      	ldr	r2, [r2, #0]
 8004adc:	430b      	orrs	r3, r1
 8004ade:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	69db      	ldr	r3, [r3, #28]
 8004ae6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004aea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	495c      	ldr	r1, [pc, #368]	; (8004c64 <HAL_I2C_Init+0x274>)
 8004af4:	428b      	cmp	r3, r1
 8004af6:	d819      	bhi.n	8004b2c <HAL_I2C_Init+0x13c>
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	1e59      	subs	r1, r3, #1
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	005b      	lsls	r3, r3, #1
 8004b02:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b06:	1c59      	adds	r1, r3, #1
 8004b08:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004b0c:	400b      	ands	r3, r1
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00a      	beq.n	8004b28 <HAL_I2C_Init+0x138>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	1e59      	subs	r1, r3, #1
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	005b      	lsls	r3, r3, #1
 8004b1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b20:	3301      	adds	r3, #1
 8004b22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b26:	e051      	b.n	8004bcc <HAL_I2C_Init+0x1dc>
 8004b28:	2304      	movs	r3, #4
 8004b2a:	e04f      	b.n	8004bcc <HAL_I2C_Init+0x1dc>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d111      	bne.n	8004b58 <HAL_I2C_Init+0x168>
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	1e58      	subs	r0, r3, #1
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6859      	ldr	r1, [r3, #4]
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	005b      	lsls	r3, r3, #1
 8004b40:	440b      	add	r3, r1
 8004b42:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b46:	3301      	adds	r3, #1
 8004b48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	bf0c      	ite	eq
 8004b50:	2301      	moveq	r3, #1
 8004b52:	2300      	movne	r3, #0
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	e012      	b.n	8004b7e <HAL_I2C_Init+0x18e>
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	1e58      	subs	r0, r3, #1
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6859      	ldr	r1, [r3, #4]
 8004b60:	460b      	mov	r3, r1
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	440b      	add	r3, r1
 8004b66:	0099      	lsls	r1, r3, #2
 8004b68:	440b      	add	r3, r1
 8004b6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b6e:	3301      	adds	r3, #1
 8004b70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	bf0c      	ite	eq
 8004b78:	2301      	moveq	r3, #1
 8004b7a:	2300      	movne	r3, #0
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d001      	beq.n	8004b86 <HAL_I2C_Init+0x196>
 8004b82:	2301      	movs	r3, #1
 8004b84:	e022      	b.n	8004bcc <HAL_I2C_Init+0x1dc>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d10e      	bne.n	8004bac <HAL_I2C_Init+0x1bc>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	1e58      	subs	r0, r3, #1
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6859      	ldr	r1, [r3, #4]
 8004b96:	460b      	mov	r3, r1
 8004b98:	005b      	lsls	r3, r3, #1
 8004b9a:	440b      	add	r3, r1
 8004b9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ba6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004baa:	e00f      	b.n	8004bcc <HAL_I2C_Init+0x1dc>
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	1e58      	subs	r0, r3, #1
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6859      	ldr	r1, [r3, #4]
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	440b      	add	r3, r1
 8004bba:	0099      	lsls	r1, r3, #2
 8004bbc:	440b      	add	r3, r1
 8004bbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bc8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bcc:	6879      	ldr	r1, [r7, #4]
 8004bce:	6809      	ldr	r1, [r1, #0]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	69da      	ldr	r2, [r3, #28]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a1b      	ldr	r3, [r3, #32]
 8004be6:	431a      	orrs	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	430a      	orrs	r2, r1
 8004bee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004bfa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	6911      	ldr	r1, [r2, #16]
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	68d2      	ldr	r2, [r2, #12]
 8004c06:	4311      	orrs	r1, r2
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	6812      	ldr	r2, [r2, #0]
 8004c0c:	430b      	orrs	r3, r1
 8004c0e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	695a      	ldr	r2, [r3, #20]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	699b      	ldr	r3, [r3, #24]
 8004c22:	431a      	orrs	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	430a      	orrs	r2, r1
 8004c2a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f042 0201 	orr.w	r2, r2, #1
 8004c3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2220      	movs	r2, #32
 8004c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3710      	adds	r7, #16
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	000186a0 	.word	0x000186a0
 8004c68:	001e847f 	.word	0x001e847f
 8004c6c:	003d08ff 	.word	0x003d08ff
 8004c70:	431bde83 	.word	0x431bde83
 8004c74:	10624dd3 	.word	0x10624dd3

08004c78 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b088      	sub	sp, #32
 8004c7c:	af02      	add	r7, sp, #8
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	607a      	str	r2, [r7, #4]
 8004c82:	461a      	mov	r2, r3
 8004c84:	460b      	mov	r3, r1
 8004c86:	817b      	strh	r3, [r7, #10]
 8004c88:	4613      	mov	r3, r2
 8004c8a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c8c:	f7fe ff04 	bl	8003a98 <HAL_GetTick>
 8004c90:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	2b20      	cmp	r3, #32
 8004c9c:	f040 80e0 	bne.w	8004e60 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	9300      	str	r3, [sp, #0]
 8004ca4:	2319      	movs	r3, #25
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	4970      	ldr	r1, [pc, #448]	; (8004e6c <HAL_I2C_Master_Transmit+0x1f4>)
 8004caa:	68f8      	ldr	r0, [r7, #12]
 8004cac:	f000 fa92 	bl	80051d4 <I2C_WaitOnFlagUntilTimeout>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d001      	beq.n	8004cba <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004cb6:	2302      	movs	r3, #2
 8004cb8:	e0d3      	b.n	8004e62 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d101      	bne.n	8004cc8 <HAL_I2C_Master_Transmit+0x50>
 8004cc4:	2302      	movs	r3, #2
 8004cc6:	e0cc      	b.n	8004e62 <HAL_I2C_Master_Transmit+0x1ea>
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0301 	and.w	r3, r3, #1
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d007      	beq.n	8004cee <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f042 0201 	orr.w	r2, r2, #1
 8004cec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cfc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2221      	movs	r2, #33	; 0x21
 8004d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2210      	movs	r2, #16
 8004d0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	893a      	ldrh	r2, [r7, #8]
 8004d1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d24:	b29a      	uxth	r2, r3
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	4a50      	ldr	r2, [pc, #320]	; (8004e70 <HAL_I2C_Master_Transmit+0x1f8>)
 8004d2e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004d30:	8979      	ldrh	r1, [r7, #10]
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	6a3a      	ldr	r2, [r7, #32]
 8004d36:	68f8      	ldr	r0, [r7, #12]
 8004d38:	f000 f9ca 	bl	80050d0 <I2C_MasterRequestWrite>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d001      	beq.n	8004d46 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e08d      	b.n	8004e62 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d46:	2300      	movs	r3, #0
 8004d48:	613b      	str	r3, [r7, #16]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	695b      	ldr	r3, [r3, #20]
 8004d50:	613b      	str	r3, [r7, #16]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	699b      	ldr	r3, [r3, #24]
 8004d58:	613b      	str	r3, [r7, #16]
 8004d5a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004d5c:	e066      	b.n	8004e2c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	6a39      	ldr	r1, [r7, #32]
 8004d62:	68f8      	ldr	r0, [r7, #12]
 8004d64:	f000 fb0c 	bl	8005380 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00d      	beq.n	8004d8a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d72:	2b04      	cmp	r3, #4
 8004d74:	d107      	bne.n	8004d86 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d84:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e06b      	b.n	8004e62 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8e:	781a      	ldrb	r2, [r3, #0]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9a:	1c5a      	adds	r2, r3, #1
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	3b01      	subs	r3, #1
 8004da8:	b29a      	uxth	r2, r3
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004db2:	3b01      	subs	r3, #1
 8004db4:	b29a      	uxth	r2, r3
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	695b      	ldr	r3, [r3, #20]
 8004dc0:	f003 0304 	and.w	r3, r3, #4
 8004dc4:	2b04      	cmp	r3, #4
 8004dc6:	d11b      	bne.n	8004e00 <HAL_I2C_Master_Transmit+0x188>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d017      	beq.n	8004e00 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd4:	781a      	ldrb	r2, [r3, #0]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de0:	1c5a      	adds	r2, r3, #1
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	3b01      	subs	r3, #1
 8004dee:	b29a      	uxth	r2, r3
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	b29a      	uxth	r2, r3
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e00:	697a      	ldr	r2, [r7, #20]
 8004e02:	6a39      	ldr	r1, [r7, #32]
 8004e04:	68f8      	ldr	r0, [r7, #12]
 8004e06:	f000 fafc 	bl	8005402 <I2C_WaitOnBTFFlagUntilTimeout>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d00d      	beq.n	8004e2c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e14:	2b04      	cmp	r3, #4
 8004e16:	d107      	bne.n	8004e28 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e26:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e01a      	b.n	8004e62 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d194      	bne.n	8004d5e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2220      	movs	r2, #32
 8004e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	e000      	b.n	8004e62 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004e60:	2302      	movs	r3, #2
  }
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3718      	adds	r7, #24
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	00100002 	.word	0x00100002
 8004e70:	ffff0000 	.word	0xffff0000

08004e74 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b08a      	sub	sp, #40	; 0x28
 8004e78:	af02      	add	r7, sp, #8
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	607a      	str	r2, [r7, #4]
 8004e7e:	603b      	str	r3, [r7, #0]
 8004e80:	460b      	mov	r3, r1
 8004e82:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004e84:	f7fe fe08 	bl	8003a98 <HAL_GetTick>
 8004e88:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	2b20      	cmp	r3, #32
 8004e98:	f040 8111 	bne.w	80050be <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	9300      	str	r3, [sp, #0]
 8004ea0:	2319      	movs	r3, #25
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	4988      	ldr	r1, [pc, #544]	; (80050c8 <HAL_I2C_IsDeviceReady+0x254>)
 8004ea6:	68f8      	ldr	r0, [r7, #12]
 8004ea8:	f000 f994 	bl	80051d4 <I2C_WaitOnFlagUntilTimeout>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d001      	beq.n	8004eb6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004eb2:	2302      	movs	r3, #2
 8004eb4:	e104      	b.n	80050c0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d101      	bne.n	8004ec4 <HAL_I2C_IsDeviceReady+0x50>
 8004ec0:	2302      	movs	r3, #2
 8004ec2:	e0fd      	b.n	80050c0 <HAL_I2C_IsDeviceReady+0x24c>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 0301 	and.w	r3, r3, #1
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d007      	beq.n	8004eea <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f042 0201 	orr.w	r2, r2, #1
 8004ee8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ef8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2224      	movs	r2, #36	; 0x24
 8004efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2200      	movs	r2, #0
 8004f06:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	4a70      	ldr	r2, [pc, #448]	; (80050cc <HAL_I2C_IsDeviceReady+0x258>)
 8004f0c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f1c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	9300      	str	r3, [sp, #0]
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f2a:	68f8      	ldr	r0, [r7, #12]
 8004f2c:	f000 f952 	bl	80051d4 <I2C_WaitOnFlagUntilTimeout>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00d      	beq.n	8004f52 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f44:	d103      	bne.n	8004f4e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f4c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e0b6      	b.n	80050c0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f52:	897b      	ldrh	r3, [r7, #10]
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	461a      	mov	r2, r3
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f60:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004f62:	f7fe fd99 	bl	8003a98 <HAL_GetTick>
 8004f66:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	695b      	ldr	r3, [r3, #20]
 8004f6e:	f003 0302 	and.w	r3, r3, #2
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	bf0c      	ite	eq
 8004f76:	2301      	moveq	r3, #1
 8004f78:	2300      	movne	r3, #0
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	695b      	ldr	r3, [r3, #20]
 8004f84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f8c:	bf0c      	ite	eq
 8004f8e:	2301      	moveq	r3, #1
 8004f90:	2300      	movne	r3, #0
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004f96:	e025      	b.n	8004fe4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004f98:	f7fe fd7e 	bl	8003a98 <HAL_GetTick>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	683a      	ldr	r2, [r7, #0]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d302      	bcc.n	8004fae <HAL_I2C_IsDeviceReady+0x13a>
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d103      	bne.n	8004fb6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	22a0      	movs	r2, #160	; 0xa0
 8004fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	695b      	ldr	r3, [r3, #20]
 8004fbc:	f003 0302 	and.w	r3, r3, #2
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	bf0c      	ite	eq
 8004fc4:	2301      	moveq	r3, #1
 8004fc6:	2300      	movne	r3, #0
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	695b      	ldr	r3, [r3, #20]
 8004fd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fda:	bf0c      	ite	eq
 8004fdc:	2301      	moveq	r3, #1
 8004fde:	2300      	movne	r3, #0
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	2ba0      	cmp	r3, #160	; 0xa0
 8004fee:	d005      	beq.n	8004ffc <HAL_I2C_IsDeviceReady+0x188>
 8004ff0:	7dfb      	ldrb	r3, [r7, #23]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d102      	bne.n	8004ffc <HAL_I2C_IsDeviceReady+0x188>
 8004ff6:	7dbb      	ldrb	r3, [r7, #22]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d0cd      	beq.n	8004f98 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2220      	movs	r2, #32
 8005000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	695b      	ldr	r3, [r3, #20]
 800500a:	f003 0302 	and.w	r3, r3, #2
 800500e:	2b02      	cmp	r3, #2
 8005010:	d129      	bne.n	8005066 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005020:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005022:	2300      	movs	r3, #0
 8005024:	613b      	str	r3, [r7, #16]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	695b      	ldr	r3, [r3, #20]
 800502c:	613b      	str	r3, [r7, #16]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	699b      	ldr	r3, [r3, #24]
 8005034:	613b      	str	r3, [r7, #16]
 8005036:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	9300      	str	r3, [sp, #0]
 800503c:	2319      	movs	r3, #25
 800503e:	2201      	movs	r2, #1
 8005040:	4921      	ldr	r1, [pc, #132]	; (80050c8 <HAL_I2C_IsDeviceReady+0x254>)
 8005042:	68f8      	ldr	r0, [r7, #12]
 8005044:	f000 f8c6 	bl	80051d4 <I2C_WaitOnFlagUntilTimeout>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d001      	beq.n	8005052 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e036      	b.n	80050c0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2220      	movs	r2, #32
 8005056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2200      	movs	r2, #0
 800505e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005062:	2300      	movs	r3, #0
 8005064:	e02c      	b.n	80050c0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005074:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800507e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	9300      	str	r3, [sp, #0]
 8005084:	2319      	movs	r3, #25
 8005086:	2201      	movs	r2, #1
 8005088:	490f      	ldr	r1, [pc, #60]	; (80050c8 <HAL_I2C_IsDeviceReady+0x254>)
 800508a:	68f8      	ldr	r0, [r7, #12]
 800508c:	f000 f8a2 	bl	80051d4 <I2C_WaitOnFlagUntilTimeout>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d001      	beq.n	800509a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e012      	b.n	80050c0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	3301      	adds	r3, #1
 800509e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80050a0:	69ba      	ldr	r2, [r7, #24]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	f4ff af32 	bcc.w	8004f0e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2220      	movs	r2, #32
 80050ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e000      	b.n	80050c0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80050be:	2302      	movs	r3, #2
  }
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3720      	adds	r7, #32
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	00100002 	.word	0x00100002
 80050cc:	ffff0000 	.word	0xffff0000

080050d0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b088      	sub	sp, #32
 80050d4:	af02      	add	r7, sp, #8
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	607a      	str	r2, [r7, #4]
 80050da:	603b      	str	r3, [r7, #0]
 80050dc:	460b      	mov	r3, r1
 80050de:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	2b08      	cmp	r3, #8
 80050ea:	d006      	beq.n	80050fa <I2C_MasterRequestWrite+0x2a>
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d003      	beq.n	80050fa <I2C_MasterRequestWrite+0x2a>
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80050f8:	d108      	bne.n	800510c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005108:	601a      	str	r2, [r3, #0]
 800510a:	e00b      	b.n	8005124 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005110:	2b12      	cmp	r3, #18
 8005112:	d107      	bne.n	8005124 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005122:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	9300      	str	r3, [sp, #0]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005130:	68f8      	ldr	r0, [r7, #12]
 8005132:	f000 f84f 	bl	80051d4 <I2C_WaitOnFlagUntilTimeout>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00d      	beq.n	8005158 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005146:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800514a:	d103      	bne.n	8005154 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005152:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005154:	2303      	movs	r3, #3
 8005156:	e035      	b.n	80051c4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	691b      	ldr	r3, [r3, #16]
 800515c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005160:	d108      	bne.n	8005174 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005162:	897b      	ldrh	r3, [r7, #10]
 8005164:	b2db      	uxtb	r3, r3
 8005166:	461a      	mov	r2, r3
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005170:	611a      	str	r2, [r3, #16]
 8005172:	e01b      	b.n	80051ac <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005174:	897b      	ldrh	r3, [r7, #10]
 8005176:	11db      	asrs	r3, r3, #7
 8005178:	b2db      	uxtb	r3, r3
 800517a:	f003 0306 	and.w	r3, r3, #6
 800517e:	b2db      	uxtb	r3, r3
 8005180:	f063 030f 	orn	r3, r3, #15
 8005184:	b2da      	uxtb	r2, r3
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	490e      	ldr	r1, [pc, #56]	; (80051cc <I2C_MasterRequestWrite+0xfc>)
 8005192:	68f8      	ldr	r0, [r7, #12]
 8005194:	f000 f875 	bl	8005282 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d001      	beq.n	80051a2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e010      	b.n	80051c4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80051a2:	897b      	ldrh	r3, [r7, #10]
 80051a4:	b2da      	uxtb	r2, r3
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	4907      	ldr	r1, [pc, #28]	; (80051d0 <I2C_MasterRequestWrite+0x100>)
 80051b2:	68f8      	ldr	r0, [r7, #12]
 80051b4:	f000 f865 	bl	8005282 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d001      	beq.n	80051c2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e000      	b.n	80051c4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80051c2:	2300      	movs	r3, #0
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3718      	adds	r7, #24
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}
 80051cc:	00010008 	.word	0x00010008
 80051d0:	00010002 	.word	0x00010002

080051d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	603b      	str	r3, [r7, #0]
 80051e0:	4613      	mov	r3, r2
 80051e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051e4:	e025      	b.n	8005232 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ec:	d021      	beq.n	8005232 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051ee:	f7fe fc53 	bl	8003a98 <HAL_GetTick>
 80051f2:	4602      	mov	r2, r0
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	683a      	ldr	r2, [r7, #0]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d302      	bcc.n	8005204 <I2C_WaitOnFlagUntilTimeout+0x30>
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d116      	bne.n	8005232 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2200      	movs	r2, #0
 8005208:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2220      	movs	r2, #32
 800520e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2200      	movs	r2, #0
 8005216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521e:	f043 0220 	orr.w	r2, r3, #32
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e023      	b.n	800527a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	0c1b      	lsrs	r3, r3, #16
 8005236:	b2db      	uxtb	r3, r3
 8005238:	2b01      	cmp	r3, #1
 800523a:	d10d      	bne.n	8005258 <I2C_WaitOnFlagUntilTimeout+0x84>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	695b      	ldr	r3, [r3, #20]
 8005242:	43da      	mvns	r2, r3
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	4013      	ands	r3, r2
 8005248:	b29b      	uxth	r3, r3
 800524a:	2b00      	cmp	r3, #0
 800524c:	bf0c      	ite	eq
 800524e:	2301      	moveq	r3, #1
 8005250:	2300      	movne	r3, #0
 8005252:	b2db      	uxtb	r3, r3
 8005254:	461a      	mov	r2, r3
 8005256:	e00c      	b.n	8005272 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	43da      	mvns	r2, r3
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	4013      	ands	r3, r2
 8005264:	b29b      	uxth	r3, r3
 8005266:	2b00      	cmp	r3, #0
 8005268:	bf0c      	ite	eq
 800526a:	2301      	moveq	r3, #1
 800526c:	2300      	movne	r3, #0
 800526e:	b2db      	uxtb	r3, r3
 8005270:	461a      	mov	r2, r3
 8005272:	79fb      	ldrb	r3, [r7, #7]
 8005274:	429a      	cmp	r2, r3
 8005276:	d0b6      	beq.n	80051e6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3710      	adds	r7, #16
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005282:	b580      	push	{r7, lr}
 8005284:	b084      	sub	sp, #16
 8005286:	af00      	add	r7, sp, #0
 8005288:	60f8      	str	r0, [r7, #12]
 800528a:	60b9      	str	r1, [r7, #8]
 800528c:	607a      	str	r2, [r7, #4]
 800528e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005290:	e051      	b.n	8005336 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	695b      	ldr	r3, [r3, #20]
 8005298:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800529c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052a0:	d123      	bne.n	80052ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052b0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80052ba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2200      	movs	r2, #0
 80052c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2220      	movs	r2, #32
 80052c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d6:	f043 0204 	orr.w	r2, r3, #4
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e046      	b.n	8005378 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f0:	d021      	beq.n	8005336 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052f2:	f7fe fbd1 	bl	8003a98 <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	429a      	cmp	r2, r3
 8005300:	d302      	bcc.n	8005308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d116      	bne.n	8005336 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2200      	movs	r2, #0
 800530c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2220      	movs	r2, #32
 8005312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2200      	movs	r2, #0
 800531a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005322:	f043 0220 	orr.w	r2, r3, #32
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2200      	movs	r2, #0
 800532e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e020      	b.n	8005378 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	0c1b      	lsrs	r3, r3, #16
 800533a:	b2db      	uxtb	r3, r3
 800533c:	2b01      	cmp	r3, #1
 800533e:	d10c      	bne.n	800535a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	695b      	ldr	r3, [r3, #20]
 8005346:	43da      	mvns	r2, r3
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	4013      	ands	r3, r2
 800534c:	b29b      	uxth	r3, r3
 800534e:	2b00      	cmp	r3, #0
 8005350:	bf14      	ite	ne
 8005352:	2301      	movne	r3, #1
 8005354:	2300      	moveq	r3, #0
 8005356:	b2db      	uxtb	r3, r3
 8005358:	e00b      	b.n	8005372 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	699b      	ldr	r3, [r3, #24]
 8005360:	43da      	mvns	r2, r3
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	4013      	ands	r3, r2
 8005366:	b29b      	uxth	r3, r3
 8005368:	2b00      	cmp	r3, #0
 800536a:	bf14      	ite	ne
 800536c:	2301      	movne	r3, #1
 800536e:	2300      	moveq	r3, #0
 8005370:	b2db      	uxtb	r3, r3
 8005372:	2b00      	cmp	r3, #0
 8005374:	d18d      	bne.n	8005292 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3710      	adds	r7, #16
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800538c:	e02d      	b.n	80053ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800538e:	68f8      	ldr	r0, [r7, #12]
 8005390:	f000 f878 	bl	8005484 <I2C_IsAcknowledgeFailed>
 8005394:	4603      	mov	r3, r0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d001      	beq.n	800539e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e02d      	b.n	80053fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053a4:	d021      	beq.n	80053ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053a6:	f7fe fb77 	bl	8003a98 <HAL_GetTick>
 80053aa:	4602      	mov	r2, r0
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	68ba      	ldr	r2, [r7, #8]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d302      	bcc.n	80053bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d116      	bne.n	80053ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2200      	movs	r2, #0
 80053c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2220      	movs	r2, #32
 80053c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d6:	f043 0220 	orr.w	r2, r3, #32
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e007      	b.n	80053fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	695b      	ldr	r3, [r3, #20]
 80053f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053f4:	2b80      	cmp	r3, #128	; 0x80
 80053f6:	d1ca      	bne.n	800538e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3710      	adds	r7, #16
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}

08005402 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005402:	b580      	push	{r7, lr}
 8005404:	b084      	sub	sp, #16
 8005406:	af00      	add	r7, sp, #0
 8005408:	60f8      	str	r0, [r7, #12]
 800540a:	60b9      	str	r1, [r7, #8]
 800540c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800540e:	e02d      	b.n	800546c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005410:	68f8      	ldr	r0, [r7, #12]
 8005412:	f000 f837 	bl	8005484 <I2C_IsAcknowledgeFailed>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d001      	beq.n	8005420 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e02d      	b.n	800547c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005426:	d021      	beq.n	800546c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005428:	f7fe fb36 	bl	8003a98 <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	68ba      	ldr	r2, [r7, #8]
 8005434:	429a      	cmp	r2, r3
 8005436:	d302      	bcc.n	800543e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d116      	bne.n	800546c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2200      	movs	r2, #0
 8005442:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2220      	movs	r2, #32
 8005448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005458:	f043 0220 	orr.w	r2, r3, #32
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2200      	movs	r2, #0
 8005464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e007      	b.n	800547c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	695b      	ldr	r3, [r3, #20]
 8005472:	f003 0304 	and.w	r3, r3, #4
 8005476:	2b04      	cmp	r3, #4
 8005478:	d1ca      	bne.n	8005410 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	3710      	adds	r7, #16
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	695b      	ldr	r3, [r3, #20]
 8005492:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005496:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800549a:	d11b      	bne.n	80054d4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80054a4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2220      	movs	r2, #32
 80054b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c0:	f043 0204 	orr.w	r2, r3, #4
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	e000      	b.n	80054d6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	370c      	adds	r7, #12
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr
	...

080054e4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b082      	sub	sp, #8
 80054e8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80054ea:	2300      	movs	r3, #0
 80054ec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80054ee:	2300      	movs	r3, #0
 80054f0:	603b      	str	r3, [r7, #0]
 80054f2:	4b20      	ldr	r3, [pc, #128]	; (8005574 <HAL_PWREx_EnableOverDrive+0x90>)
 80054f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f6:	4a1f      	ldr	r2, [pc, #124]	; (8005574 <HAL_PWREx_EnableOverDrive+0x90>)
 80054f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054fc:	6413      	str	r3, [r2, #64]	; 0x40
 80054fe:	4b1d      	ldr	r3, [pc, #116]	; (8005574 <HAL_PWREx_EnableOverDrive+0x90>)
 8005500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005506:	603b      	str	r3, [r7, #0]
 8005508:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800550a:	4b1b      	ldr	r3, [pc, #108]	; (8005578 <HAL_PWREx_EnableOverDrive+0x94>)
 800550c:	2201      	movs	r2, #1
 800550e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005510:	f7fe fac2 	bl	8003a98 <HAL_GetTick>
 8005514:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005516:	e009      	b.n	800552c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005518:	f7fe fabe 	bl	8003a98 <HAL_GetTick>
 800551c:	4602      	mov	r2, r0
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005526:	d901      	bls.n	800552c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005528:	2303      	movs	r3, #3
 800552a:	e01f      	b.n	800556c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800552c:	4b13      	ldr	r3, [pc, #76]	; (800557c <HAL_PWREx_EnableOverDrive+0x98>)
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005538:	d1ee      	bne.n	8005518 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800553a:	4b11      	ldr	r3, [pc, #68]	; (8005580 <HAL_PWREx_EnableOverDrive+0x9c>)
 800553c:	2201      	movs	r2, #1
 800553e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005540:	f7fe faaa 	bl	8003a98 <HAL_GetTick>
 8005544:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005546:	e009      	b.n	800555c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005548:	f7fe faa6 	bl	8003a98 <HAL_GetTick>
 800554c:	4602      	mov	r2, r0
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005556:	d901      	bls.n	800555c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005558:	2303      	movs	r3, #3
 800555a:	e007      	b.n	800556c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800555c:	4b07      	ldr	r3, [pc, #28]	; (800557c <HAL_PWREx_EnableOverDrive+0x98>)
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005564:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005568:	d1ee      	bne.n	8005548 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800556a:	2300      	movs	r3, #0
}
 800556c:	4618      	mov	r0, r3
 800556e:	3708      	adds	r7, #8
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}
 8005574:	40023800 	.word	0x40023800
 8005578:	420e0040 	.word	0x420e0040
 800557c:	40007000 	.word	0x40007000
 8005580:	420e0044 	.word	0x420e0044

08005584 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d101      	bne.n	8005598 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e0cc      	b.n	8005732 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005598:	4b68      	ldr	r3, [pc, #416]	; (800573c <HAL_RCC_ClockConfig+0x1b8>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 030f 	and.w	r3, r3, #15
 80055a0:	683a      	ldr	r2, [r7, #0]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d90c      	bls.n	80055c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055a6:	4b65      	ldr	r3, [pc, #404]	; (800573c <HAL_RCC_ClockConfig+0x1b8>)
 80055a8:	683a      	ldr	r2, [r7, #0]
 80055aa:	b2d2      	uxtb	r2, r2
 80055ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055ae:	4b63      	ldr	r3, [pc, #396]	; (800573c <HAL_RCC_ClockConfig+0x1b8>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 030f 	and.w	r3, r3, #15
 80055b6:	683a      	ldr	r2, [r7, #0]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d001      	beq.n	80055c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e0b8      	b.n	8005732 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 0302 	and.w	r3, r3, #2
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d020      	beq.n	800560e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0304 	and.w	r3, r3, #4
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d005      	beq.n	80055e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055d8:	4b59      	ldr	r3, [pc, #356]	; (8005740 <HAL_RCC_ClockConfig+0x1bc>)
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	4a58      	ldr	r2, [pc, #352]	; (8005740 <HAL_RCC_ClockConfig+0x1bc>)
 80055de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80055e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0308 	and.w	r3, r3, #8
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d005      	beq.n	80055fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055f0:	4b53      	ldr	r3, [pc, #332]	; (8005740 <HAL_RCC_ClockConfig+0x1bc>)
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	4a52      	ldr	r2, [pc, #328]	; (8005740 <HAL_RCC_ClockConfig+0x1bc>)
 80055f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80055fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055fc:	4b50      	ldr	r3, [pc, #320]	; (8005740 <HAL_RCC_ClockConfig+0x1bc>)
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	494d      	ldr	r1, [pc, #308]	; (8005740 <HAL_RCC_ClockConfig+0x1bc>)
 800560a:	4313      	orrs	r3, r2
 800560c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0301 	and.w	r3, r3, #1
 8005616:	2b00      	cmp	r3, #0
 8005618:	d044      	beq.n	80056a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	2b01      	cmp	r3, #1
 8005620:	d107      	bne.n	8005632 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005622:	4b47      	ldr	r3, [pc, #284]	; (8005740 <HAL_RCC_ClockConfig+0x1bc>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800562a:	2b00      	cmp	r3, #0
 800562c:	d119      	bne.n	8005662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e07f      	b.n	8005732 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	2b02      	cmp	r3, #2
 8005638:	d003      	beq.n	8005642 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800563e:	2b03      	cmp	r3, #3
 8005640:	d107      	bne.n	8005652 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005642:	4b3f      	ldr	r3, [pc, #252]	; (8005740 <HAL_RCC_ClockConfig+0x1bc>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d109      	bne.n	8005662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e06f      	b.n	8005732 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005652:	4b3b      	ldr	r3, [pc, #236]	; (8005740 <HAL_RCC_ClockConfig+0x1bc>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 0302 	and.w	r3, r3, #2
 800565a:	2b00      	cmp	r3, #0
 800565c:	d101      	bne.n	8005662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e067      	b.n	8005732 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005662:	4b37      	ldr	r3, [pc, #220]	; (8005740 <HAL_RCC_ClockConfig+0x1bc>)
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	f023 0203 	bic.w	r2, r3, #3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	4934      	ldr	r1, [pc, #208]	; (8005740 <HAL_RCC_ClockConfig+0x1bc>)
 8005670:	4313      	orrs	r3, r2
 8005672:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005674:	f7fe fa10 	bl	8003a98 <HAL_GetTick>
 8005678:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800567a:	e00a      	b.n	8005692 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800567c:	f7fe fa0c 	bl	8003a98 <HAL_GetTick>
 8005680:	4602      	mov	r2, r0
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	f241 3288 	movw	r2, #5000	; 0x1388
 800568a:	4293      	cmp	r3, r2
 800568c:	d901      	bls.n	8005692 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	e04f      	b.n	8005732 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005692:	4b2b      	ldr	r3, [pc, #172]	; (8005740 <HAL_RCC_ClockConfig+0x1bc>)
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	f003 020c 	and.w	r2, r3, #12
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d1eb      	bne.n	800567c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80056a4:	4b25      	ldr	r3, [pc, #148]	; (800573c <HAL_RCC_ClockConfig+0x1b8>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 030f 	and.w	r3, r3, #15
 80056ac:	683a      	ldr	r2, [r7, #0]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d20c      	bcs.n	80056cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056b2:	4b22      	ldr	r3, [pc, #136]	; (800573c <HAL_RCC_ClockConfig+0x1b8>)
 80056b4:	683a      	ldr	r2, [r7, #0]
 80056b6:	b2d2      	uxtb	r2, r2
 80056b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056ba:	4b20      	ldr	r3, [pc, #128]	; (800573c <HAL_RCC_ClockConfig+0x1b8>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 030f 	and.w	r3, r3, #15
 80056c2:	683a      	ldr	r2, [r7, #0]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d001      	beq.n	80056cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e032      	b.n	8005732 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 0304 	and.w	r3, r3, #4
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d008      	beq.n	80056ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056d8:	4b19      	ldr	r3, [pc, #100]	; (8005740 <HAL_RCC_ClockConfig+0x1bc>)
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	4916      	ldr	r1, [pc, #88]	; (8005740 <HAL_RCC_ClockConfig+0x1bc>)
 80056e6:	4313      	orrs	r3, r2
 80056e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 0308 	and.w	r3, r3, #8
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d009      	beq.n	800570a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056f6:	4b12      	ldr	r3, [pc, #72]	; (8005740 <HAL_RCC_ClockConfig+0x1bc>)
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	00db      	lsls	r3, r3, #3
 8005704:	490e      	ldr	r1, [pc, #56]	; (8005740 <HAL_RCC_ClockConfig+0x1bc>)
 8005706:	4313      	orrs	r3, r2
 8005708:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800570a:	f000 f855 	bl	80057b8 <HAL_RCC_GetSysClockFreq>
 800570e:	4602      	mov	r2, r0
 8005710:	4b0b      	ldr	r3, [pc, #44]	; (8005740 <HAL_RCC_ClockConfig+0x1bc>)
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	091b      	lsrs	r3, r3, #4
 8005716:	f003 030f 	and.w	r3, r3, #15
 800571a:	490a      	ldr	r1, [pc, #40]	; (8005744 <HAL_RCC_ClockConfig+0x1c0>)
 800571c:	5ccb      	ldrb	r3, [r1, r3]
 800571e:	fa22 f303 	lsr.w	r3, r2, r3
 8005722:	4a09      	ldr	r2, [pc, #36]	; (8005748 <HAL_RCC_ClockConfig+0x1c4>)
 8005724:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005726:	4b09      	ldr	r3, [pc, #36]	; (800574c <HAL_RCC_ClockConfig+0x1c8>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4618      	mov	r0, r3
 800572c:	f7fe f970 	bl	8003a10 <HAL_InitTick>

  return HAL_OK;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3710      	adds	r7, #16
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	40023c00 	.word	0x40023c00
 8005740:	40023800 	.word	0x40023800
 8005744:	0800bf3c 	.word	0x0800bf3c
 8005748:	20000010 	.word	0x20000010
 800574c:	20000014 	.word	0x20000014

08005750 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005750:	b480      	push	{r7}
 8005752:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005754:	4b03      	ldr	r3, [pc, #12]	; (8005764 <HAL_RCC_GetHCLKFreq+0x14>)
 8005756:	681b      	ldr	r3, [r3, #0]
}
 8005758:	4618      	mov	r0, r3
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr
 8005762:	bf00      	nop
 8005764:	20000010 	.word	0x20000010

08005768 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800576c:	f7ff fff0 	bl	8005750 <HAL_RCC_GetHCLKFreq>
 8005770:	4602      	mov	r2, r0
 8005772:	4b05      	ldr	r3, [pc, #20]	; (8005788 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	0a9b      	lsrs	r3, r3, #10
 8005778:	f003 0307 	and.w	r3, r3, #7
 800577c:	4903      	ldr	r1, [pc, #12]	; (800578c <HAL_RCC_GetPCLK1Freq+0x24>)
 800577e:	5ccb      	ldrb	r3, [r1, r3]
 8005780:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005784:	4618      	mov	r0, r3
 8005786:	bd80      	pop	{r7, pc}
 8005788:	40023800 	.word	0x40023800
 800578c:	0800bf4c 	.word	0x0800bf4c

08005790 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005794:	f7ff ffdc 	bl	8005750 <HAL_RCC_GetHCLKFreq>
 8005798:	4602      	mov	r2, r0
 800579a:	4b05      	ldr	r3, [pc, #20]	; (80057b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	0b5b      	lsrs	r3, r3, #13
 80057a0:	f003 0307 	and.w	r3, r3, #7
 80057a4:	4903      	ldr	r1, [pc, #12]	; (80057b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80057a6:	5ccb      	ldrb	r3, [r1, r3]
 80057a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	40023800 	.word	0x40023800
 80057b4:	0800bf4c 	.word	0x0800bf4c

080057b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057bc:	b0ae      	sub	sp, #184	; 0xb8
 80057be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80057c0:	2300      	movs	r3, #0
 80057c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80057c6:	2300      	movs	r3, #0
 80057c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80057cc:	2300      	movs	r3, #0
 80057ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80057d2:	2300      	movs	r3, #0
 80057d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80057d8:	2300      	movs	r3, #0
 80057da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80057de:	4bcb      	ldr	r3, [pc, #812]	; (8005b0c <HAL_RCC_GetSysClockFreq+0x354>)
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	f003 030c 	and.w	r3, r3, #12
 80057e6:	2b0c      	cmp	r3, #12
 80057e8:	f200 8206 	bhi.w	8005bf8 <HAL_RCC_GetSysClockFreq+0x440>
 80057ec:	a201      	add	r2, pc, #4	; (adr r2, 80057f4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80057ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057f2:	bf00      	nop
 80057f4:	08005829 	.word	0x08005829
 80057f8:	08005bf9 	.word	0x08005bf9
 80057fc:	08005bf9 	.word	0x08005bf9
 8005800:	08005bf9 	.word	0x08005bf9
 8005804:	08005831 	.word	0x08005831
 8005808:	08005bf9 	.word	0x08005bf9
 800580c:	08005bf9 	.word	0x08005bf9
 8005810:	08005bf9 	.word	0x08005bf9
 8005814:	08005839 	.word	0x08005839
 8005818:	08005bf9 	.word	0x08005bf9
 800581c:	08005bf9 	.word	0x08005bf9
 8005820:	08005bf9 	.word	0x08005bf9
 8005824:	08005a29 	.word	0x08005a29
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005828:	4bb9      	ldr	r3, [pc, #740]	; (8005b10 <HAL_RCC_GetSysClockFreq+0x358>)
 800582a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800582e:	e1e7      	b.n	8005c00 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005830:	4bb8      	ldr	r3, [pc, #736]	; (8005b14 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005832:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005836:	e1e3      	b.n	8005c00 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005838:	4bb4      	ldr	r3, [pc, #720]	; (8005b0c <HAL_RCC_GetSysClockFreq+0x354>)
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005840:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005844:	4bb1      	ldr	r3, [pc, #708]	; (8005b0c <HAL_RCC_GetSysClockFreq+0x354>)
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800584c:	2b00      	cmp	r3, #0
 800584e:	d071      	beq.n	8005934 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005850:	4bae      	ldr	r3, [pc, #696]	; (8005b0c <HAL_RCC_GetSysClockFreq+0x354>)
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	099b      	lsrs	r3, r3, #6
 8005856:	2200      	movs	r2, #0
 8005858:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800585c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8005860:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005864:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005868:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800586c:	2300      	movs	r3, #0
 800586e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005872:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005876:	4622      	mov	r2, r4
 8005878:	462b      	mov	r3, r5
 800587a:	f04f 0000 	mov.w	r0, #0
 800587e:	f04f 0100 	mov.w	r1, #0
 8005882:	0159      	lsls	r1, r3, #5
 8005884:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005888:	0150      	lsls	r0, r2, #5
 800588a:	4602      	mov	r2, r0
 800588c:	460b      	mov	r3, r1
 800588e:	4621      	mov	r1, r4
 8005890:	1a51      	subs	r1, r2, r1
 8005892:	6439      	str	r1, [r7, #64]	; 0x40
 8005894:	4629      	mov	r1, r5
 8005896:	eb63 0301 	sbc.w	r3, r3, r1
 800589a:	647b      	str	r3, [r7, #68]	; 0x44
 800589c:	f04f 0200 	mov.w	r2, #0
 80058a0:	f04f 0300 	mov.w	r3, #0
 80058a4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80058a8:	4649      	mov	r1, r9
 80058aa:	018b      	lsls	r3, r1, #6
 80058ac:	4641      	mov	r1, r8
 80058ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80058b2:	4641      	mov	r1, r8
 80058b4:	018a      	lsls	r2, r1, #6
 80058b6:	4641      	mov	r1, r8
 80058b8:	1a51      	subs	r1, r2, r1
 80058ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80058bc:	4649      	mov	r1, r9
 80058be:	eb63 0301 	sbc.w	r3, r3, r1
 80058c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058c4:	f04f 0200 	mov.w	r2, #0
 80058c8:	f04f 0300 	mov.w	r3, #0
 80058cc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80058d0:	4649      	mov	r1, r9
 80058d2:	00cb      	lsls	r3, r1, #3
 80058d4:	4641      	mov	r1, r8
 80058d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058da:	4641      	mov	r1, r8
 80058dc:	00ca      	lsls	r2, r1, #3
 80058de:	4610      	mov	r0, r2
 80058e0:	4619      	mov	r1, r3
 80058e2:	4603      	mov	r3, r0
 80058e4:	4622      	mov	r2, r4
 80058e6:	189b      	adds	r3, r3, r2
 80058e8:	633b      	str	r3, [r7, #48]	; 0x30
 80058ea:	462b      	mov	r3, r5
 80058ec:	460a      	mov	r2, r1
 80058ee:	eb42 0303 	adc.w	r3, r2, r3
 80058f2:	637b      	str	r3, [r7, #52]	; 0x34
 80058f4:	f04f 0200 	mov.w	r2, #0
 80058f8:	f04f 0300 	mov.w	r3, #0
 80058fc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005900:	4629      	mov	r1, r5
 8005902:	024b      	lsls	r3, r1, #9
 8005904:	4621      	mov	r1, r4
 8005906:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800590a:	4621      	mov	r1, r4
 800590c:	024a      	lsls	r2, r1, #9
 800590e:	4610      	mov	r0, r2
 8005910:	4619      	mov	r1, r3
 8005912:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005916:	2200      	movs	r2, #0
 8005918:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800591c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005920:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005924:	f7fb f960 	bl	8000be8 <__aeabi_uldivmod>
 8005928:	4602      	mov	r2, r0
 800592a:	460b      	mov	r3, r1
 800592c:	4613      	mov	r3, r2
 800592e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005932:	e067      	b.n	8005a04 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005934:	4b75      	ldr	r3, [pc, #468]	; (8005b0c <HAL_RCC_GetSysClockFreq+0x354>)
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	099b      	lsrs	r3, r3, #6
 800593a:	2200      	movs	r2, #0
 800593c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005940:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8005944:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005948:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800594c:	67bb      	str	r3, [r7, #120]	; 0x78
 800594e:	2300      	movs	r3, #0
 8005950:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005952:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8005956:	4622      	mov	r2, r4
 8005958:	462b      	mov	r3, r5
 800595a:	f04f 0000 	mov.w	r0, #0
 800595e:	f04f 0100 	mov.w	r1, #0
 8005962:	0159      	lsls	r1, r3, #5
 8005964:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005968:	0150      	lsls	r0, r2, #5
 800596a:	4602      	mov	r2, r0
 800596c:	460b      	mov	r3, r1
 800596e:	4621      	mov	r1, r4
 8005970:	1a51      	subs	r1, r2, r1
 8005972:	62b9      	str	r1, [r7, #40]	; 0x28
 8005974:	4629      	mov	r1, r5
 8005976:	eb63 0301 	sbc.w	r3, r3, r1
 800597a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800597c:	f04f 0200 	mov.w	r2, #0
 8005980:	f04f 0300 	mov.w	r3, #0
 8005984:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8005988:	4649      	mov	r1, r9
 800598a:	018b      	lsls	r3, r1, #6
 800598c:	4641      	mov	r1, r8
 800598e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005992:	4641      	mov	r1, r8
 8005994:	018a      	lsls	r2, r1, #6
 8005996:	4641      	mov	r1, r8
 8005998:	ebb2 0a01 	subs.w	sl, r2, r1
 800599c:	4649      	mov	r1, r9
 800599e:	eb63 0b01 	sbc.w	fp, r3, r1
 80059a2:	f04f 0200 	mov.w	r2, #0
 80059a6:	f04f 0300 	mov.w	r3, #0
 80059aa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80059ae:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80059b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059b6:	4692      	mov	sl, r2
 80059b8:	469b      	mov	fp, r3
 80059ba:	4623      	mov	r3, r4
 80059bc:	eb1a 0303 	adds.w	r3, sl, r3
 80059c0:	623b      	str	r3, [r7, #32]
 80059c2:	462b      	mov	r3, r5
 80059c4:	eb4b 0303 	adc.w	r3, fp, r3
 80059c8:	627b      	str	r3, [r7, #36]	; 0x24
 80059ca:	f04f 0200 	mov.w	r2, #0
 80059ce:	f04f 0300 	mov.w	r3, #0
 80059d2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80059d6:	4629      	mov	r1, r5
 80059d8:	028b      	lsls	r3, r1, #10
 80059da:	4621      	mov	r1, r4
 80059dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80059e0:	4621      	mov	r1, r4
 80059e2:	028a      	lsls	r2, r1, #10
 80059e4:	4610      	mov	r0, r2
 80059e6:	4619      	mov	r1, r3
 80059e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80059ec:	2200      	movs	r2, #0
 80059ee:	673b      	str	r3, [r7, #112]	; 0x70
 80059f0:	677a      	str	r2, [r7, #116]	; 0x74
 80059f2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80059f6:	f7fb f8f7 	bl	8000be8 <__aeabi_uldivmod>
 80059fa:	4602      	mov	r2, r0
 80059fc:	460b      	mov	r3, r1
 80059fe:	4613      	mov	r3, r2
 8005a00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005a04:	4b41      	ldr	r3, [pc, #260]	; (8005b0c <HAL_RCC_GetSysClockFreq+0x354>)
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	0c1b      	lsrs	r3, r3, #16
 8005a0a:	f003 0303 	and.w	r3, r3, #3
 8005a0e:	3301      	adds	r3, #1
 8005a10:	005b      	lsls	r3, r3, #1
 8005a12:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8005a16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005a1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005a26:	e0eb      	b.n	8005c00 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a28:	4b38      	ldr	r3, [pc, #224]	; (8005b0c <HAL_RCC_GetSysClockFreq+0x354>)
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a34:	4b35      	ldr	r3, [pc, #212]	; (8005b0c <HAL_RCC_GetSysClockFreq+0x354>)
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d06b      	beq.n	8005b18 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a40:	4b32      	ldr	r3, [pc, #200]	; (8005b0c <HAL_RCC_GetSysClockFreq+0x354>)
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	099b      	lsrs	r3, r3, #6
 8005a46:	2200      	movs	r2, #0
 8005a48:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a4a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005a4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a52:	663b      	str	r3, [r7, #96]	; 0x60
 8005a54:	2300      	movs	r3, #0
 8005a56:	667b      	str	r3, [r7, #100]	; 0x64
 8005a58:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8005a5c:	4622      	mov	r2, r4
 8005a5e:	462b      	mov	r3, r5
 8005a60:	f04f 0000 	mov.w	r0, #0
 8005a64:	f04f 0100 	mov.w	r1, #0
 8005a68:	0159      	lsls	r1, r3, #5
 8005a6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a6e:	0150      	lsls	r0, r2, #5
 8005a70:	4602      	mov	r2, r0
 8005a72:	460b      	mov	r3, r1
 8005a74:	4621      	mov	r1, r4
 8005a76:	1a51      	subs	r1, r2, r1
 8005a78:	61b9      	str	r1, [r7, #24]
 8005a7a:	4629      	mov	r1, r5
 8005a7c:	eb63 0301 	sbc.w	r3, r3, r1
 8005a80:	61fb      	str	r3, [r7, #28]
 8005a82:	f04f 0200 	mov.w	r2, #0
 8005a86:	f04f 0300 	mov.w	r3, #0
 8005a8a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005a8e:	4659      	mov	r1, fp
 8005a90:	018b      	lsls	r3, r1, #6
 8005a92:	4651      	mov	r1, sl
 8005a94:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005a98:	4651      	mov	r1, sl
 8005a9a:	018a      	lsls	r2, r1, #6
 8005a9c:	4651      	mov	r1, sl
 8005a9e:	ebb2 0801 	subs.w	r8, r2, r1
 8005aa2:	4659      	mov	r1, fp
 8005aa4:	eb63 0901 	sbc.w	r9, r3, r1
 8005aa8:	f04f 0200 	mov.w	r2, #0
 8005aac:	f04f 0300 	mov.w	r3, #0
 8005ab0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ab4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ab8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005abc:	4690      	mov	r8, r2
 8005abe:	4699      	mov	r9, r3
 8005ac0:	4623      	mov	r3, r4
 8005ac2:	eb18 0303 	adds.w	r3, r8, r3
 8005ac6:	613b      	str	r3, [r7, #16]
 8005ac8:	462b      	mov	r3, r5
 8005aca:	eb49 0303 	adc.w	r3, r9, r3
 8005ace:	617b      	str	r3, [r7, #20]
 8005ad0:	f04f 0200 	mov.w	r2, #0
 8005ad4:	f04f 0300 	mov.w	r3, #0
 8005ad8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005adc:	4629      	mov	r1, r5
 8005ade:	024b      	lsls	r3, r1, #9
 8005ae0:	4621      	mov	r1, r4
 8005ae2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005ae6:	4621      	mov	r1, r4
 8005ae8:	024a      	lsls	r2, r1, #9
 8005aea:	4610      	mov	r0, r2
 8005aec:	4619      	mov	r1, r3
 8005aee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005af2:	2200      	movs	r2, #0
 8005af4:	65bb      	str	r3, [r7, #88]	; 0x58
 8005af6:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005af8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005afc:	f7fb f874 	bl	8000be8 <__aeabi_uldivmod>
 8005b00:	4602      	mov	r2, r0
 8005b02:	460b      	mov	r3, r1
 8005b04:	4613      	mov	r3, r2
 8005b06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b0a:	e065      	b.n	8005bd8 <HAL_RCC_GetSysClockFreq+0x420>
 8005b0c:	40023800 	.word	0x40023800
 8005b10:	00f42400 	.word	0x00f42400
 8005b14:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b18:	4b3d      	ldr	r3, [pc, #244]	; (8005c10 <HAL_RCC_GetSysClockFreq+0x458>)
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	099b      	lsrs	r3, r3, #6
 8005b1e:	2200      	movs	r2, #0
 8005b20:	4618      	mov	r0, r3
 8005b22:	4611      	mov	r1, r2
 8005b24:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005b28:	653b      	str	r3, [r7, #80]	; 0x50
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	657b      	str	r3, [r7, #84]	; 0x54
 8005b2e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8005b32:	4642      	mov	r2, r8
 8005b34:	464b      	mov	r3, r9
 8005b36:	f04f 0000 	mov.w	r0, #0
 8005b3a:	f04f 0100 	mov.w	r1, #0
 8005b3e:	0159      	lsls	r1, r3, #5
 8005b40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b44:	0150      	lsls	r0, r2, #5
 8005b46:	4602      	mov	r2, r0
 8005b48:	460b      	mov	r3, r1
 8005b4a:	4641      	mov	r1, r8
 8005b4c:	1a51      	subs	r1, r2, r1
 8005b4e:	60b9      	str	r1, [r7, #8]
 8005b50:	4649      	mov	r1, r9
 8005b52:	eb63 0301 	sbc.w	r3, r3, r1
 8005b56:	60fb      	str	r3, [r7, #12]
 8005b58:	f04f 0200 	mov.w	r2, #0
 8005b5c:	f04f 0300 	mov.w	r3, #0
 8005b60:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005b64:	4659      	mov	r1, fp
 8005b66:	018b      	lsls	r3, r1, #6
 8005b68:	4651      	mov	r1, sl
 8005b6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005b6e:	4651      	mov	r1, sl
 8005b70:	018a      	lsls	r2, r1, #6
 8005b72:	4651      	mov	r1, sl
 8005b74:	1a54      	subs	r4, r2, r1
 8005b76:	4659      	mov	r1, fp
 8005b78:	eb63 0501 	sbc.w	r5, r3, r1
 8005b7c:	f04f 0200 	mov.w	r2, #0
 8005b80:	f04f 0300 	mov.w	r3, #0
 8005b84:	00eb      	lsls	r3, r5, #3
 8005b86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b8a:	00e2      	lsls	r2, r4, #3
 8005b8c:	4614      	mov	r4, r2
 8005b8e:	461d      	mov	r5, r3
 8005b90:	4643      	mov	r3, r8
 8005b92:	18e3      	adds	r3, r4, r3
 8005b94:	603b      	str	r3, [r7, #0]
 8005b96:	464b      	mov	r3, r9
 8005b98:	eb45 0303 	adc.w	r3, r5, r3
 8005b9c:	607b      	str	r3, [r7, #4]
 8005b9e:	f04f 0200 	mov.w	r2, #0
 8005ba2:	f04f 0300 	mov.w	r3, #0
 8005ba6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005baa:	4629      	mov	r1, r5
 8005bac:	028b      	lsls	r3, r1, #10
 8005bae:	4621      	mov	r1, r4
 8005bb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005bb4:	4621      	mov	r1, r4
 8005bb6:	028a      	lsls	r2, r1, #10
 8005bb8:	4610      	mov	r0, r2
 8005bba:	4619      	mov	r1, r3
 8005bbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bc4:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005bc6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005bca:	f7fb f80d 	bl	8000be8 <__aeabi_uldivmod>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	4613      	mov	r3, r2
 8005bd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005bd8:	4b0d      	ldr	r3, [pc, #52]	; (8005c10 <HAL_RCC_GetSysClockFreq+0x458>)
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	0f1b      	lsrs	r3, r3, #28
 8005bde:	f003 0307 	and.w	r3, r3, #7
 8005be2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8005be6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005bea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bf2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005bf6:	e003      	b.n	8005c00 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005bf8:	4b06      	ldr	r3, [pc, #24]	; (8005c14 <HAL_RCC_GetSysClockFreq+0x45c>)
 8005bfa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005bfe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c00:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	37b8      	adds	r7, #184	; 0xb8
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c0e:	bf00      	nop
 8005c10:	40023800 	.word	0x40023800
 8005c14:	00f42400 	.word	0x00f42400

08005c18 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b086      	sub	sp, #24
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d101      	bne.n	8005c2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e28d      	b.n	8006146 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 0301 	and.w	r3, r3, #1
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	f000 8083 	beq.w	8005d3e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005c38:	4b94      	ldr	r3, [pc, #592]	; (8005e8c <HAL_RCC_OscConfig+0x274>)
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	f003 030c 	and.w	r3, r3, #12
 8005c40:	2b04      	cmp	r3, #4
 8005c42:	d019      	beq.n	8005c78 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005c44:	4b91      	ldr	r3, [pc, #580]	; (8005e8c <HAL_RCC_OscConfig+0x274>)
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005c4c:	2b08      	cmp	r3, #8
 8005c4e:	d106      	bne.n	8005c5e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005c50:	4b8e      	ldr	r3, [pc, #568]	; (8005e8c <HAL_RCC_OscConfig+0x274>)
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c5c:	d00c      	beq.n	8005c78 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c5e:	4b8b      	ldr	r3, [pc, #556]	; (8005e8c <HAL_RCC_OscConfig+0x274>)
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005c66:	2b0c      	cmp	r3, #12
 8005c68:	d112      	bne.n	8005c90 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c6a:	4b88      	ldr	r3, [pc, #544]	; (8005e8c <HAL_RCC_OscConfig+0x274>)
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c76:	d10b      	bne.n	8005c90 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c78:	4b84      	ldr	r3, [pc, #528]	; (8005e8c <HAL_RCC_OscConfig+0x274>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d05b      	beq.n	8005d3c <HAL_RCC_OscConfig+0x124>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d157      	bne.n	8005d3c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e25a      	b.n	8006146 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c98:	d106      	bne.n	8005ca8 <HAL_RCC_OscConfig+0x90>
 8005c9a:	4b7c      	ldr	r3, [pc, #496]	; (8005e8c <HAL_RCC_OscConfig+0x274>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a7b      	ldr	r2, [pc, #492]	; (8005e8c <HAL_RCC_OscConfig+0x274>)
 8005ca0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ca4:	6013      	str	r3, [r2, #0]
 8005ca6:	e01d      	b.n	8005ce4 <HAL_RCC_OscConfig+0xcc>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005cb0:	d10c      	bne.n	8005ccc <HAL_RCC_OscConfig+0xb4>
 8005cb2:	4b76      	ldr	r3, [pc, #472]	; (8005e8c <HAL_RCC_OscConfig+0x274>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a75      	ldr	r2, [pc, #468]	; (8005e8c <HAL_RCC_OscConfig+0x274>)
 8005cb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005cbc:	6013      	str	r3, [r2, #0]
 8005cbe:	4b73      	ldr	r3, [pc, #460]	; (8005e8c <HAL_RCC_OscConfig+0x274>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a72      	ldr	r2, [pc, #456]	; (8005e8c <HAL_RCC_OscConfig+0x274>)
 8005cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cc8:	6013      	str	r3, [r2, #0]
 8005cca:	e00b      	b.n	8005ce4 <HAL_RCC_OscConfig+0xcc>
 8005ccc:	4b6f      	ldr	r3, [pc, #444]	; (8005e8c <HAL_RCC_OscConfig+0x274>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a6e      	ldr	r2, [pc, #440]	; (8005e8c <HAL_RCC_OscConfig+0x274>)
 8005cd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cd6:	6013      	str	r3, [r2, #0]
 8005cd8:	4b6c      	ldr	r3, [pc, #432]	; (8005e8c <HAL_RCC_OscConfig+0x274>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a6b      	ldr	r2, [pc, #428]	; (8005e8c <HAL_RCC_OscConfig+0x274>)
 8005cde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ce2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d013      	beq.n	8005d14 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cec:	f7fd fed4 	bl	8003a98 <HAL_GetTick>
 8005cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cf2:	e008      	b.n	8005d06 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005cf4:	f7fd fed0 	bl	8003a98 <HAL_GetTick>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	2b64      	cmp	r3, #100	; 0x64
 8005d00:	d901      	bls.n	8005d06 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e21f      	b.n	8006146 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d06:	4b61      	ldr	r3, [pc, #388]	; (8005e8c <HAL_RCC_OscConfig+0x274>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d0f0      	beq.n	8005cf4 <HAL_RCC_OscConfig+0xdc>
 8005d12:	e014      	b.n	8005d3e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d14:	f7fd fec0 	bl	8003a98 <HAL_GetTick>
 8005d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d1a:	e008      	b.n	8005d2e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d1c:	f7fd febc 	bl	8003a98 <HAL_GetTick>
 8005d20:	4602      	mov	r2, r0
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	2b64      	cmp	r3, #100	; 0x64
 8005d28:	d901      	bls.n	8005d2e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005d2a:	2303      	movs	r3, #3
 8005d2c:	e20b      	b.n	8006146 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d2e:	4b57      	ldr	r3, [pc, #348]	; (8005e8c <HAL_RCC_OscConfig+0x274>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d1f0      	bne.n	8005d1c <HAL_RCC_OscConfig+0x104>
 8005d3a:	e000      	b.n	8005d3e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f003 0302 	and.w	r3, r3, #2
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d06f      	beq.n	8005e2a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005d4a:	4b50      	ldr	r3, [pc, #320]	; (8005e8c <HAL_RCC_OscConfig+0x274>)
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	f003 030c 	and.w	r3, r3, #12
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d017      	beq.n	8005d86 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005d56:	4b4d      	ldr	r3, [pc, #308]	; (8005e8c <HAL_RCC_OscConfig+0x274>)
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005d5e:	2b08      	cmp	r3, #8
 8005d60:	d105      	bne.n	8005d6e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005d62:	4b4a      	ldr	r3, [pc, #296]	; (8005e8c <HAL_RCC_OscConfig+0x274>)
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d00b      	beq.n	8005d86 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d6e:	4b47      	ldr	r3, [pc, #284]	; (8005e8c <HAL_RCC_OscConfig+0x274>)
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005d76:	2b0c      	cmp	r3, #12
 8005d78:	d11c      	bne.n	8005db4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d7a:	4b44      	ldr	r3, [pc, #272]	; (8005e8c <HAL_RCC_OscConfig+0x274>)
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d116      	bne.n	8005db4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d86:	4b41      	ldr	r3, [pc, #260]	; (8005e8c <HAL_RCC_OscConfig+0x274>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f003 0302 	and.w	r3, r3, #2
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d005      	beq.n	8005d9e <HAL_RCC_OscConfig+0x186>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d001      	beq.n	8005d9e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e1d3      	b.n	8006146 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d9e:	4b3b      	ldr	r3, [pc, #236]	; (8005e8c <HAL_RCC_OscConfig+0x274>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	00db      	lsls	r3, r3, #3
 8005dac:	4937      	ldr	r1, [pc, #220]	; (8005e8c <HAL_RCC_OscConfig+0x274>)
 8005dae:	4313      	orrs	r3, r2
 8005db0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005db2:	e03a      	b.n	8005e2a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d020      	beq.n	8005dfe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005dbc:	4b34      	ldr	r3, [pc, #208]	; (8005e90 <HAL_RCC_OscConfig+0x278>)
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dc2:	f7fd fe69 	bl	8003a98 <HAL_GetTick>
 8005dc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dc8:	e008      	b.n	8005ddc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005dca:	f7fd fe65 	bl	8003a98 <HAL_GetTick>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	1ad3      	subs	r3, r2, r3
 8005dd4:	2b02      	cmp	r3, #2
 8005dd6:	d901      	bls.n	8005ddc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005dd8:	2303      	movs	r3, #3
 8005dda:	e1b4      	b.n	8006146 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ddc:	4b2b      	ldr	r3, [pc, #172]	; (8005e8c <HAL_RCC_OscConfig+0x274>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 0302 	and.w	r3, r3, #2
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d0f0      	beq.n	8005dca <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005de8:	4b28      	ldr	r3, [pc, #160]	; (8005e8c <HAL_RCC_OscConfig+0x274>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	691b      	ldr	r3, [r3, #16]
 8005df4:	00db      	lsls	r3, r3, #3
 8005df6:	4925      	ldr	r1, [pc, #148]	; (8005e8c <HAL_RCC_OscConfig+0x274>)
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	600b      	str	r3, [r1, #0]
 8005dfc:	e015      	b.n	8005e2a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005dfe:	4b24      	ldr	r3, [pc, #144]	; (8005e90 <HAL_RCC_OscConfig+0x278>)
 8005e00:	2200      	movs	r2, #0
 8005e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e04:	f7fd fe48 	bl	8003a98 <HAL_GetTick>
 8005e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e0a:	e008      	b.n	8005e1e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e0c:	f7fd fe44 	bl	8003a98 <HAL_GetTick>
 8005e10:	4602      	mov	r2, r0
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	1ad3      	subs	r3, r2, r3
 8005e16:	2b02      	cmp	r3, #2
 8005e18:	d901      	bls.n	8005e1e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	e193      	b.n	8006146 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e1e:	4b1b      	ldr	r3, [pc, #108]	; (8005e8c <HAL_RCC_OscConfig+0x274>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 0302 	and.w	r3, r3, #2
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d1f0      	bne.n	8005e0c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 0308 	and.w	r3, r3, #8
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d036      	beq.n	8005ea4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	695b      	ldr	r3, [r3, #20]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d016      	beq.n	8005e6c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e3e:	4b15      	ldr	r3, [pc, #84]	; (8005e94 <HAL_RCC_OscConfig+0x27c>)
 8005e40:	2201      	movs	r2, #1
 8005e42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e44:	f7fd fe28 	bl	8003a98 <HAL_GetTick>
 8005e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e4a:	e008      	b.n	8005e5e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e4c:	f7fd fe24 	bl	8003a98 <HAL_GetTick>
 8005e50:	4602      	mov	r2, r0
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	1ad3      	subs	r3, r2, r3
 8005e56:	2b02      	cmp	r3, #2
 8005e58:	d901      	bls.n	8005e5e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	e173      	b.n	8006146 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e5e:	4b0b      	ldr	r3, [pc, #44]	; (8005e8c <HAL_RCC_OscConfig+0x274>)
 8005e60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e62:	f003 0302 	and.w	r3, r3, #2
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d0f0      	beq.n	8005e4c <HAL_RCC_OscConfig+0x234>
 8005e6a:	e01b      	b.n	8005ea4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e6c:	4b09      	ldr	r3, [pc, #36]	; (8005e94 <HAL_RCC_OscConfig+0x27c>)
 8005e6e:	2200      	movs	r2, #0
 8005e70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e72:	f7fd fe11 	bl	8003a98 <HAL_GetTick>
 8005e76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e78:	e00e      	b.n	8005e98 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e7a:	f7fd fe0d 	bl	8003a98 <HAL_GetTick>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	1ad3      	subs	r3, r2, r3
 8005e84:	2b02      	cmp	r3, #2
 8005e86:	d907      	bls.n	8005e98 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005e88:	2303      	movs	r3, #3
 8005e8a:	e15c      	b.n	8006146 <HAL_RCC_OscConfig+0x52e>
 8005e8c:	40023800 	.word	0x40023800
 8005e90:	42470000 	.word	0x42470000
 8005e94:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e98:	4b8a      	ldr	r3, [pc, #552]	; (80060c4 <HAL_RCC_OscConfig+0x4ac>)
 8005e9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e9c:	f003 0302 	and.w	r3, r3, #2
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d1ea      	bne.n	8005e7a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 0304 	and.w	r3, r3, #4
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	f000 8097 	beq.w	8005fe0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005eb6:	4b83      	ldr	r3, [pc, #524]	; (80060c4 <HAL_RCC_OscConfig+0x4ac>)
 8005eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d10f      	bne.n	8005ee2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	60bb      	str	r3, [r7, #8]
 8005ec6:	4b7f      	ldr	r3, [pc, #508]	; (80060c4 <HAL_RCC_OscConfig+0x4ac>)
 8005ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eca:	4a7e      	ldr	r2, [pc, #504]	; (80060c4 <HAL_RCC_OscConfig+0x4ac>)
 8005ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8005ed2:	4b7c      	ldr	r3, [pc, #496]	; (80060c4 <HAL_RCC_OscConfig+0x4ac>)
 8005ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005eda:	60bb      	str	r3, [r7, #8]
 8005edc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ee2:	4b79      	ldr	r3, [pc, #484]	; (80060c8 <HAL_RCC_OscConfig+0x4b0>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d118      	bne.n	8005f20 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005eee:	4b76      	ldr	r3, [pc, #472]	; (80060c8 <HAL_RCC_OscConfig+0x4b0>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a75      	ldr	r2, [pc, #468]	; (80060c8 <HAL_RCC_OscConfig+0x4b0>)
 8005ef4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ef8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005efa:	f7fd fdcd 	bl	8003a98 <HAL_GetTick>
 8005efe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f00:	e008      	b.n	8005f14 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f02:	f7fd fdc9 	bl	8003a98 <HAL_GetTick>
 8005f06:	4602      	mov	r2, r0
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	1ad3      	subs	r3, r2, r3
 8005f0c:	2b02      	cmp	r3, #2
 8005f0e:	d901      	bls.n	8005f14 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005f10:	2303      	movs	r3, #3
 8005f12:	e118      	b.n	8006146 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f14:	4b6c      	ldr	r3, [pc, #432]	; (80060c8 <HAL_RCC_OscConfig+0x4b0>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d0f0      	beq.n	8005f02 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d106      	bne.n	8005f36 <HAL_RCC_OscConfig+0x31e>
 8005f28:	4b66      	ldr	r3, [pc, #408]	; (80060c4 <HAL_RCC_OscConfig+0x4ac>)
 8005f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f2c:	4a65      	ldr	r2, [pc, #404]	; (80060c4 <HAL_RCC_OscConfig+0x4ac>)
 8005f2e:	f043 0301 	orr.w	r3, r3, #1
 8005f32:	6713      	str	r3, [r2, #112]	; 0x70
 8005f34:	e01c      	b.n	8005f70 <HAL_RCC_OscConfig+0x358>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	2b05      	cmp	r3, #5
 8005f3c:	d10c      	bne.n	8005f58 <HAL_RCC_OscConfig+0x340>
 8005f3e:	4b61      	ldr	r3, [pc, #388]	; (80060c4 <HAL_RCC_OscConfig+0x4ac>)
 8005f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f42:	4a60      	ldr	r2, [pc, #384]	; (80060c4 <HAL_RCC_OscConfig+0x4ac>)
 8005f44:	f043 0304 	orr.w	r3, r3, #4
 8005f48:	6713      	str	r3, [r2, #112]	; 0x70
 8005f4a:	4b5e      	ldr	r3, [pc, #376]	; (80060c4 <HAL_RCC_OscConfig+0x4ac>)
 8005f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f4e:	4a5d      	ldr	r2, [pc, #372]	; (80060c4 <HAL_RCC_OscConfig+0x4ac>)
 8005f50:	f043 0301 	orr.w	r3, r3, #1
 8005f54:	6713      	str	r3, [r2, #112]	; 0x70
 8005f56:	e00b      	b.n	8005f70 <HAL_RCC_OscConfig+0x358>
 8005f58:	4b5a      	ldr	r3, [pc, #360]	; (80060c4 <HAL_RCC_OscConfig+0x4ac>)
 8005f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f5c:	4a59      	ldr	r2, [pc, #356]	; (80060c4 <HAL_RCC_OscConfig+0x4ac>)
 8005f5e:	f023 0301 	bic.w	r3, r3, #1
 8005f62:	6713      	str	r3, [r2, #112]	; 0x70
 8005f64:	4b57      	ldr	r3, [pc, #348]	; (80060c4 <HAL_RCC_OscConfig+0x4ac>)
 8005f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f68:	4a56      	ldr	r2, [pc, #344]	; (80060c4 <HAL_RCC_OscConfig+0x4ac>)
 8005f6a:	f023 0304 	bic.w	r3, r3, #4
 8005f6e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d015      	beq.n	8005fa4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f78:	f7fd fd8e 	bl	8003a98 <HAL_GetTick>
 8005f7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f7e:	e00a      	b.n	8005f96 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f80:	f7fd fd8a 	bl	8003a98 <HAL_GetTick>
 8005f84:	4602      	mov	r2, r0
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	1ad3      	subs	r3, r2, r3
 8005f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d901      	bls.n	8005f96 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005f92:	2303      	movs	r3, #3
 8005f94:	e0d7      	b.n	8006146 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f96:	4b4b      	ldr	r3, [pc, #300]	; (80060c4 <HAL_RCC_OscConfig+0x4ac>)
 8005f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f9a:	f003 0302 	and.w	r3, r3, #2
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d0ee      	beq.n	8005f80 <HAL_RCC_OscConfig+0x368>
 8005fa2:	e014      	b.n	8005fce <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fa4:	f7fd fd78 	bl	8003a98 <HAL_GetTick>
 8005fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005faa:	e00a      	b.n	8005fc2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fac:	f7fd fd74 	bl	8003a98 <HAL_GetTick>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	1ad3      	subs	r3, r2, r3
 8005fb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d901      	bls.n	8005fc2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	e0c1      	b.n	8006146 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fc2:	4b40      	ldr	r3, [pc, #256]	; (80060c4 <HAL_RCC_OscConfig+0x4ac>)
 8005fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fc6:	f003 0302 	and.w	r3, r3, #2
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d1ee      	bne.n	8005fac <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005fce:	7dfb      	ldrb	r3, [r7, #23]
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d105      	bne.n	8005fe0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fd4:	4b3b      	ldr	r3, [pc, #236]	; (80060c4 <HAL_RCC_OscConfig+0x4ac>)
 8005fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd8:	4a3a      	ldr	r2, [pc, #232]	; (80060c4 <HAL_RCC_OscConfig+0x4ac>)
 8005fda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fde:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	699b      	ldr	r3, [r3, #24]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f000 80ad 	beq.w	8006144 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005fea:	4b36      	ldr	r3, [pc, #216]	; (80060c4 <HAL_RCC_OscConfig+0x4ac>)
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	f003 030c 	and.w	r3, r3, #12
 8005ff2:	2b08      	cmp	r3, #8
 8005ff4:	d060      	beq.n	80060b8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	699b      	ldr	r3, [r3, #24]
 8005ffa:	2b02      	cmp	r3, #2
 8005ffc:	d145      	bne.n	800608a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ffe:	4b33      	ldr	r3, [pc, #204]	; (80060cc <HAL_RCC_OscConfig+0x4b4>)
 8006000:	2200      	movs	r2, #0
 8006002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006004:	f7fd fd48 	bl	8003a98 <HAL_GetTick>
 8006008:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800600a:	e008      	b.n	800601e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800600c:	f7fd fd44 	bl	8003a98 <HAL_GetTick>
 8006010:	4602      	mov	r2, r0
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	2b02      	cmp	r3, #2
 8006018:	d901      	bls.n	800601e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800601a:	2303      	movs	r3, #3
 800601c:	e093      	b.n	8006146 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800601e:	4b29      	ldr	r3, [pc, #164]	; (80060c4 <HAL_RCC_OscConfig+0x4ac>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006026:	2b00      	cmp	r3, #0
 8006028:	d1f0      	bne.n	800600c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	69da      	ldr	r2, [r3, #28]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a1b      	ldr	r3, [r3, #32]
 8006032:	431a      	orrs	r2, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006038:	019b      	lsls	r3, r3, #6
 800603a:	431a      	orrs	r2, r3
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006040:	085b      	lsrs	r3, r3, #1
 8006042:	3b01      	subs	r3, #1
 8006044:	041b      	lsls	r3, r3, #16
 8006046:	431a      	orrs	r2, r3
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800604c:	061b      	lsls	r3, r3, #24
 800604e:	431a      	orrs	r2, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006054:	071b      	lsls	r3, r3, #28
 8006056:	491b      	ldr	r1, [pc, #108]	; (80060c4 <HAL_RCC_OscConfig+0x4ac>)
 8006058:	4313      	orrs	r3, r2
 800605a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800605c:	4b1b      	ldr	r3, [pc, #108]	; (80060cc <HAL_RCC_OscConfig+0x4b4>)
 800605e:	2201      	movs	r2, #1
 8006060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006062:	f7fd fd19 	bl	8003a98 <HAL_GetTick>
 8006066:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006068:	e008      	b.n	800607c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800606a:	f7fd fd15 	bl	8003a98 <HAL_GetTick>
 800606e:	4602      	mov	r2, r0
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	1ad3      	subs	r3, r2, r3
 8006074:	2b02      	cmp	r3, #2
 8006076:	d901      	bls.n	800607c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006078:	2303      	movs	r3, #3
 800607a:	e064      	b.n	8006146 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800607c:	4b11      	ldr	r3, [pc, #68]	; (80060c4 <HAL_RCC_OscConfig+0x4ac>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006084:	2b00      	cmp	r3, #0
 8006086:	d0f0      	beq.n	800606a <HAL_RCC_OscConfig+0x452>
 8006088:	e05c      	b.n	8006144 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800608a:	4b10      	ldr	r3, [pc, #64]	; (80060cc <HAL_RCC_OscConfig+0x4b4>)
 800608c:	2200      	movs	r2, #0
 800608e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006090:	f7fd fd02 	bl	8003a98 <HAL_GetTick>
 8006094:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006096:	e008      	b.n	80060aa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006098:	f7fd fcfe 	bl	8003a98 <HAL_GetTick>
 800609c:	4602      	mov	r2, r0
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	1ad3      	subs	r3, r2, r3
 80060a2:	2b02      	cmp	r3, #2
 80060a4:	d901      	bls.n	80060aa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80060a6:	2303      	movs	r3, #3
 80060a8:	e04d      	b.n	8006146 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060aa:	4b06      	ldr	r3, [pc, #24]	; (80060c4 <HAL_RCC_OscConfig+0x4ac>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d1f0      	bne.n	8006098 <HAL_RCC_OscConfig+0x480>
 80060b6:	e045      	b.n	8006144 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	699b      	ldr	r3, [r3, #24]
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d107      	bne.n	80060d0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	e040      	b.n	8006146 <HAL_RCC_OscConfig+0x52e>
 80060c4:	40023800 	.word	0x40023800
 80060c8:	40007000 	.word	0x40007000
 80060cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80060d0:	4b1f      	ldr	r3, [pc, #124]	; (8006150 <HAL_RCC_OscConfig+0x538>)
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	699b      	ldr	r3, [r3, #24]
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d030      	beq.n	8006140 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d129      	bne.n	8006140 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d122      	bne.n	8006140 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80060fa:	68fa      	ldr	r2, [r7, #12]
 80060fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006100:	4013      	ands	r3, r2
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006106:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006108:	4293      	cmp	r3, r2
 800610a:	d119      	bne.n	8006140 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006116:	085b      	lsrs	r3, r3, #1
 8006118:	3b01      	subs	r3, #1
 800611a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800611c:	429a      	cmp	r2, r3
 800611e:	d10f      	bne.n	8006140 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800612a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800612c:	429a      	cmp	r2, r3
 800612e:	d107      	bne.n	8006140 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800613a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800613c:	429a      	cmp	r2, r3
 800613e:	d001      	beq.n	8006144 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	e000      	b.n	8006146 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	3718      	adds	r7, #24
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	40023800 	.word	0x40023800

08006154 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b082      	sub	sp, #8
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d101      	bne.n	8006166 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	e041      	b.n	80061ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800616c:	b2db      	uxtb	r3, r3
 800616e:	2b00      	cmp	r3, #0
 8006170:	d106      	bne.n	8006180 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2200      	movs	r2, #0
 8006176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f7fd f994 	bl	80034a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2202      	movs	r2, #2
 8006184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	3304      	adds	r3, #4
 8006190:	4619      	mov	r1, r3
 8006192:	4610      	mov	r0, r2
 8006194:	f000 ff88 	bl	80070a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2201      	movs	r2, #1
 80061dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3708      	adds	r7, #8
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}

080061f2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80061f2:	b580      	push	{r7, lr}
 80061f4:	b082      	sub	sp, #8
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d101      	bne.n	8006204 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	e041      	b.n	8006288 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800620a:	b2db      	uxtb	r3, r3
 800620c:	2b00      	cmp	r3, #0
 800620e:	d106      	bne.n	800621e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f000 f839 	bl	8006290 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2202      	movs	r2, #2
 8006222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	3304      	adds	r3, #4
 800622e:	4619      	mov	r1, r3
 8006230:	4610      	mov	r0, r2
 8006232:	f000 ff39 	bl	80070a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2201      	movs	r2, #1
 800623a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2201      	movs	r2, #1
 8006242:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2201      	movs	r2, #1
 800624a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2201      	movs	r2, #1
 8006252:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2201      	movs	r2, #1
 800625a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2201      	movs	r2, #1
 8006262:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2201      	movs	r2, #1
 800626a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2201      	movs	r2, #1
 8006272:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2201      	movs	r2, #1
 800627a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2201      	movs	r2, #1
 8006282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006286:	2300      	movs	r3, #0
}
 8006288:	4618      	mov	r0, r3
 800628a:	3708      	adds	r7, #8
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006298:	bf00      	nop
 800629a:	370c      	adds	r7, #12
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d109      	bne.n	80062c8 <HAL_TIM_PWM_Start+0x24>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	2b01      	cmp	r3, #1
 80062be:	bf14      	ite	ne
 80062c0:	2301      	movne	r3, #1
 80062c2:	2300      	moveq	r3, #0
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	e022      	b.n	800630e <HAL_TIM_PWM_Start+0x6a>
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	2b04      	cmp	r3, #4
 80062cc:	d109      	bne.n	80062e2 <HAL_TIM_PWM_Start+0x3e>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	bf14      	ite	ne
 80062da:	2301      	movne	r3, #1
 80062dc:	2300      	moveq	r3, #0
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	e015      	b.n	800630e <HAL_TIM_PWM_Start+0x6a>
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	2b08      	cmp	r3, #8
 80062e6:	d109      	bne.n	80062fc <HAL_TIM_PWM_Start+0x58>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	bf14      	ite	ne
 80062f4:	2301      	movne	r3, #1
 80062f6:	2300      	moveq	r3, #0
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	e008      	b.n	800630e <HAL_TIM_PWM_Start+0x6a>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006302:	b2db      	uxtb	r3, r3
 8006304:	2b01      	cmp	r3, #1
 8006306:	bf14      	ite	ne
 8006308:	2301      	movne	r3, #1
 800630a:	2300      	moveq	r3, #0
 800630c:	b2db      	uxtb	r3, r3
 800630e:	2b00      	cmp	r3, #0
 8006310:	d001      	beq.n	8006316 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	e07c      	b.n	8006410 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d104      	bne.n	8006326 <HAL_TIM_PWM_Start+0x82>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2202      	movs	r2, #2
 8006320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006324:	e013      	b.n	800634e <HAL_TIM_PWM_Start+0xaa>
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	2b04      	cmp	r3, #4
 800632a:	d104      	bne.n	8006336 <HAL_TIM_PWM_Start+0x92>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2202      	movs	r2, #2
 8006330:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006334:	e00b      	b.n	800634e <HAL_TIM_PWM_Start+0xaa>
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	2b08      	cmp	r3, #8
 800633a:	d104      	bne.n	8006346 <HAL_TIM_PWM_Start+0xa2>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2202      	movs	r2, #2
 8006340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006344:	e003      	b.n	800634e <HAL_TIM_PWM_Start+0xaa>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2202      	movs	r2, #2
 800634a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2201      	movs	r2, #1
 8006354:	6839      	ldr	r1, [r7, #0]
 8006356:	4618      	mov	r0, r3
 8006358:	f001 fb4c 	bl	80079f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a2d      	ldr	r2, [pc, #180]	; (8006418 <HAL_TIM_PWM_Start+0x174>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d004      	beq.n	8006370 <HAL_TIM_PWM_Start+0xcc>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a2c      	ldr	r2, [pc, #176]	; (800641c <HAL_TIM_PWM_Start+0x178>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d101      	bne.n	8006374 <HAL_TIM_PWM_Start+0xd0>
 8006370:	2301      	movs	r3, #1
 8006372:	e000      	b.n	8006376 <HAL_TIM_PWM_Start+0xd2>
 8006374:	2300      	movs	r3, #0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d007      	beq.n	800638a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006388:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a22      	ldr	r2, [pc, #136]	; (8006418 <HAL_TIM_PWM_Start+0x174>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d022      	beq.n	80063da <HAL_TIM_PWM_Start+0x136>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800639c:	d01d      	beq.n	80063da <HAL_TIM_PWM_Start+0x136>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a1f      	ldr	r2, [pc, #124]	; (8006420 <HAL_TIM_PWM_Start+0x17c>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d018      	beq.n	80063da <HAL_TIM_PWM_Start+0x136>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a1d      	ldr	r2, [pc, #116]	; (8006424 <HAL_TIM_PWM_Start+0x180>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d013      	beq.n	80063da <HAL_TIM_PWM_Start+0x136>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a1c      	ldr	r2, [pc, #112]	; (8006428 <HAL_TIM_PWM_Start+0x184>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d00e      	beq.n	80063da <HAL_TIM_PWM_Start+0x136>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a16      	ldr	r2, [pc, #88]	; (800641c <HAL_TIM_PWM_Start+0x178>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d009      	beq.n	80063da <HAL_TIM_PWM_Start+0x136>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a18      	ldr	r2, [pc, #96]	; (800642c <HAL_TIM_PWM_Start+0x188>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d004      	beq.n	80063da <HAL_TIM_PWM_Start+0x136>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a16      	ldr	r2, [pc, #88]	; (8006430 <HAL_TIM_PWM_Start+0x18c>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d111      	bne.n	80063fe <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	f003 0307 	and.w	r3, r3, #7
 80063e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2b06      	cmp	r3, #6
 80063ea:	d010      	beq.n	800640e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f042 0201 	orr.w	r2, r2, #1
 80063fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063fc:	e007      	b.n	800640e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f042 0201 	orr.w	r2, r2, #1
 800640c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800640e:	2300      	movs	r3, #0
}
 8006410:	4618      	mov	r0, r3
 8006412:	3710      	adds	r7, #16
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}
 8006418:	40010000 	.word	0x40010000
 800641c:	40010400 	.word	0x40010400
 8006420:	40000400 	.word	0x40000400
 8006424:	40000800 	.word	0x40000800
 8006428:	40000c00 	.word	0x40000c00
 800642c:	40014000 	.word	0x40014000
 8006430:	40001800 	.word	0x40001800

08006434 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d101      	bne.n	8006446 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	e041      	b.n	80064ca <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800644c:	b2db      	uxtb	r3, r3
 800644e:	2b00      	cmp	r3, #0
 8006450:	d106      	bne.n	8006460 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 f839 	bl	80064d2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2202      	movs	r2, #2
 8006464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	3304      	adds	r3, #4
 8006470:	4619      	mov	r1, r3
 8006472:	4610      	mov	r0, r2
 8006474:	f000 fe18 	bl	80070a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2201      	movs	r2, #1
 80064c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064c8:	2300      	movs	r3, #0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3708      	adds	r7, #8
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}

080064d2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80064d2:	b480      	push	{r7}
 80064d4:	b083      	sub	sp, #12
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80064da:	bf00      	nop
 80064dc:	370c      	adds	r7, #12
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr
	...

080064e8 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b084      	sub	sp, #16
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d104      	bne.n	8006502 <HAL_TIM_IC_Start+0x1a>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	e013      	b.n	800652a <HAL_TIM_IC_Start+0x42>
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	2b04      	cmp	r3, #4
 8006506:	d104      	bne.n	8006512 <HAL_TIM_IC_Start+0x2a>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800650e:	b2db      	uxtb	r3, r3
 8006510:	e00b      	b.n	800652a <HAL_TIM_IC_Start+0x42>
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	2b08      	cmp	r3, #8
 8006516:	d104      	bne.n	8006522 <HAL_TIM_IC_Start+0x3a>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800651e:	b2db      	uxtb	r3, r3
 8006520:	e003      	b.n	800652a <HAL_TIM_IC_Start+0x42>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006528:	b2db      	uxtb	r3, r3
 800652a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d104      	bne.n	800653c <HAL_TIM_IC_Start+0x54>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006538:	b2db      	uxtb	r3, r3
 800653a:	e013      	b.n	8006564 <HAL_TIM_IC_Start+0x7c>
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	2b04      	cmp	r3, #4
 8006540:	d104      	bne.n	800654c <HAL_TIM_IC_Start+0x64>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006548:	b2db      	uxtb	r3, r3
 800654a:	e00b      	b.n	8006564 <HAL_TIM_IC_Start+0x7c>
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	2b08      	cmp	r3, #8
 8006550:	d104      	bne.n	800655c <HAL_TIM_IC_Start+0x74>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006558:	b2db      	uxtb	r3, r3
 800655a:	e003      	b.n	8006564 <HAL_TIM_IC_Start+0x7c>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006562:	b2db      	uxtb	r3, r3
 8006564:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006566:	7bfb      	ldrb	r3, [r7, #15]
 8006568:	2b01      	cmp	r3, #1
 800656a:	d102      	bne.n	8006572 <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800656c:	7bbb      	ldrb	r3, [r7, #14]
 800656e:	2b01      	cmp	r3, #1
 8006570:	d001      	beq.n	8006576 <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e081      	b.n	800667a <HAL_TIM_IC_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d104      	bne.n	8006586 <HAL_TIM_IC_Start+0x9e>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2202      	movs	r2, #2
 8006580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006584:	e013      	b.n	80065ae <HAL_TIM_IC_Start+0xc6>
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	2b04      	cmp	r3, #4
 800658a:	d104      	bne.n	8006596 <HAL_TIM_IC_Start+0xae>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2202      	movs	r2, #2
 8006590:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006594:	e00b      	b.n	80065ae <HAL_TIM_IC_Start+0xc6>
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	2b08      	cmp	r3, #8
 800659a:	d104      	bne.n	80065a6 <HAL_TIM_IC_Start+0xbe>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2202      	movs	r2, #2
 80065a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065a4:	e003      	b.n	80065ae <HAL_TIM_IC_Start+0xc6>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2202      	movs	r2, #2
 80065aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d104      	bne.n	80065be <HAL_TIM_IC_Start+0xd6>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2202      	movs	r2, #2
 80065b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065bc:	e013      	b.n	80065e6 <HAL_TIM_IC_Start+0xfe>
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	2b04      	cmp	r3, #4
 80065c2:	d104      	bne.n	80065ce <HAL_TIM_IC_Start+0xe6>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2202      	movs	r2, #2
 80065c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80065cc:	e00b      	b.n	80065e6 <HAL_TIM_IC_Start+0xfe>
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	2b08      	cmp	r3, #8
 80065d2:	d104      	bne.n	80065de <HAL_TIM_IC_Start+0xf6>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2202      	movs	r2, #2
 80065d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065dc:	e003      	b.n	80065e6 <HAL_TIM_IC_Start+0xfe>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2202      	movs	r2, #2
 80065e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2201      	movs	r2, #1
 80065ec:	6839      	ldr	r1, [r7, #0]
 80065ee:	4618      	mov	r0, r3
 80065f0:	f001 fa00 	bl	80079f4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a22      	ldr	r2, [pc, #136]	; (8006684 <HAL_TIM_IC_Start+0x19c>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d022      	beq.n	8006644 <HAL_TIM_IC_Start+0x15c>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006606:	d01d      	beq.n	8006644 <HAL_TIM_IC_Start+0x15c>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a1e      	ldr	r2, [pc, #120]	; (8006688 <HAL_TIM_IC_Start+0x1a0>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d018      	beq.n	8006644 <HAL_TIM_IC_Start+0x15c>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a1d      	ldr	r2, [pc, #116]	; (800668c <HAL_TIM_IC_Start+0x1a4>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d013      	beq.n	8006644 <HAL_TIM_IC_Start+0x15c>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a1b      	ldr	r2, [pc, #108]	; (8006690 <HAL_TIM_IC_Start+0x1a8>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d00e      	beq.n	8006644 <HAL_TIM_IC_Start+0x15c>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a1a      	ldr	r2, [pc, #104]	; (8006694 <HAL_TIM_IC_Start+0x1ac>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d009      	beq.n	8006644 <HAL_TIM_IC_Start+0x15c>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a18      	ldr	r2, [pc, #96]	; (8006698 <HAL_TIM_IC_Start+0x1b0>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d004      	beq.n	8006644 <HAL_TIM_IC_Start+0x15c>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a17      	ldr	r2, [pc, #92]	; (800669c <HAL_TIM_IC_Start+0x1b4>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d111      	bne.n	8006668 <HAL_TIM_IC_Start+0x180>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	f003 0307 	and.w	r3, r3, #7
 800664e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	2b06      	cmp	r3, #6
 8006654:	d010      	beq.n	8006678 <HAL_TIM_IC_Start+0x190>
    {
      __HAL_TIM_ENABLE(htim);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f042 0201 	orr.w	r2, r2, #1
 8006664:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006666:	e007      	b.n	8006678 <HAL_TIM_IC_Start+0x190>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f042 0201 	orr.w	r2, r2, #1
 8006676:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006678:	2300      	movs	r3, #0
}
 800667a:	4618      	mov	r0, r3
 800667c:	3710      	adds	r7, #16
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
 8006682:	bf00      	nop
 8006684:	40010000 	.word	0x40010000
 8006688:	40000400 	.word	0x40000400
 800668c:	40000800 	.word	0x40000800
 8006690:	40000c00 	.word	0x40000c00
 8006694:	40010400 	.word	0x40010400
 8006698:	40014000 	.word	0x40014000
 800669c:	40001800 	.word	0x40001800

080066a0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b084      	sub	sp, #16
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066aa:	2300      	movs	r3, #0
 80066ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d104      	bne.n	80066be <HAL_TIM_IC_Start_IT+0x1e>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	e013      	b.n	80066e6 <HAL_TIM_IC_Start_IT+0x46>
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	2b04      	cmp	r3, #4
 80066c2:	d104      	bne.n	80066ce <HAL_TIM_IC_Start_IT+0x2e>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	e00b      	b.n	80066e6 <HAL_TIM_IC_Start_IT+0x46>
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	2b08      	cmp	r3, #8
 80066d2:	d104      	bne.n	80066de <HAL_TIM_IC_Start_IT+0x3e>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80066da:	b2db      	uxtb	r3, r3
 80066dc:	e003      	b.n	80066e6 <HAL_TIM_IC_Start_IT+0x46>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d104      	bne.n	80066f8 <HAL_TIM_IC_Start_IT+0x58>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	e013      	b.n	8006720 <HAL_TIM_IC_Start_IT+0x80>
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	2b04      	cmp	r3, #4
 80066fc:	d104      	bne.n	8006708 <HAL_TIM_IC_Start_IT+0x68>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006704:	b2db      	uxtb	r3, r3
 8006706:	e00b      	b.n	8006720 <HAL_TIM_IC_Start_IT+0x80>
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	2b08      	cmp	r3, #8
 800670c:	d104      	bne.n	8006718 <HAL_TIM_IC_Start_IT+0x78>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006714:	b2db      	uxtb	r3, r3
 8006716:	e003      	b.n	8006720 <HAL_TIM_IC_Start_IT+0x80>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800671e:	b2db      	uxtb	r3, r3
 8006720:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006722:	7bbb      	ldrb	r3, [r7, #14]
 8006724:	2b01      	cmp	r3, #1
 8006726:	d102      	bne.n	800672e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006728:	7b7b      	ldrb	r3, [r7, #13]
 800672a:	2b01      	cmp	r3, #1
 800672c:	d001      	beq.n	8006732 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	e0cc      	b.n	80068cc <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d104      	bne.n	8006742 <HAL_TIM_IC_Start_IT+0xa2>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2202      	movs	r2, #2
 800673c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006740:	e013      	b.n	800676a <HAL_TIM_IC_Start_IT+0xca>
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	2b04      	cmp	r3, #4
 8006746:	d104      	bne.n	8006752 <HAL_TIM_IC_Start_IT+0xb2>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2202      	movs	r2, #2
 800674c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006750:	e00b      	b.n	800676a <HAL_TIM_IC_Start_IT+0xca>
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	2b08      	cmp	r3, #8
 8006756:	d104      	bne.n	8006762 <HAL_TIM_IC_Start_IT+0xc2>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2202      	movs	r2, #2
 800675c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006760:	e003      	b.n	800676a <HAL_TIM_IC_Start_IT+0xca>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2202      	movs	r2, #2
 8006766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d104      	bne.n	800677a <HAL_TIM_IC_Start_IT+0xda>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2202      	movs	r2, #2
 8006774:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006778:	e013      	b.n	80067a2 <HAL_TIM_IC_Start_IT+0x102>
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	2b04      	cmp	r3, #4
 800677e:	d104      	bne.n	800678a <HAL_TIM_IC_Start_IT+0xea>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2202      	movs	r2, #2
 8006784:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006788:	e00b      	b.n	80067a2 <HAL_TIM_IC_Start_IT+0x102>
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	2b08      	cmp	r3, #8
 800678e:	d104      	bne.n	800679a <HAL_TIM_IC_Start_IT+0xfa>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2202      	movs	r2, #2
 8006794:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006798:	e003      	b.n	80067a2 <HAL_TIM_IC_Start_IT+0x102>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2202      	movs	r2, #2
 800679e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	2b0c      	cmp	r3, #12
 80067a6:	d841      	bhi.n	800682c <HAL_TIM_IC_Start_IT+0x18c>
 80067a8:	a201      	add	r2, pc, #4	; (adr r2, 80067b0 <HAL_TIM_IC_Start_IT+0x110>)
 80067aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ae:	bf00      	nop
 80067b0:	080067e5 	.word	0x080067e5
 80067b4:	0800682d 	.word	0x0800682d
 80067b8:	0800682d 	.word	0x0800682d
 80067bc:	0800682d 	.word	0x0800682d
 80067c0:	080067f7 	.word	0x080067f7
 80067c4:	0800682d 	.word	0x0800682d
 80067c8:	0800682d 	.word	0x0800682d
 80067cc:	0800682d 	.word	0x0800682d
 80067d0:	08006809 	.word	0x08006809
 80067d4:	0800682d 	.word	0x0800682d
 80067d8:	0800682d 	.word	0x0800682d
 80067dc:	0800682d 	.word	0x0800682d
 80067e0:	0800681b 	.word	0x0800681b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	68da      	ldr	r2, [r3, #12]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f042 0202 	orr.w	r2, r2, #2
 80067f2:	60da      	str	r2, [r3, #12]
      break;
 80067f4:	e01d      	b.n	8006832 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	68da      	ldr	r2, [r3, #12]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f042 0204 	orr.w	r2, r2, #4
 8006804:	60da      	str	r2, [r3, #12]
      break;
 8006806:	e014      	b.n	8006832 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	68da      	ldr	r2, [r3, #12]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f042 0208 	orr.w	r2, r2, #8
 8006816:	60da      	str	r2, [r3, #12]
      break;
 8006818:	e00b      	b.n	8006832 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	68da      	ldr	r2, [r3, #12]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f042 0210 	orr.w	r2, r2, #16
 8006828:	60da      	str	r2, [r3, #12]
      break;
 800682a:	e002      	b.n	8006832 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	73fb      	strb	r3, [r7, #15]
      break;
 8006830:	bf00      	nop
  }

  if (status == HAL_OK)
 8006832:	7bfb      	ldrb	r3, [r7, #15]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d148      	bne.n	80068ca <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2201      	movs	r2, #1
 800683e:	6839      	ldr	r1, [r7, #0]
 8006840:	4618      	mov	r0, r3
 8006842:	f001 f8d7 	bl	80079f4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a22      	ldr	r2, [pc, #136]	; (80068d4 <HAL_TIM_IC_Start_IT+0x234>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d022      	beq.n	8006896 <HAL_TIM_IC_Start_IT+0x1f6>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006858:	d01d      	beq.n	8006896 <HAL_TIM_IC_Start_IT+0x1f6>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a1e      	ldr	r2, [pc, #120]	; (80068d8 <HAL_TIM_IC_Start_IT+0x238>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d018      	beq.n	8006896 <HAL_TIM_IC_Start_IT+0x1f6>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a1c      	ldr	r2, [pc, #112]	; (80068dc <HAL_TIM_IC_Start_IT+0x23c>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d013      	beq.n	8006896 <HAL_TIM_IC_Start_IT+0x1f6>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a1b      	ldr	r2, [pc, #108]	; (80068e0 <HAL_TIM_IC_Start_IT+0x240>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d00e      	beq.n	8006896 <HAL_TIM_IC_Start_IT+0x1f6>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a19      	ldr	r2, [pc, #100]	; (80068e4 <HAL_TIM_IC_Start_IT+0x244>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d009      	beq.n	8006896 <HAL_TIM_IC_Start_IT+0x1f6>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a18      	ldr	r2, [pc, #96]	; (80068e8 <HAL_TIM_IC_Start_IT+0x248>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d004      	beq.n	8006896 <HAL_TIM_IC_Start_IT+0x1f6>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a16      	ldr	r2, [pc, #88]	; (80068ec <HAL_TIM_IC_Start_IT+0x24c>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d111      	bne.n	80068ba <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	f003 0307 	and.w	r3, r3, #7
 80068a0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	2b06      	cmp	r3, #6
 80068a6:	d010      	beq.n	80068ca <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f042 0201 	orr.w	r2, r2, #1
 80068b6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068b8:	e007      	b.n	80068ca <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f042 0201 	orr.w	r2, r2, #1
 80068c8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80068ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3710      	adds	r7, #16
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}
 80068d4:	40010000 	.word	0x40010000
 80068d8:	40000400 	.word	0x40000400
 80068dc:	40000800 	.word	0x40000800
 80068e0:	40000c00 	.word	0x40000c00
 80068e4:	40010400 	.word	0x40010400
 80068e8:	40014000 	.word	0x40014000
 80068ec:	40001800 	.word	0x40001800

080068f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b082      	sub	sp, #8
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	691b      	ldr	r3, [r3, #16]
 80068fe:	f003 0302 	and.w	r3, r3, #2
 8006902:	2b02      	cmp	r3, #2
 8006904:	d122      	bne.n	800694c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	68db      	ldr	r3, [r3, #12]
 800690c:	f003 0302 	and.w	r3, r3, #2
 8006910:	2b02      	cmp	r3, #2
 8006912:	d11b      	bne.n	800694c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f06f 0202 	mvn.w	r2, #2
 800691c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2201      	movs	r2, #1
 8006922:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	699b      	ldr	r3, [r3, #24]
 800692a:	f003 0303 	and.w	r3, r3, #3
 800692e:	2b00      	cmp	r3, #0
 8006930:	d003      	beq.n	800693a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f7fa fada 	bl	8000eec <HAL_TIM_IC_CaptureCallback>
 8006938:	e005      	b.n	8006946 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 fb96 	bl	800706c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f000 fb9d 	bl	8007080 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	691b      	ldr	r3, [r3, #16]
 8006952:	f003 0304 	and.w	r3, r3, #4
 8006956:	2b04      	cmp	r3, #4
 8006958:	d122      	bne.n	80069a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	68db      	ldr	r3, [r3, #12]
 8006960:	f003 0304 	and.w	r3, r3, #4
 8006964:	2b04      	cmp	r3, #4
 8006966:	d11b      	bne.n	80069a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f06f 0204 	mvn.w	r2, #4
 8006970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2202      	movs	r2, #2
 8006976:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	699b      	ldr	r3, [r3, #24]
 800697e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006982:	2b00      	cmp	r3, #0
 8006984:	d003      	beq.n	800698e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f7fa fab0 	bl	8000eec <HAL_TIM_IC_CaptureCallback>
 800698c:	e005      	b.n	800699a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 fb6c 	bl	800706c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f000 fb73 	bl	8007080 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	691b      	ldr	r3, [r3, #16]
 80069a6:	f003 0308 	and.w	r3, r3, #8
 80069aa:	2b08      	cmp	r3, #8
 80069ac:	d122      	bne.n	80069f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	f003 0308 	and.w	r3, r3, #8
 80069b8:	2b08      	cmp	r3, #8
 80069ba:	d11b      	bne.n	80069f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f06f 0208 	mvn.w	r2, #8
 80069c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2204      	movs	r2, #4
 80069ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	69db      	ldr	r3, [r3, #28]
 80069d2:	f003 0303 	and.w	r3, r3, #3
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d003      	beq.n	80069e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f7fa fa86 	bl	8000eec <HAL_TIM_IC_CaptureCallback>
 80069e0:	e005      	b.n	80069ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 fb42 	bl	800706c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 fb49 	bl	8007080 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2200      	movs	r2, #0
 80069f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	691b      	ldr	r3, [r3, #16]
 80069fa:	f003 0310 	and.w	r3, r3, #16
 80069fe:	2b10      	cmp	r3, #16
 8006a00:	d122      	bne.n	8006a48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	68db      	ldr	r3, [r3, #12]
 8006a08:	f003 0310 	and.w	r3, r3, #16
 8006a0c:	2b10      	cmp	r3, #16
 8006a0e:	d11b      	bne.n	8006a48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f06f 0210 	mvn.w	r2, #16
 8006a18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2208      	movs	r2, #8
 8006a1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	69db      	ldr	r3, [r3, #28]
 8006a26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d003      	beq.n	8006a36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f7fa fa5c 	bl	8000eec <HAL_TIM_IC_CaptureCallback>
 8006a34:	e005      	b.n	8006a42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f000 fb18 	bl	800706c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f000 fb1f 	bl	8007080 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2200      	movs	r2, #0
 8006a46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	691b      	ldr	r3, [r3, #16]
 8006a4e:	f003 0301 	and.w	r3, r3, #1
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d10e      	bne.n	8006a74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	f003 0301 	and.w	r3, r3, #1
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d107      	bne.n	8006a74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f06f 0201 	mvn.w	r2, #1
 8006a6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 faf2 	bl	8007058 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	691b      	ldr	r3, [r3, #16]
 8006a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a7e:	2b80      	cmp	r3, #128	; 0x80
 8006a80:	d10e      	bne.n	8006aa0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	68db      	ldr	r3, [r3, #12]
 8006a88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a8c:	2b80      	cmp	r3, #128	; 0x80
 8006a8e:	d107      	bne.n	8006aa0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006a98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f001 f8a8 	bl	8007bf0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	691b      	ldr	r3, [r3, #16]
 8006aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aaa:	2b40      	cmp	r3, #64	; 0x40
 8006aac:	d10e      	bne.n	8006acc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ab8:	2b40      	cmp	r3, #64	; 0x40
 8006aba:	d107      	bne.n	8006acc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ac4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 fae4 	bl	8007094 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	691b      	ldr	r3, [r3, #16]
 8006ad2:	f003 0320 	and.w	r3, r3, #32
 8006ad6:	2b20      	cmp	r3, #32
 8006ad8:	d10e      	bne.n	8006af8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	68db      	ldr	r3, [r3, #12]
 8006ae0:	f003 0320 	and.w	r3, r3, #32
 8006ae4:	2b20      	cmp	r3, #32
 8006ae6:	d107      	bne.n	8006af8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f06f 0220 	mvn.w	r2, #32
 8006af0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f001 f872 	bl	8007bdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006af8:	bf00      	nop
 8006afa:	3708      	adds	r7, #8
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b086      	sub	sp, #24
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	60b9      	str	r1, [r7, #8]
 8006b0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d101      	bne.n	8006b1e <HAL_TIM_IC_ConfigChannel+0x1e>
 8006b1a:	2302      	movs	r3, #2
 8006b1c:	e088      	b.n	8006c30 <HAL_TIM_IC_ConfigChannel+0x130>
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2201      	movs	r2, #1
 8006b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d11b      	bne.n	8006b64 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6818      	ldr	r0, [r3, #0]
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	6819      	ldr	r1, [r3, #0]
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	685a      	ldr	r2, [r3, #4]
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	68db      	ldr	r3, [r3, #12]
 8006b3c:	f000 fd96 	bl	800766c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	699a      	ldr	r2, [r3, #24]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f022 020c 	bic.w	r2, r2, #12
 8006b4e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	6999      	ldr	r1, [r3, #24]
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	689a      	ldr	r2, [r3, #8]
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	430a      	orrs	r2, r1
 8006b60:	619a      	str	r2, [r3, #24]
 8006b62:	e060      	b.n	8006c26 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2b04      	cmp	r3, #4
 8006b68:	d11c      	bne.n	8006ba4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	6818      	ldr	r0, [r3, #0]
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	6819      	ldr	r1, [r3, #0]
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	685a      	ldr	r2, [r3, #4]
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	68db      	ldr	r3, [r3, #12]
 8006b7a:	f000 fe1a 	bl	80077b2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	699a      	ldr	r2, [r3, #24]
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006b8c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	6999      	ldr	r1, [r3, #24]
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	021a      	lsls	r2, r3, #8
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	430a      	orrs	r2, r1
 8006ba0:	619a      	str	r2, [r3, #24]
 8006ba2:	e040      	b.n	8006c26 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2b08      	cmp	r3, #8
 8006ba8:	d11b      	bne.n	8006be2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	6818      	ldr	r0, [r3, #0]
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	6819      	ldr	r1, [r3, #0]
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	685a      	ldr	r2, [r3, #4]
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	68db      	ldr	r3, [r3, #12]
 8006bba:	f000 fe67 	bl	800788c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	69da      	ldr	r2, [r3, #28]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f022 020c 	bic.w	r2, r2, #12
 8006bcc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	69d9      	ldr	r1, [r3, #28]
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	689a      	ldr	r2, [r3, #8]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	430a      	orrs	r2, r1
 8006bde:	61da      	str	r2, [r3, #28]
 8006be0:	e021      	b.n	8006c26 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2b0c      	cmp	r3, #12
 8006be6:	d11c      	bne.n	8006c22 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6818      	ldr	r0, [r3, #0]
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	6819      	ldr	r1, [r3, #0]
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	685a      	ldr	r2, [r3, #4]
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	68db      	ldr	r3, [r3, #12]
 8006bf8:	f000 fe84 	bl	8007904 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	69da      	ldr	r2, [r3, #28]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006c0a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	69d9      	ldr	r1, [r3, #28]
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	021a      	lsls	r2, r3, #8
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	430a      	orrs	r2, r1
 8006c1e:	61da      	str	r2, [r3, #28]
 8006c20:	e001      	b.n	8006c26 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006c2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3718      	adds	r7, #24
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b086      	sub	sp, #24
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	60b9      	str	r1, [r7, #8]
 8006c42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c44:	2300      	movs	r3, #0
 8006c46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d101      	bne.n	8006c56 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006c52:	2302      	movs	r3, #2
 8006c54:	e0ae      	b.n	8006db4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2201      	movs	r2, #1
 8006c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2b0c      	cmp	r3, #12
 8006c62:	f200 809f 	bhi.w	8006da4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006c66:	a201      	add	r2, pc, #4	; (adr r2, 8006c6c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c6c:	08006ca1 	.word	0x08006ca1
 8006c70:	08006da5 	.word	0x08006da5
 8006c74:	08006da5 	.word	0x08006da5
 8006c78:	08006da5 	.word	0x08006da5
 8006c7c:	08006ce1 	.word	0x08006ce1
 8006c80:	08006da5 	.word	0x08006da5
 8006c84:	08006da5 	.word	0x08006da5
 8006c88:	08006da5 	.word	0x08006da5
 8006c8c:	08006d23 	.word	0x08006d23
 8006c90:	08006da5 	.word	0x08006da5
 8006c94:	08006da5 	.word	0x08006da5
 8006c98:	08006da5 	.word	0x08006da5
 8006c9c:	08006d63 	.word	0x08006d63
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	68b9      	ldr	r1, [r7, #8]
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f000 fa9e 	bl	80071e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	699a      	ldr	r2, [r3, #24]
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f042 0208 	orr.w	r2, r2, #8
 8006cba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	699a      	ldr	r2, [r3, #24]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f022 0204 	bic.w	r2, r2, #4
 8006cca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	6999      	ldr	r1, [r3, #24]
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	691a      	ldr	r2, [r3, #16]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	430a      	orrs	r2, r1
 8006cdc:	619a      	str	r2, [r3, #24]
      break;
 8006cde:	e064      	b.n	8006daa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	68b9      	ldr	r1, [r7, #8]
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f000 faee 	bl	80072c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	699a      	ldr	r2, [r3, #24]
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	699a      	ldr	r2, [r3, #24]
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	6999      	ldr	r1, [r3, #24]
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	691b      	ldr	r3, [r3, #16]
 8006d16:	021a      	lsls	r2, r3, #8
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	430a      	orrs	r2, r1
 8006d1e:	619a      	str	r2, [r3, #24]
      break;
 8006d20:	e043      	b.n	8006daa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	68b9      	ldr	r1, [r7, #8]
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f000 fb43 	bl	80073b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	69da      	ldr	r2, [r3, #28]
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f042 0208 	orr.w	r2, r2, #8
 8006d3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	69da      	ldr	r2, [r3, #28]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f022 0204 	bic.w	r2, r2, #4
 8006d4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	69d9      	ldr	r1, [r3, #28]
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	691a      	ldr	r2, [r3, #16]
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	430a      	orrs	r2, r1
 8006d5e:	61da      	str	r2, [r3, #28]
      break;
 8006d60:	e023      	b.n	8006daa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	68b9      	ldr	r1, [r7, #8]
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f000 fb97 	bl	800749c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	69da      	ldr	r2, [r3, #28]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	69da      	ldr	r2, [r3, #28]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	69d9      	ldr	r1, [r3, #28]
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	691b      	ldr	r3, [r3, #16]
 8006d98:	021a      	lsls	r2, r3, #8
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	430a      	orrs	r2, r1
 8006da0:	61da      	str	r2, [r3, #28]
      break;
 8006da2:	e002      	b.n	8006daa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	75fb      	strb	r3, [r7, #23]
      break;
 8006da8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2200      	movs	r2, #0
 8006dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006db2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3718      	adds	r7, #24
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d101      	bne.n	8006dd8 <HAL_TIM_ConfigClockSource+0x1c>
 8006dd4:	2302      	movs	r3, #2
 8006dd6:	e0b4      	b.n	8006f42 <HAL_TIM_ConfigClockSource+0x186>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2202      	movs	r2, #2
 8006de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006df6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006dfe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	68ba      	ldr	r2, [r7, #8]
 8006e06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e10:	d03e      	beq.n	8006e90 <HAL_TIM_ConfigClockSource+0xd4>
 8006e12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e16:	f200 8087 	bhi.w	8006f28 <HAL_TIM_ConfigClockSource+0x16c>
 8006e1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e1e:	f000 8086 	beq.w	8006f2e <HAL_TIM_ConfigClockSource+0x172>
 8006e22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e26:	d87f      	bhi.n	8006f28 <HAL_TIM_ConfigClockSource+0x16c>
 8006e28:	2b70      	cmp	r3, #112	; 0x70
 8006e2a:	d01a      	beq.n	8006e62 <HAL_TIM_ConfigClockSource+0xa6>
 8006e2c:	2b70      	cmp	r3, #112	; 0x70
 8006e2e:	d87b      	bhi.n	8006f28 <HAL_TIM_ConfigClockSource+0x16c>
 8006e30:	2b60      	cmp	r3, #96	; 0x60
 8006e32:	d050      	beq.n	8006ed6 <HAL_TIM_ConfigClockSource+0x11a>
 8006e34:	2b60      	cmp	r3, #96	; 0x60
 8006e36:	d877      	bhi.n	8006f28 <HAL_TIM_ConfigClockSource+0x16c>
 8006e38:	2b50      	cmp	r3, #80	; 0x50
 8006e3a:	d03c      	beq.n	8006eb6 <HAL_TIM_ConfigClockSource+0xfa>
 8006e3c:	2b50      	cmp	r3, #80	; 0x50
 8006e3e:	d873      	bhi.n	8006f28 <HAL_TIM_ConfigClockSource+0x16c>
 8006e40:	2b40      	cmp	r3, #64	; 0x40
 8006e42:	d058      	beq.n	8006ef6 <HAL_TIM_ConfigClockSource+0x13a>
 8006e44:	2b40      	cmp	r3, #64	; 0x40
 8006e46:	d86f      	bhi.n	8006f28 <HAL_TIM_ConfigClockSource+0x16c>
 8006e48:	2b30      	cmp	r3, #48	; 0x30
 8006e4a:	d064      	beq.n	8006f16 <HAL_TIM_ConfigClockSource+0x15a>
 8006e4c:	2b30      	cmp	r3, #48	; 0x30
 8006e4e:	d86b      	bhi.n	8006f28 <HAL_TIM_ConfigClockSource+0x16c>
 8006e50:	2b20      	cmp	r3, #32
 8006e52:	d060      	beq.n	8006f16 <HAL_TIM_ConfigClockSource+0x15a>
 8006e54:	2b20      	cmp	r3, #32
 8006e56:	d867      	bhi.n	8006f28 <HAL_TIM_ConfigClockSource+0x16c>
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d05c      	beq.n	8006f16 <HAL_TIM_ConfigClockSource+0x15a>
 8006e5c:	2b10      	cmp	r3, #16
 8006e5e:	d05a      	beq.n	8006f16 <HAL_TIM_ConfigClockSource+0x15a>
 8006e60:	e062      	b.n	8006f28 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6818      	ldr	r0, [r3, #0]
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	6899      	ldr	r1, [r3, #8]
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	685a      	ldr	r2, [r3, #4]
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	f000 fd9f 	bl	80079b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	689b      	ldr	r3, [r3, #8]
 8006e7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006e84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	68ba      	ldr	r2, [r7, #8]
 8006e8c:	609a      	str	r2, [r3, #8]
      break;
 8006e8e:	e04f      	b.n	8006f30 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6818      	ldr	r0, [r3, #0]
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	6899      	ldr	r1, [r3, #8]
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	685a      	ldr	r2, [r3, #4]
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	68db      	ldr	r3, [r3, #12]
 8006ea0:	f000 fd88 	bl	80079b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	689a      	ldr	r2, [r3, #8]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006eb2:	609a      	str	r2, [r3, #8]
      break;
 8006eb4:	e03c      	b.n	8006f30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6818      	ldr	r0, [r3, #0]
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	6859      	ldr	r1, [r3, #4]
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	68db      	ldr	r3, [r3, #12]
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	f000 fc46 	bl	8007754 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	2150      	movs	r1, #80	; 0x50
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f000 fd55 	bl	800797e <TIM_ITRx_SetConfig>
      break;
 8006ed4:	e02c      	b.n	8006f30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6818      	ldr	r0, [r3, #0]
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	6859      	ldr	r1, [r3, #4]
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	68db      	ldr	r3, [r3, #12]
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	f000 fca2 	bl	800782c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	2160      	movs	r1, #96	; 0x60
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f000 fd45 	bl	800797e <TIM_ITRx_SetConfig>
      break;
 8006ef4:	e01c      	b.n	8006f30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6818      	ldr	r0, [r3, #0]
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	6859      	ldr	r1, [r3, #4]
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	461a      	mov	r2, r3
 8006f04:	f000 fc26 	bl	8007754 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2140      	movs	r1, #64	; 0x40
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f000 fd35 	bl	800797e <TIM_ITRx_SetConfig>
      break;
 8006f14:	e00c      	b.n	8006f30 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4619      	mov	r1, r3
 8006f20:	4610      	mov	r0, r2
 8006f22:	f000 fd2c 	bl	800797e <TIM_ITRx_SetConfig>
      break;
 8006f26:	e003      	b.n	8006f30 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	73fb      	strb	r3, [r7, #15]
      break;
 8006f2c:	e000      	b.n	8006f30 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006f2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2201      	movs	r2, #1
 8006f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3710      	adds	r7, #16
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}

08006f4a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006f4a:	b580      	push	{r7, lr}
 8006f4c:	b082      	sub	sp, #8
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	6078      	str	r0, [r7, #4]
 8006f52:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d101      	bne.n	8006f62 <HAL_TIM_SlaveConfigSynchro+0x18>
 8006f5e:	2302      	movs	r3, #2
 8006f60:	e031      	b.n	8006fc6 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2201      	movs	r2, #1
 8006f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2202      	movs	r2, #2
 8006f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006f72:	6839      	ldr	r1, [r7, #0]
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 fae7 	bl	8007548 <TIM_SlaveTimer_SetConfig>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d009      	beq.n	8006f94 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2201      	movs	r2, #1
 8006f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006f90:	2301      	movs	r3, #1
 8006f92:	e018      	b.n	8006fc6 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	68da      	ldr	r2, [r3, #12]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fa2:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	68da      	ldr	r2, [r3, #12]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006fb2:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006fc4:	2300      	movs	r3, #0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3708      	adds	r7, #8
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
	...

08006fd0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b085      	sub	sp, #20
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	2b0c      	cmp	r3, #12
 8006fe2:	d831      	bhi.n	8007048 <HAL_TIM_ReadCapturedValue+0x78>
 8006fe4:	a201      	add	r2, pc, #4	; (adr r2, 8006fec <HAL_TIM_ReadCapturedValue+0x1c>)
 8006fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fea:	bf00      	nop
 8006fec:	08007021 	.word	0x08007021
 8006ff0:	08007049 	.word	0x08007049
 8006ff4:	08007049 	.word	0x08007049
 8006ff8:	08007049 	.word	0x08007049
 8006ffc:	0800702b 	.word	0x0800702b
 8007000:	08007049 	.word	0x08007049
 8007004:	08007049 	.word	0x08007049
 8007008:	08007049 	.word	0x08007049
 800700c:	08007035 	.word	0x08007035
 8007010:	08007049 	.word	0x08007049
 8007014:	08007049 	.word	0x08007049
 8007018:	08007049 	.word	0x08007049
 800701c:	0800703f 	.word	0x0800703f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007026:	60fb      	str	r3, [r7, #12]

      break;
 8007028:	e00f      	b.n	800704a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007030:	60fb      	str	r3, [r7, #12]

      break;
 8007032:	e00a      	b.n	800704a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800703a:	60fb      	str	r3, [r7, #12]

      break;
 800703c:	e005      	b.n	800704a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007044:	60fb      	str	r3, [r7, #12]

      break;
 8007046:	e000      	b.n	800704a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007048:	bf00      	nop
  }

  return tmpreg;
 800704a:	68fb      	ldr	r3, [r7, #12]
}
 800704c:	4618      	mov	r0, r3
 800704e:	3714      	adds	r7, #20
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr

08007058 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007058:	b480      	push	{r7}
 800705a:	b083      	sub	sp, #12
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007060:	bf00      	nop
 8007062:	370c      	adds	r7, #12
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr

0800706c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800706c:	b480      	push	{r7}
 800706e:	b083      	sub	sp, #12
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007074:	bf00      	nop
 8007076:	370c      	adds	r7, #12
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr

08007080 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007080:	b480      	push	{r7}
 8007082:	b083      	sub	sp, #12
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007088:	bf00      	nop
 800708a:	370c      	adds	r7, #12
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800709c:	bf00      	nop
 800709e:	370c      	adds	r7, #12
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b085      	sub	sp, #20
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	4a40      	ldr	r2, [pc, #256]	; (80071bc <TIM_Base_SetConfig+0x114>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d013      	beq.n	80070e8 <TIM_Base_SetConfig+0x40>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070c6:	d00f      	beq.n	80070e8 <TIM_Base_SetConfig+0x40>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	4a3d      	ldr	r2, [pc, #244]	; (80071c0 <TIM_Base_SetConfig+0x118>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d00b      	beq.n	80070e8 <TIM_Base_SetConfig+0x40>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	4a3c      	ldr	r2, [pc, #240]	; (80071c4 <TIM_Base_SetConfig+0x11c>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d007      	beq.n	80070e8 <TIM_Base_SetConfig+0x40>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	4a3b      	ldr	r2, [pc, #236]	; (80071c8 <TIM_Base_SetConfig+0x120>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d003      	beq.n	80070e8 <TIM_Base_SetConfig+0x40>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	4a3a      	ldr	r2, [pc, #232]	; (80071cc <TIM_Base_SetConfig+0x124>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d108      	bne.n	80070fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	68fa      	ldr	r2, [r7, #12]
 80070f6:	4313      	orrs	r3, r2
 80070f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	4a2f      	ldr	r2, [pc, #188]	; (80071bc <TIM_Base_SetConfig+0x114>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d02b      	beq.n	800715a <TIM_Base_SetConfig+0xb2>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007108:	d027      	beq.n	800715a <TIM_Base_SetConfig+0xb2>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	4a2c      	ldr	r2, [pc, #176]	; (80071c0 <TIM_Base_SetConfig+0x118>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d023      	beq.n	800715a <TIM_Base_SetConfig+0xb2>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	4a2b      	ldr	r2, [pc, #172]	; (80071c4 <TIM_Base_SetConfig+0x11c>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d01f      	beq.n	800715a <TIM_Base_SetConfig+0xb2>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	4a2a      	ldr	r2, [pc, #168]	; (80071c8 <TIM_Base_SetConfig+0x120>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d01b      	beq.n	800715a <TIM_Base_SetConfig+0xb2>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	4a29      	ldr	r2, [pc, #164]	; (80071cc <TIM_Base_SetConfig+0x124>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d017      	beq.n	800715a <TIM_Base_SetConfig+0xb2>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4a28      	ldr	r2, [pc, #160]	; (80071d0 <TIM_Base_SetConfig+0x128>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d013      	beq.n	800715a <TIM_Base_SetConfig+0xb2>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	4a27      	ldr	r2, [pc, #156]	; (80071d4 <TIM_Base_SetConfig+0x12c>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d00f      	beq.n	800715a <TIM_Base_SetConfig+0xb2>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	4a26      	ldr	r2, [pc, #152]	; (80071d8 <TIM_Base_SetConfig+0x130>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d00b      	beq.n	800715a <TIM_Base_SetConfig+0xb2>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	4a25      	ldr	r2, [pc, #148]	; (80071dc <TIM_Base_SetConfig+0x134>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d007      	beq.n	800715a <TIM_Base_SetConfig+0xb2>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	4a24      	ldr	r2, [pc, #144]	; (80071e0 <TIM_Base_SetConfig+0x138>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d003      	beq.n	800715a <TIM_Base_SetConfig+0xb2>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	4a23      	ldr	r2, [pc, #140]	; (80071e4 <TIM_Base_SetConfig+0x13c>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d108      	bne.n	800716c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007160:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	68db      	ldr	r3, [r3, #12]
 8007166:	68fa      	ldr	r2, [r7, #12]
 8007168:	4313      	orrs	r3, r2
 800716a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	695b      	ldr	r3, [r3, #20]
 8007176:	4313      	orrs	r3, r2
 8007178:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	68fa      	ldr	r2, [r7, #12]
 800717e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	689a      	ldr	r2, [r3, #8]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	4a0a      	ldr	r2, [pc, #40]	; (80071bc <TIM_Base_SetConfig+0x114>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d003      	beq.n	80071a0 <TIM_Base_SetConfig+0xf8>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	4a0c      	ldr	r2, [pc, #48]	; (80071cc <TIM_Base_SetConfig+0x124>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d103      	bne.n	80071a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	691a      	ldr	r2, [r3, #16]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2201      	movs	r2, #1
 80071ac:	615a      	str	r2, [r3, #20]
}
 80071ae:	bf00      	nop
 80071b0:	3714      	adds	r7, #20
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr
 80071ba:	bf00      	nop
 80071bc:	40010000 	.word	0x40010000
 80071c0:	40000400 	.word	0x40000400
 80071c4:	40000800 	.word	0x40000800
 80071c8:	40000c00 	.word	0x40000c00
 80071cc:	40010400 	.word	0x40010400
 80071d0:	40014000 	.word	0x40014000
 80071d4:	40014400 	.word	0x40014400
 80071d8:	40014800 	.word	0x40014800
 80071dc:	40001800 	.word	0x40001800
 80071e0:	40001c00 	.word	0x40001c00
 80071e4:	40002000 	.word	0x40002000

080071e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b087      	sub	sp, #28
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6a1b      	ldr	r3, [r3, #32]
 80071f6:	f023 0201 	bic.w	r2, r3, #1
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6a1b      	ldr	r3, [r3, #32]
 8007202:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	699b      	ldr	r3, [r3, #24]
 800720e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007216:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f023 0303 	bic.w	r3, r3, #3
 800721e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	68fa      	ldr	r2, [r7, #12]
 8007226:	4313      	orrs	r3, r2
 8007228:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	f023 0302 	bic.w	r3, r3, #2
 8007230:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	697a      	ldr	r2, [r7, #20]
 8007238:	4313      	orrs	r3, r2
 800723a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	4a20      	ldr	r2, [pc, #128]	; (80072c0 <TIM_OC1_SetConfig+0xd8>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d003      	beq.n	800724c <TIM_OC1_SetConfig+0x64>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	4a1f      	ldr	r2, [pc, #124]	; (80072c4 <TIM_OC1_SetConfig+0xdc>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d10c      	bne.n	8007266 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	f023 0308 	bic.w	r3, r3, #8
 8007252:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	68db      	ldr	r3, [r3, #12]
 8007258:	697a      	ldr	r2, [r7, #20]
 800725a:	4313      	orrs	r3, r2
 800725c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	f023 0304 	bic.w	r3, r3, #4
 8007264:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	4a15      	ldr	r2, [pc, #84]	; (80072c0 <TIM_OC1_SetConfig+0xd8>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d003      	beq.n	8007276 <TIM_OC1_SetConfig+0x8e>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	4a14      	ldr	r2, [pc, #80]	; (80072c4 <TIM_OC1_SetConfig+0xdc>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d111      	bne.n	800729a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800727c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007284:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	695b      	ldr	r3, [r3, #20]
 800728a:	693a      	ldr	r2, [r7, #16]
 800728c:	4313      	orrs	r3, r2
 800728e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	699b      	ldr	r3, [r3, #24]
 8007294:	693a      	ldr	r2, [r7, #16]
 8007296:	4313      	orrs	r3, r2
 8007298:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	693a      	ldr	r2, [r7, #16]
 800729e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	68fa      	ldr	r2, [r7, #12]
 80072a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	685a      	ldr	r2, [r3, #4]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	697a      	ldr	r2, [r7, #20]
 80072b2:	621a      	str	r2, [r3, #32]
}
 80072b4:	bf00      	nop
 80072b6:	371c      	adds	r7, #28
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr
 80072c0:	40010000 	.word	0x40010000
 80072c4:	40010400 	.word	0x40010400

080072c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b087      	sub	sp, #28
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6a1b      	ldr	r3, [r3, #32]
 80072d6:	f023 0210 	bic.w	r2, r3, #16
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6a1b      	ldr	r3, [r3, #32]
 80072e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	699b      	ldr	r3, [r3, #24]
 80072ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	021b      	lsls	r3, r3, #8
 8007306:	68fa      	ldr	r2, [r7, #12]
 8007308:	4313      	orrs	r3, r2
 800730a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	f023 0320 	bic.w	r3, r3, #32
 8007312:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	011b      	lsls	r3, r3, #4
 800731a:	697a      	ldr	r2, [r7, #20]
 800731c:	4313      	orrs	r3, r2
 800731e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	4a22      	ldr	r2, [pc, #136]	; (80073ac <TIM_OC2_SetConfig+0xe4>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d003      	beq.n	8007330 <TIM_OC2_SetConfig+0x68>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	4a21      	ldr	r2, [pc, #132]	; (80073b0 <TIM_OC2_SetConfig+0xe8>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d10d      	bne.n	800734c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007336:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	68db      	ldr	r3, [r3, #12]
 800733c:	011b      	lsls	r3, r3, #4
 800733e:	697a      	ldr	r2, [r7, #20]
 8007340:	4313      	orrs	r3, r2
 8007342:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800734a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	4a17      	ldr	r2, [pc, #92]	; (80073ac <TIM_OC2_SetConfig+0xe4>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d003      	beq.n	800735c <TIM_OC2_SetConfig+0x94>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	4a16      	ldr	r2, [pc, #88]	; (80073b0 <TIM_OC2_SetConfig+0xe8>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d113      	bne.n	8007384 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007362:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800736a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	695b      	ldr	r3, [r3, #20]
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	693a      	ldr	r2, [r7, #16]
 8007374:	4313      	orrs	r3, r2
 8007376:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	699b      	ldr	r3, [r3, #24]
 800737c:	009b      	lsls	r3, r3, #2
 800737e:	693a      	ldr	r2, [r7, #16]
 8007380:	4313      	orrs	r3, r2
 8007382:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	693a      	ldr	r2, [r7, #16]
 8007388:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	68fa      	ldr	r2, [r7, #12]
 800738e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	685a      	ldr	r2, [r3, #4]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	697a      	ldr	r2, [r7, #20]
 800739c:	621a      	str	r2, [r3, #32]
}
 800739e:	bf00      	nop
 80073a0:	371c      	adds	r7, #28
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr
 80073aa:	bf00      	nop
 80073ac:	40010000 	.word	0x40010000
 80073b0:	40010400 	.word	0x40010400

080073b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b087      	sub	sp, #28
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6a1b      	ldr	r3, [r3, #32]
 80073c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6a1b      	ldr	r3, [r3, #32]
 80073ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	69db      	ldr	r3, [r3, #28]
 80073da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f023 0303 	bic.w	r3, r3, #3
 80073ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	68fa      	ldr	r2, [r7, #12]
 80073f2:	4313      	orrs	r3, r2
 80073f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80073fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	021b      	lsls	r3, r3, #8
 8007404:	697a      	ldr	r2, [r7, #20]
 8007406:	4313      	orrs	r3, r2
 8007408:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4a21      	ldr	r2, [pc, #132]	; (8007494 <TIM_OC3_SetConfig+0xe0>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d003      	beq.n	800741a <TIM_OC3_SetConfig+0x66>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	4a20      	ldr	r2, [pc, #128]	; (8007498 <TIM_OC3_SetConfig+0xe4>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d10d      	bne.n	8007436 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007420:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	68db      	ldr	r3, [r3, #12]
 8007426:	021b      	lsls	r3, r3, #8
 8007428:	697a      	ldr	r2, [r7, #20]
 800742a:	4313      	orrs	r3, r2
 800742c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007434:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	4a16      	ldr	r2, [pc, #88]	; (8007494 <TIM_OC3_SetConfig+0xe0>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d003      	beq.n	8007446 <TIM_OC3_SetConfig+0x92>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	4a15      	ldr	r2, [pc, #84]	; (8007498 <TIM_OC3_SetConfig+0xe4>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d113      	bne.n	800746e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800744c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007454:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	695b      	ldr	r3, [r3, #20]
 800745a:	011b      	lsls	r3, r3, #4
 800745c:	693a      	ldr	r2, [r7, #16]
 800745e:	4313      	orrs	r3, r2
 8007460:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	699b      	ldr	r3, [r3, #24]
 8007466:	011b      	lsls	r3, r3, #4
 8007468:	693a      	ldr	r2, [r7, #16]
 800746a:	4313      	orrs	r3, r2
 800746c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	693a      	ldr	r2, [r7, #16]
 8007472:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	68fa      	ldr	r2, [r7, #12]
 8007478:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	685a      	ldr	r2, [r3, #4]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	697a      	ldr	r2, [r7, #20]
 8007486:	621a      	str	r2, [r3, #32]
}
 8007488:	bf00      	nop
 800748a:	371c      	adds	r7, #28
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr
 8007494:	40010000 	.word	0x40010000
 8007498:	40010400 	.word	0x40010400

0800749c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800749c:	b480      	push	{r7}
 800749e:	b087      	sub	sp, #28
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6a1b      	ldr	r3, [r3, #32]
 80074aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6a1b      	ldr	r3, [r3, #32]
 80074b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	69db      	ldr	r3, [r3, #28]
 80074c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	021b      	lsls	r3, r3, #8
 80074da:	68fa      	ldr	r2, [r7, #12]
 80074dc:	4313      	orrs	r3, r2
 80074de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80074e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	689b      	ldr	r3, [r3, #8]
 80074ec:	031b      	lsls	r3, r3, #12
 80074ee:	693a      	ldr	r2, [r7, #16]
 80074f0:	4313      	orrs	r3, r2
 80074f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	4a12      	ldr	r2, [pc, #72]	; (8007540 <TIM_OC4_SetConfig+0xa4>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d003      	beq.n	8007504 <TIM_OC4_SetConfig+0x68>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	4a11      	ldr	r2, [pc, #68]	; (8007544 <TIM_OC4_SetConfig+0xa8>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d109      	bne.n	8007518 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800750a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	695b      	ldr	r3, [r3, #20]
 8007510:	019b      	lsls	r3, r3, #6
 8007512:	697a      	ldr	r2, [r7, #20]
 8007514:	4313      	orrs	r3, r2
 8007516:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	697a      	ldr	r2, [r7, #20]
 800751c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	68fa      	ldr	r2, [r7, #12]
 8007522:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	685a      	ldr	r2, [r3, #4]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	693a      	ldr	r2, [r7, #16]
 8007530:	621a      	str	r2, [r3, #32]
}
 8007532:	bf00      	nop
 8007534:	371c      	adds	r7, #28
 8007536:	46bd      	mov	sp, r7
 8007538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753c:	4770      	bx	lr
 800753e:	bf00      	nop
 8007540:	40010000 	.word	0x40010000
 8007544:	40010400 	.word	0x40010400

08007548 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b086      	sub	sp, #24
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007552:	2300      	movs	r3, #0
 8007554:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007564:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	693a      	ldr	r2, [r7, #16]
 800756c:	4313      	orrs	r3, r2
 800756e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	f023 0307 	bic.w	r3, r3, #7
 8007576:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	693a      	ldr	r2, [r7, #16]
 800757e:	4313      	orrs	r3, r2
 8007580:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	693a      	ldr	r2, [r7, #16]
 8007588:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	2b70      	cmp	r3, #112	; 0x70
 8007590:	d01a      	beq.n	80075c8 <TIM_SlaveTimer_SetConfig+0x80>
 8007592:	2b70      	cmp	r3, #112	; 0x70
 8007594:	d860      	bhi.n	8007658 <TIM_SlaveTimer_SetConfig+0x110>
 8007596:	2b60      	cmp	r3, #96	; 0x60
 8007598:	d054      	beq.n	8007644 <TIM_SlaveTimer_SetConfig+0xfc>
 800759a:	2b60      	cmp	r3, #96	; 0x60
 800759c:	d85c      	bhi.n	8007658 <TIM_SlaveTimer_SetConfig+0x110>
 800759e:	2b50      	cmp	r3, #80	; 0x50
 80075a0:	d046      	beq.n	8007630 <TIM_SlaveTimer_SetConfig+0xe8>
 80075a2:	2b50      	cmp	r3, #80	; 0x50
 80075a4:	d858      	bhi.n	8007658 <TIM_SlaveTimer_SetConfig+0x110>
 80075a6:	2b40      	cmp	r3, #64	; 0x40
 80075a8:	d019      	beq.n	80075de <TIM_SlaveTimer_SetConfig+0x96>
 80075aa:	2b40      	cmp	r3, #64	; 0x40
 80075ac:	d854      	bhi.n	8007658 <TIM_SlaveTimer_SetConfig+0x110>
 80075ae:	2b30      	cmp	r3, #48	; 0x30
 80075b0:	d055      	beq.n	800765e <TIM_SlaveTimer_SetConfig+0x116>
 80075b2:	2b30      	cmp	r3, #48	; 0x30
 80075b4:	d850      	bhi.n	8007658 <TIM_SlaveTimer_SetConfig+0x110>
 80075b6:	2b20      	cmp	r3, #32
 80075b8:	d051      	beq.n	800765e <TIM_SlaveTimer_SetConfig+0x116>
 80075ba:	2b20      	cmp	r3, #32
 80075bc:	d84c      	bhi.n	8007658 <TIM_SlaveTimer_SetConfig+0x110>
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d04d      	beq.n	800765e <TIM_SlaveTimer_SetConfig+0x116>
 80075c2:	2b10      	cmp	r3, #16
 80075c4:	d04b      	beq.n	800765e <TIM_SlaveTimer_SetConfig+0x116>
 80075c6:	e047      	b.n	8007658 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6818      	ldr	r0, [r3, #0]
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	68d9      	ldr	r1, [r3, #12]
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	689a      	ldr	r2, [r3, #8]
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	691b      	ldr	r3, [r3, #16]
 80075d8:	f000 f9ec 	bl	80079b4 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80075dc:	e040      	b.n	8007660 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	2b05      	cmp	r3, #5
 80075e4:	d101      	bne.n	80075ea <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80075e6:	2301      	movs	r3, #1
 80075e8:	e03b      	b.n	8007662 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	6a1b      	ldr	r3, [r3, #32]
 80075f0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	6a1a      	ldr	r2, [r3, #32]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f022 0201 	bic.w	r2, r2, #1
 8007600:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	699b      	ldr	r3, [r3, #24]
 8007608:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007610:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	691b      	ldr	r3, [r3, #16]
 8007616:	011b      	lsls	r3, r3, #4
 8007618:	68ba      	ldr	r2, [r7, #8]
 800761a:	4313      	orrs	r3, r2
 800761c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	68ba      	ldr	r2, [r7, #8]
 8007624:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	68fa      	ldr	r2, [r7, #12]
 800762c:	621a      	str	r2, [r3, #32]
      break;
 800762e:	e017      	b.n	8007660 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6818      	ldr	r0, [r3, #0]
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	6899      	ldr	r1, [r3, #8]
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	691b      	ldr	r3, [r3, #16]
 800763c:	461a      	mov	r2, r3
 800763e:	f000 f889 	bl	8007754 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8007642:	e00d      	b.n	8007660 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6818      	ldr	r0, [r3, #0]
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	6899      	ldr	r1, [r3, #8]
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	691b      	ldr	r3, [r3, #16]
 8007650:	461a      	mov	r2, r3
 8007652:	f000 f8eb 	bl	800782c <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8007656:	e003      	b.n	8007660 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8007658:	2301      	movs	r3, #1
 800765a:	75fb      	strb	r3, [r7, #23]
      break;
 800765c:	e000      	b.n	8007660 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800765e:	bf00      	nop
  }

  return status;
 8007660:	7dfb      	ldrb	r3, [r7, #23]
}
 8007662:	4618      	mov	r0, r3
 8007664:	3718      	adds	r7, #24
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
	...

0800766c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800766c:	b480      	push	{r7}
 800766e:	b087      	sub	sp, #28
 8007670:	af00      	add	r7, sp, #0
 8007672:	60f8      	str	r0, [r7, #12]
 8007674:	60b9      	str	r1, [r7, #8]
 8007676:	607a      	str	r2, [r7, #4]
 8007678:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	6a1b      	ldr	r3, [r3, #32]
 800767e:	f023 0201 	bic.w	r2, r3, #1
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	699b      	ldr	r3, [r3, #24]
 800768a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	6a1b      	ldr	r3, [r3, #32]
 8007690:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	4a28      	ldr	r2, [pc, #160]	; (8007738 <TIM_TI1_SetConfig+0xcc>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d01b      	beq.n	80076d2 <TIM_TI1_SetConfig+0x66>
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076a0:	d017      	beq.n	80076d2 <TIM_TI1_SetConfig+0x66>
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	4a25      	ldr	r2, [pc, #148]	; (800773c <TIM_TI1_SetConfig+0xd0>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d013      	beq.n	80076d2 <TIM_TI1_SetConfig+0x66>
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	4a24      	ldr	r2, [pc, #144]	; (8007740 <TIM_TI1_SetConfig+0xd4>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d00f      	beq.n	80076d2 <TIM_TI1_SetConfig+0x66>
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	4a23      	ldr	r2, [pc, #140]	; (8007744 <TIM_TI1_SetConfig+0xd8>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d00b      	beq.n	80076d2 <TIM_TI1_SetConfig+0x66>
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	4a22      	ldr	r2, [pc, #136]	; (8007748 <TIM_TI1_SetConfig+0xdc>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d007      	beq.n	80076d2 <TIM_TI1_SetConfig+0x66>
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	4a21      	ldr	r2, [pc, #132]	; (800774c <TIM_TI1_SetConfig+0xe0>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d003      	beq.n	80076d2 <TIM_TI1_SetConfig+0x66>
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	4a20      	ldr	r2, [pc, #128]	; (8007750 <TIM_TI1_SetConfig+0xe4>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d101      	bne.n	80076d6 <TIM_TI1_SetConfig+0x6a>
 80076d2:	2301      	movs	r3, #1
 80076d4:	e000      	b.n	80076d8 <TIM_TI1_SetConfig+0x6c>
 80076d6:	2300      	movs	r3, #0
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d008      	beq.n	80076ee <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	f023 0303 	bic.w	r3, r3, #3
 80076e2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80076e4:	697a      	ldr	r2, [r7, #20]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	4313      	orrs	r3, r2
 80076ea:	617b      	str	r3, [r7, #20]
 80076ec:	e003      	b.n	80076f6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	f043 0301 	orr.w	r3, r3, #1
 80076f4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80076fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	011b      	lsls	r3, r3, #4
 8007702:	b2db      	uxtb	r3, r3
 8007704:	697a      	ldr	r2, [r7, #20]
 8007706:	4313      	orrs	r3, r2
 8007708:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	f023 030a 	bic.w	r3, r3, #10
 8007710:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	f003 030a 	and.w	r3, r3, #10
 8007718:	693a      	ldr	r2, [r7, #16]
 800771a:	4313      	orrs	r3, r2
 800771c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	697a      	ldr	r2, [r7, #20]
 8007722:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	693a      	ldr	r2, [r7, #16]
 8007728:	621a      	str	r2, [r3, #32]
}
 800772a:	bf00      	nop
 800772c:	371c      	adds	r7, #28
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr
 8007736:	bf00      	nop
 8007738:	40010000 	.word	0x40010000
 800773c:	40000400 	.word	0x40000400
 8007740:	40000800 	.word	0x40000800
 8007744:	40000c00 	.word	0x40000c00
 8007748:	40010400 	.word	0x40010400
 800774c:	40014000 	.word	0x40014000
 8007750:	40001800 	.word	0x40001800

08007754 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007754:	b480      	push	{r7}
 8007756:	b087      	sub	sp, #28
 8007758:	af00      	add	r7, sp, #0
 800775a:	60f8      	str	r0, [r7, #12]
 800775c:	60b9      	str	r1, [r7, #8]
 800775e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	6a1b      	ldr	r3, [r3, #32]
 8007764:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	6a1b      	ldr	r3, [r3, #32]
 800776a:	f023 0201 	bic.w	r2, r3, #1
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	699b      	ldr	r3, [r3, #24]
 8007776:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800777e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	011b      	lsls	r3, r3, #4
 8007784:	693a      	ldr	r2, [r7, #16]
 8007786:	4313      	orrs	r3, r2
 8007788:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	f023 030a 	bic.w	r3, r3, #10
 8007790:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007792:	697a      	ldr	r2, [r7, #20]
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	4313      	orrs	r3, r2
 8007798:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	693a      	ldr	r2, [r7, #16]
 800779e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	697a      	ldr	r2, [r7, #20]
 80077a4:	621a      	str	r2, [r3, #32]
}
 80077a6:	bf00      	nop
 80077a8:	371c      	adds	r7, #28
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr

080077b2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80077b2:	b480      	push	{r7}
 80077b4:	b087      	sub	sp, #28
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	60f8      	str	r0, [r7, #12]
 80077ba:	60b9      	str	r1, [r7, #8]
 80077bc:	607a      	str	r2, [r7, #4]
 80077be:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	6a1b      	ldr	r3, [r3, #32]
 80077c4:	f023 0210 	bic.w	r2, r3, #16
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	699b      	ldr	r3, [r3, #24]
 80077d0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	6a1b      	ldr	r3, [r3, #32]
 80077d6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077de:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	021b      	lsls	r3, r3, #8
 80077e4:	697a      	ldr	r2, [r7, #20]
 80077e6:	4313      	orrs	r3, r2
 80077e8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80077f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	031b      	lsls	r3, r3, #12
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	697a      	ldr	r2, [r7, #20]
 80077fa:	4313      	orrs	r3, r2
 80077fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007804:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	011b      	lsls	r3, r3, #4
 800780a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800780e:	693a      	ldr	r2, [r7, #16]
 8007810:	4313      	orrs	r3, r2
 8007812:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	697a      	ldr	r2, [r7, #20]
 8007818:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	693a      	ldr	r2, [r7, #16]
 800781e:	621a      	str	r2, [r3, #32]
}
 8007820:	bf00      	nop
 8007822:	371c      	adds	r7, #28
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800782c:	b480      	push	{r7}
 800782e:	b087      	sub	sp, #28
 8007830:	af00      	add	r7, sp, #0
 8007832:	60f8      	str	r0, [r7, #12]
 8007834:	60b9      	str	r1, [r7, #8]
 8007836:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	6a1b      	ldr	r3, [r3, #32]
 800783c:	f023 0210 	bic.w	r2, r3, #16
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	699b      	ldr	r3, [r3, #24]
 8007848:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	6a1b      	ldr	r3, [r3, #32]
 800784e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007856:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	031b      	lsls	r3, r3, #12
 800785c:	697a      	ldr	r2, [r7, #20]
 800785e:	4313      	orrs	r3, r2
 8007860:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007868:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	011b      	lsls	r3, r3, #4
 800786e:	693a      	ldr	r2, [r7, #16]
 8007870:	4313      	orrs	r3, r2
 8007872:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	697a      	ldr	r2, [r7, #20]
 8007878:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	693a      	ldr	r2, [r7, #16]
 800787e:	621a      	str	r2, [r3, #32]
}
 8007880:	bf00      	nop
 8007882:	371c      	adds	r7, #28
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr

0800788c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800788c:	b480      	push	{r7}
 800788e:	b087      	sub	sp, #28
 8007890:	af00      	add	r7, sp, #0
 8007892:	60f8      	str	r0, [r7, #12]
 8007894:	60b9      	str	r1, [r7, #8]
 8007896:	607a      	str	r2, [r7, #4]
 8007898:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	6a1b      	ldr	r3, [r3, #32]
 800789e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	69db      	ldr	r3, [r3, #28]
 80078aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	6a1b      	ldr	r3, [r3, #32]
 80078b0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	f023 0303 	bic.w	r3, r3, #3
 80078b8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80078ba:	697a      	ldr	r2, [r7, #20]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	4313      	orrs	r3, r2
 80078c0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80078c8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	011b      	lsls	r3, r3, #4
 80078ce:	b2db      	uxtb	r3, r3
 80078d0:	697a      	ldr	r2, [r7, #20]
 80078d2:	4313      	orrs	r3, r2
 80078d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80078dc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	021b      	lsls	r3, r3, #8
 80078e2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80078e6:	693a      	ldr	r2, [r7, #16]
 80078e8:	4313      	orrs	r3, r2
 80078ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	697a      	ldr	r2, [r7, #20]
 80078f0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	693a      	ldr	r2, [r7, #16]
 80078f6:	621a      	str	r2, [r3, #32]
}
 80078f8:	bf00      	nop
 80078fa:	371c      	adds	r7, #28
 80078fc:	46bd      	mov	sp, r7
 80078fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007902:	4770      	bx	lr

08007904 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007904:	b480      	push	{r7}
 8007906:	b087      	sub	sp, #28
 8007908:	af00      	add	r7, sp, #0
 800790a:	60f8      	str	r0, [r7, #12]
 800790c:	60b9      	str	r1, [r7, #8]
 800790e:	607a      	str	r2, [r7, #4]
 8007910:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	6a1b      	ldr	r3, [r3, #32]
 8007916:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	69db      	ldr	r3, [r3, #28]
 8007922:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	6a1b      	ldr	r3, [r3, #32]
 8007928:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007930:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	021b      	lsls	r3, r3, #8
 8007936:	697a      	ldr	r2, [r7, #20]
 8007938:	4313      	orrs	r3, r2
 800793a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007942:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	031b      	lsls	r3, r3, #12
 8007948:	b29b      	uxth	r3, r3
 800794a:	697a      	ldr	r2, [r7, #20]
 800794c:	4313      	orrs	r3, r2
 800794e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007956:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	031b      	lsls	r3, r3, #12
 800795c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007960:	693a      	ldr	r2, [r7, #16]
 8007962:	4313      	orrs	r3, r2
 8007964:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	697a      	ldr	r2, [r7, #20]
 800796a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	693a      	ldr	r2, [r7, #16]
 8007970:	621a      	str	r2, [r3, #32]
}
 8007972:	bf00      	nop
 8007974:	371c      	adds	r7, #28
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr

0800797e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800797e:	b480      	push	{r7}
 8007980:	b085      	sub	sp, #20
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]
 8007986:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	689b      	ldr	r3, [r3, #8]
 800798c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007994:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007996:	683a      	ldr	r2, [r7, #0]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	4313      	orrs	r3, r2
 800799c:	f043 0307 	orr.w	r3, r3, #7
 80079a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	68fa      	ldr	r2, [r7, #12]
 80079a6:	609a      	str	r2, [r3, #8]
}
 80079a8:	bf00      	nop
 80079aa:	3714      	adds	r7, #20
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr

080079b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b087      	sub	sp, #28
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	60f8      	str	r0, [r7, #12]
 80079bc:	60b9      	str	r1, [r7, #8]
 80079be:	607a      	str	r2, [r7, #4]
 80079c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	689b      	ldr	r3, [r3, #8]
 80079c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80079ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	021a      	lsls	r2, r3, #8
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	431a      	orrs	r2, r3
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	4313      	orrs	r3, r2
 80079dc:	697a      	ldr	r2, [r7, #20]
 80079de:	4313      	orrs	r3, r2
 80079e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	697a      	ldr	r2, [r7, #20]
 80079e6:	609a      	str	r2, [r3, #8]
}
 80079e8:	bf00      	nop
 80079ea:	371c      	adds	r7, #28
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr

080079f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b087      	sub	sp, #28
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	60f8      	str	r0, [r7, #12]
 80079fc:	60b9      	str	r1, [r7, #8]
 80079fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	f003 031f 	and.w	r3, r3, #31
 8007a06:	2201      	movs	r2, #1
 8007a08:	fa02 f303 	lsl.w	r3, r2, r3
 8007a0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	6a1a      	ldr	r2, [r3, #32]
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	43db      	mvns	r3, r3
 8007a16:	401a      	ands	r2, r3
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6a1a      	ldr	r2, [r3, #32]
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	f003 031f 	and.w	r3, r3, #31
 8007a26:	6879      	ldr	r1, [r7, #4]
 8007a28:	fa01 f303 	lsl.w	r3, r1, r3
 8007a2c:	431a      	orrs	r2, r3
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	621a      	str	r2, [r3, #32]
}
 8007a32:	bf00      	nop
 8007a34:	371c      	adds	r7, #28
 8007a36:	46bd      	mov	sp, r7
 8007a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3c:	4770      	bx	lr
	...

08007a40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b085      	sub	sp, #20
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d101      	bne.n	8007a58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a54:	2302      	movs	r3, #2
 8007a56:	e05a      	b.n	8007b0e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2202      	movs	r2, #2
 8007a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	68fa      	ldr	r2, [r7, #12]
 8007a86:	4313      	orrs	r3, r2
 8007a88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	68fa      	ldr	r2, [r7, #12]
 8007a90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a21      	ldr	r2, [pc, #132]	; (8007b1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d022      	beq.n	8007ae2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007aa4:	d01d      	beq.n	8007ae2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a1d      	ldr	r2, [pc, #116]	; (8007b20 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d018      	beq.n	8007ae2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a1b      	ldr	r2, [pc, #108]	; (8007b24 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d013      	beq.n	8007ae2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a1a      	ldr	r2, [pc, #104]	; (8007b28 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d00e      	beq.n	8007ae2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a18      	ldr	r2, [pc, #96]	; (8007b2c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d009      	beq.n	8007ae2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a17      	ldr	r2, [pc, #92]	; (8007b30 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d004      	beq.n	8007ae2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a15      	ldr	r2, [pc, #84]	; (8007b34 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d10c      	bne.n	8007afc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ae8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	68ba      	ldr	r2, [r7, #8]
 8007af0:	4313      	orrs	r3, r2
 8007af2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	68ba      	ldr	r2, [r7, #8]
 8007afa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2201      	movs	r2, #1
 8007b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2200      	movs	r2, #0
 8007b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b0c:	2300      	movs	r3, #0
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3714      	adds	r7, #20
 8007b12:	46bd      	mov	sp, r7
 8007b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b18:	4770      	bx	lr
 8007b1a:	bf00      	nop
 8007b1c:	40010000 	.word	0x40010000
 8007b20:	40000400 	.word	0x40000400
 8007b24:	40000800 	.word	0x40000800
 8007b28:	40000c00 	.word	0x40000c00
 8007b2c:	40010400 	.word	0x40010400
 8007b30:	40014000 	.word	0x40014000
 8007b34:	40001800 	.word	0x40001800

08007b38 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b085      	sub	sp, #20
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007b42:	2300      	movs	r3, #0
 8007b44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b4c:	2b01      	cmp	r3, #1
 8007b4e:	d101      	bne.n	8007b54 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007b50:	2302      	movs	r3, #2
 8007b52:	e03d      	b.n	8007bd0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2201      	movs	r2, #1
 8007b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	68db      	ldr	r3, [r3, #12]
 8007b66:	4313      	orrs	r3, r2
 8007b68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	4313      	orrs	r3, r2
 8007b76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	4313      	orrs	r3, r2
 8007b84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4313      	orrs	r3, r2
 8007b92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	691b      	ldr	r3, [r3, #16]
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	695b      	ldr	r3, [r3, #20]
 8007bac:	4313      	orrs	r3, r2
 8007bae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	69db      	ldr	r3, [r3, #28]
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	68fa      	ldr	r2, [r7, #12]
 8007bc4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007bce:	2300      	movs	r3, #0
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3714      	adds	r7, #20
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr

08007bdc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007be4:	bf00      	nop
 8007be6:	370c      	adds	r7, #12
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr

08007bf0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b083      	sub	sp, #12
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007bf8:	bf00      	nop
 8007bfa:	370c      	adds	r7, #12
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr

08007c04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b082      	sub	sp, #8
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d101      	bne.n	8007c16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c12:	2301      	movs	r3, #1
 8007c14:	e03f      	b.n	8007c96 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d106      	bne.n	8007c30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2200      	movs	r2, #0
 8007c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f7fb fd2c 	bl	8003688 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2224      	movs	r2, #36	; 0x24
 8007c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	68da      	ldr	r2, [r3, #12]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f000 f929 	bl	8007ea0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	691a      	ldr	r2, [r3, #16]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007c5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	695a      	ldr	r2, [r3, #20]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007c6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	68da      	ldr	r2, [r3, #12]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2200      	movs	r2, #0
 8007c82:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2220      	movs	r2, #32
 8007c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2220      	movs	r2, #32
 8007c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007c94:	2300      	movs	r3, #0
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3708      	adds	r7, #8
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}

08007c9e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c9e:	b580      	push	{r7, lr}
 8007ca0:	b08a      	sub	sp, #40	; 0x28
 8007ca2:	af02      	add	r7, sp, #8
 8007ca4:	60f8      	str	r0, [r7, #12]
 8007ca6:	60b9      	str	r1, [r7, #8]
 8007ca8:	603b      	str	r3, [r7, #0]
 8007caa:	4613      	mov	r3, r2
 8007cac:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cb8:	b2db      	uxtb	r3, r3
 8007cba:	2b20      	cmp	r3, #32
 8007cbc:	d17c      	bne.n	8007db8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d002      	beq.n	8007cca <HAL_UART_Transmit+0x2c>
 8007cc4:	88fb      	ldrh	r3, [r7, #6]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d101      	bne.n	8007cce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	e075      	b.n	8007dba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d101      	bne.n	8007cdc <HAL_UART_Transmit+0x3e>
 8007cd8:	2302      	movs	r3, #2
 8007cda:	e06e      	b.n	8007dba <HAL_UART_Transmit+0x11c>
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2221      	movs	r2, #33	; 0x21
 8007cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007cf2:	f7fb fed1 	bl	8003a98 <HAL_GetTick>
 8007cf6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	88fa      	ldrh	r2, [r7, #6]
 8007cfc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	88fa      	ldrh	r2, [r7, #6]
 8007d02:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	689b      	ldr	r3, [r3, #8]
 8007d08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d0c:	d108      	bne.n	8007d20 <HAL_UART_Transmit+0x82>
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	691b      	ldr	r3, [r3, #16]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d104      	bne.n	8007d20 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007d16:	2300      	movs	r3, #0
 8007d18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	61bb      	str	r3, [r7, #24]
 8007d1e:	e003      	b.n	8007d28 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007d24:	2300      	movs	r3, #0
 8007d26:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007d30:	e02a      	b.n	8007d88 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	9300      	str	r3, [sp, #0]
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	2180      	movs	r1, #128	; 0x80
 8007d3c:	68f8      	ldr	r0, [r7, #12]
 8007d3e:	f000 f840 	bl	8007dc2 <UART_WaitOnFlagUntilTimeout>
 8007d42:	4603      	mov	r3, r0
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d001      	beq.n	8007d4c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007d48:	2303      	movs	r3, #3
 8007d4a:	e036      	b.n	8007dba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007d4c:	69fb      	ldr	r3, [r7, #28]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d10b      	bne.n	8007d6a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007d52:	69bb      	ldr	r3, [r7, #24]
 8007d54:	881b      	ldrh	r3, [r3, #0]
 8007d56:	461a      	mov	r2, r3
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d60:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007d62:	69bb      	ldr	r3, [r7, #24]
 8007d64:	3302      	adds	r3, #2
 8007d66:	61bb      	str	r3, [r7, #24]
 8007d68:	e007      	b.n	8007d7a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007d6a:	69fb      	ldr	r3, [r7, #28]
 8007d6c:	781a      	ldrb	r2, [r3, #0]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007d74:	69fb      	ldr	r3, [r7, #28]
 8007d76:	3301      	adds	r3, #1
 8007d78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	3b01      	subs	r3, #1
 8007d82:	b29a      	uxth	r2, r3
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d1cf      	bne.n	8007d32 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	9300      	str	r3, [sp, #0]
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	2140      	movs	r1, #64	; 0x40
 8007d9c:	68f8      	ldr	r0, [r7, #12]
 8007d9e:	f000 f810 	bl	8007dc2 <UART_WaitOnFlagUntilTimeout>
 8007da2:	4603      	mov	r3, r0
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d001      	beq.n	8007dac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007da8:	2303      	movs	r3, #3
 8007daa:	e006      	b.n	8007dba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2220      	movs	r2, #32
 8007db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007db4:	2300      	movs	r3, #0
 8007db6:	e000      	b.n	8007dba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007db8:	2302      	movs	r3, #2
  }
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3720      	adds	r7, #32
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}

08007dc2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007dc2:	b580      	push	{r7, lr}
 8007dc4:	b090      	sub	sp, #64	; 0x40
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	60f8      	str	r0, [r7, #12]
 8007dca:	60b9      	str	r1, [r7, #8]
 8007dcc:	603b      	str	r3, [r7, #0]
 8007dce:	4613      	mov	r3, r2
 8007dd0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007dd2:	e050      	b.n	8007e76 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007dd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dda:	d04c      	beq.n	8007e76 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007ddc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d007      	beq.n	8007df2 <UART_WaitOnFlagUntilTimeout+0x30>
 8007de2:	f7fb fe59 	bl	8003a98 <HAL_GetTick>
 8007de6:	4602      	mov	r2, r0
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	1ad3      	subs	r3, r2, r3
 8007dec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d241      	bcs.n	8007e76 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	330c      	adds	r3, #12
 8007df8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dfc:	e853 3f00 	ldrex	r3, [r3]
 8007e00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e04:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007e08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	330c      	adds	r3, #12
 8007e10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007e12:	637a      	str	r2, [r7, #52]	; 0x34
 8007e14:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e16:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007e18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e1a:	e841 2300 	strex	r3, r2, [r1]
 8007e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d1e5      	bne.n	8007df2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	3314      	adds	r3, #20
 8007e2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	e853 3f00 	ldrex	r3, [r3]
 8007e34:	613b      	str	r3, [r7, #16]
   return(result);
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	f023 0301 	bic.w	r3, r3, #1
 8007e3c:	63bb      	str	r3, [r7, #56]	; 0x38
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	3314      	adds	r3, #20
 8007e44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e46:	623a      	str	r2, [r7, #32]
 8007e48:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e4a:	69f9      	ldr	r1, [r7, #28]
 8007e4c:	6a3a      	ldr	r2, [r7, #32]
 8007e4e:	e841 2300 	strex	r3, r2, [r1]
 8007e52:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e54:	69bb      	ldr	r3, [r7, #24]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d1e5      	bne.n	8007e26 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	2220      	movs	r2, #32
 8007e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2220      	movs	r2, #32
 8007e66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007e72:	2303      	movs	r3, #3
 8007e74:	e00f      	b.n	8007e96 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	681a      	ldr	r2, [r3, #0]
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	4013      	ands	r3, r2
 8007e80:	68ba      	ldr	r2, [r7, #8]
 8007e82:	429a      	cmp	r2, r3
 8007e84:	bf0c      	ite	eq
 8007e86:	2301      	moveq	r3, #1
 8007e88:	2300      	movne	r3, #0
 8007e8a:	b2db      	uxtb	r3, r3
 8007e8c:	461a      	mov	r2, r3
 8007e8e:	79fb      	ldrb	r3, [r7, #7]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d09f      	beq.n	8007dd4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007e94:	2300      	movs	r3, #0
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3740      	adds	r7, #64	; 0x40
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}
	...

08007ea0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ea0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ea4:	b0c0      	sub	sp, #256	; 0x100
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	691b      	ldr	r3, [r3, #16]
 8007eb4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ebc:	68d9      	ldr	r1, [r3, #12]
 8007ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	ea40 0301 	orr.w	r3, r0, r1
 8007ec8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ece:	689a      	ldr	r2, [r3, #8]
 8007ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ed4:	691b      	ldr	r3, [r3, #16]
 8007ed6:	431a      	orrs	r2, r3
 8007ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007edc:	695b      	ldr	r3, [r3, #20]
 8007ede:	431a      	orrs	r2, r3
 8007ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ee4:	69db      	ldr	r3, [r3, #28]
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	68db      	ldr	r3, [r3, #12]
 8007ef4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007ef8:	f021 010c 	bic.w	r1, r1, #12
 8007efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f00:	681a      	ldr	r2, [r3, #0]
 8007f02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007f06:	430b      	orrs	r3, r1
 8007f08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007f0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	695b      	ldr	r3, [r3, #20]
 8007f12:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f1a:	6999      	ldr	r1, [r3, #24]
 8007f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	ea40 0301 	orr.w	r3, r0, r1
 8007f26:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f2c:	681a      	ldr	r2, [r3, #0]
 8007f2e:	4b8f      	ldr	r3, [pc, #572]	; (800816c <UART_SetConfig+0x2cc>)
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d005      	beq.n	8007f40 <UART_SetConfig+0xa0>
 8007f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f38:	681a      	ldr	r2, [r3, #0]
 8007f3a:	4b8d      	ldr	r3, [pc, #564]	; (8008170 <UART_SetConfig+0x2d0>)
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d104      	bne.n	8007f4a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007f40:	f7fd fc26 	bl	8005790 <HAL_RCC_GetPCLK2Freq>
 8007f44:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007f48:	e003      	b.n	8007f52 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007f4a:	f7fd fc0d 	bl	8005768 <HAL_RCC_GetPCLK1Freq>
 8007f4e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f56:	69db      	ldr	r3, [r3, #28]
 8007f58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f5c:	f040 810c 	bne.w	8008178 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007f60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f64:	2200      	movs	r2, #0
 8007f66:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007f6a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007f6e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007f72:	4622      	mov	r2, r4
 8007f74:	462b      	mov	r3, r5
 8007f76:	1891      	adds	r1, r2, r2
 8007f78:	65b9      	str	r1, [r7, #88]	; 0x58
 8007f7a:	415b      	adcs	r3, r3
 8007f7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f7e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007f82:	4621      	mov	r1, r4
 8007f84:	eb12 0801 	adds.w	r8, r2, r1
 8007f88:	4629      	mov	r1, r5
 8007f8a:	eb43 0901 	adc.w	r9, r3, r1
 8007f8e:	f04f 0200 	mov.w	r2, #0
 8007f92:	f04f 0300 	mov.w	r3, #0
 8007f96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007f9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007f9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007fa2:	4690      	mov	r8, r2
 8007fa4:	4699      	mov	r9, r3
 8007fa6:	4623      	mov	r3, r4
 8007fa8:	eb18 0303 	adds.w	r3, r8, r3
 8007fac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007fb0:	462b      	mov	r3, r5
 8007fb2:	eb49 0303 	adc.w	r3, r9, r3
 8007fb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007fc6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007fca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007fce:	460b      	mov	r3, r1
 8007fd0:	18db      	adds	r3, r3, r3
 8007fd2:	653b      	str	r3, [r7, #80]	; 0x50
 8007fd4:	4613      	mov	r3, r2
 8007fd6:	eb42 0303 	adc.w	r3, r2, r3
 8007fda:	657b      	str	r3, [r7, #84]	; 0x54
 8007fdc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007fe0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007fe4:	f7f8 fe00 	bl	8000be8 <__aeabi_uldivmod>
 8007fe8:	4602      	mov	r2, r0
 8007fea:	460b      	mov	r3, r1
 8007fec:	4b61      	ldr	r3, [pc, #388]	; (8008174 <UART_SetConfig+0x2d4>)
 8007fee:	fba3 2302 	umull	r2, r3, r3, r2
 8007ff2:	095b      	lsrs	r3, r3, #5
 8007ff4:	011c      	lsls	r4, r3, #4
 8007ff6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008000:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008004:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008008:	4642      	mov	r2, r8
 800800a:	464b      	mov	r3, r9
 800800c:	1891      	adds	r1, r2, r2
 800800e:	64b9      	str	r1, [r7, #72]	; 0x48
 8008010:	415b      	adcs	r3, r3
 8008012:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008014:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008018:	4641      	mov	r1, r8
 800801a:	eb12 0a01 	adds.w	sl, r2, r1
 800801e:	4649      	mov	r1, r9
 8008020:	eb43 0b01 	adc.w	fp, r3, r1
 8008024:	f04f 0200 	mov.w	r2, #0
 8008028:	f04f 0300 	mov.w	r3, #0
 800802c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008030:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008034:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008038:	4692      	mov	sl, r2
 800803a:	469b      	mov	fp, r3
 800803c:	4643      	mov	r3, r8
 800803e:	eb1a 0303 	adds.w	r3, sl, r3
 8008042:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008046:	464b      	mov	r3, r9
 8008048:	eb4b 0303 	adc.w	r3, fp, r3
 800804c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008054:	685b      	ldr	r3, [r3, #4]
 8008056:	2200      	movs	r2, #0
 8008058:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800805c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008060:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008064:	460b      	mov	r3, r1
 8008066:	18db      	adds	r3, r3, r3
 8008068:	643b      	str	r3, [r7, #64]	; 0x40
 800806a:	4613      	mov	r3, r2
 800806c:	eb42 0303 	adc.w	r3, r2, r3
 8008070:	647b      	str	r3, [r7, #68]	; 0x44
 8008072:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008076:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800807a:	f7f8 fdb5 	bl	8000be8 <__aeabi_uldivmod>
 800807e:	4602      	mov	r2, r0
 8008080:	460b      	mov	r3, r1
 8008082:	4611      	mov	r1, r2
 8008084:	4b3b      	ldr	r3, [pc, #236]	; (8008174 <UART_SetConfig+0x2d4>)
 8008086:	fba3 2301 	umull	r2, r3, r3, r1
 800808a:	095b      	lsrs	r3, r3, #5
 800808c:	2264      	movs	r2, #100	; 0x64
 800808e:	fb02 f303 	mul.w	r3, r2, r3
 8008092:	1acb      	subs	r3, r1, r3
 8008094:	00db      	lsls	r3, r3, #3
 8008096:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800809a:	4b36      	ldr	r3, [pc, #216]	; (8008174 <UART_SetConfig+0x2d4>)
 800809c:	fba3 2302 	umull	r2, r3, r3, r2
 80080a0:	095b      	lsrs	r3, r3, #5
 80080a2:	005b      	lsls	r3, r3, #1
 80080a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80080a8:	441c      	add	r4, r3
 80080aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80080ae:	2200      	movs	r2, #0
 80080b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80080b4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80080b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80080bc:	4642      	mov	r2, r8
 80080be:	464b      	mov	r3, r9
 80080c0:	1891      	adds	r1, r2, r2
 80080c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80080c4:	415b      	adcs	r3, r3
 80080c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80080cc:	4641      	mov	r1, r8
 80080ce:	1851      	adds	r1, r2, r1
 80080d0:	6339      	str	r1, [r7, #48]	; 0x30
 80080d2:	4649      	mov	r1, r9
 80080d4:	414b      	adcs	r3, r1
 80080d6:	637b      	str	r3, [r7, #52]	; 0x34
 80080d8:	f04f 0200 	mov.w	r2, #0
 80080dc:	f04f 0300 	mov.w	r3, #0
 80080e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80080e4:	4659      	mov	r1, fp
 80080e6:	00cb      	lsls	r3, r1, #3
 80080e8:	4651      	mov	r1, sl
 80080ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80080ee:	4651      	mov	r1, sl
 80080f0:	00ca      	lsls	r2, r1, #3
 80080f2:	4610      	mov	r0, r2
 80080f4:	4619      	mov	r1, r3
 80080f6:	4603      	mov	r3, r0
 80080f8:	4642      	mov	r2, r8
 80080fa:	189b      	adds	r3, r3, r2
 80080fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008100:	464b      	mov	r3, r9
 8008102:	460a      	mov	r2, r1
 8008104:	eb42 0303 	adc.w	r3, r2, r3
 8008108:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800810c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	2200      	movs	r2, #0
 8008114:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008118:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800811c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008120:	460b      	mov	r3, r1
 8008122:	18db      	adds	r3, r3, r3
 8008124:	62bb      	str	r3, [r7, #40]	; 0x28
 8008126:	4613      	mov	r3, r2
 8008128:	eb42 0303 	adc.w	r3, r2, r3
 800812c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800812e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008132:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008136:	f7f8 fd57 	bl	8000be8 <__aeabi_uldivmod>
 800813a:	4602      	mov	r2, r0
 800813c:	460b      	mov	r3, r1
 800813e:	4b0d      	ldr	r3, [pc, #52]	; (8008174 <UART_SetConfig+0x2d4>)
 8008140:	fba3 1302 	umull	r1, r3, r3, r2
 8008144:	095b      	lsrs	r3, r3, #5
 8008146:	2164      	movs	r1, #100	; 0x64
 8008148:	fb01 f303 	mul.w	r3, r1, r3
 800814c:	1ad3      	subs	r3, r2, r3
 800814e:	00db      	lsls	r3, r3, #3
 8008150:	3332      	adds	r3, #50	; 0x32
 8008152:	4a08      	ldr	r2, [pc, #32]	; (8008174 <UART_SetConfig+0x2d4>)
 8008154:	fba2 2303 	umull	r2, r3, r2, r3
 8008158:	095b      	lsrs	r3, r3, #5
 800815a:	f003 0207 	and.w	r2, r3, #7
 800815e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4422      	add	r2, r4
 8008166:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008168:	e105      	b.n	8008376 <UART_SetConfig+0x4d6>
 800816a:	bf00      	nop
 800816c:	40011000 	.word	0x40011000
 8008170:	40011400 	.word	0x40011400
 8008174:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008178:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800817c:	2200      	movs	r2, #0
 800817e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008182:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008186:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800818a:	4642      	mov	r2, r8
 800818c:	464b      	mov	r3, r9
 800818e:	1891      	adds	r1, r2, r2
 8008190:	6239      	str	r1, [r7, #32]
 8008192:	415b      	adcs	r3, r3
 8008194:	627b      	str	r3, [r7, #36]	; 0x24
 8008196:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800819a:	4641      	mov	r1, r8
 800819c:	1854      	adds	r4, r2, r1
 800819e:	4649      	mov	r1, r9
 80081a0:	eb43 0501 	adc.w	r5, r3, r1
 80081a4:	f04f 0200 	mov.w	r2, #0
 80081a8:	f04f 0300 	mov.w	r3, #0
 80081ac:	00eb      	lsls	r3, r5, #3
 80081ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80081b2:	00e2      	lsls	r2, r4, #3
 80081b4:	4614      	mov	r4, r2
 80081b6:	461d      	mov	r5, r3
 80081b8:	4643      	mov	r3, r8
 80081ba:	18e3      	adds	r3, r4, r3
 80081bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80081c0:	464b      	mov	r3, r9
 80081c2:	eb45 0303 	adc.w	r3, r5, r3
 80081c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80081ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	2200      	movs	r2, #0
 80081d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80081d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80081da:	f04f 0200 	mov.w	r2, #0
 80081de:	f04f 0300 	mov.w	r3, #0
 80081e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80081e6:	4629      	mov	r1, r5
 80081e8:	008b      	lsls	r3, r1, #2
 80081ea:	4621      	mov	r1, r4
 80081ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80081f0:	4621      	mov	r1, r4
 80081f2:	008a      	lsls	r2, r1, #2
 80081f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80081f8:	f7f8 fcf6 	bl	8000be8 <__aeabi_uldivmod>
 80081fc:	4602      	mov	r2, r0
 80081fe:	460b      	mov	r3, r1
 8008200:	4b60      	ldr	r3, [pc, #384]	; (8008384 <UART_SetConfig+0x4e4>)
 8008202:	fba3 2302 	umull	r2, r3, r3, r2
 8008206:	095b      	lsrs	r3, r3, #5
 8008208:	011c      	lsls	r4, r3, #4
 800820a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800820e:	2200      	movs	r2, #0
 8008210:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008214:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008218:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800821c:	4642      	mov	r2, r8
 800821e:	464b      	mov	r3, r9
 8008220:	1891      	adds	r1, r2, r2
 8008222:	61b9      	str	r1, [r7, #24]
 8008224:	415b      	adcs	r3, r3
 8008226:	61fb      	str	r3, [r7, #28]
 8008228:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800822c:	4641      	mov	r1, r8
 800822e:	1851      	adds	r1, r2, r1
 8008230:	6139      	str	r1, [r7, #16]
 8008232:	4649      	mov	r1, r9
 8008234:	414b      	adcs	r3, r1
 8008236:	617b      	str	r3, [r7, #20]
 8008238:	f04f 0200 	mov.w	r2, #0
 800823c:	f04f 0300 	mov.w	r3, #0
 8008240:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008244:	4659      	mov	r1, fp
 8008246:	00cb      	lsls	r3, r1, #3
 8008248:	4651      	mov	r1, sl
 800824a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800824e:	4651      	mov	r1, sl
 8008250:	00ca      	lsls	r2, r1, #3
 8008252:	4610      	mov	r0, r2
 8008254:	4619      	mov	r1, r3
 8008256:	4603      	mov	r3, r0
 8008258:	4642      	mov	r2, r8
 800825a:	189b      	adds	r3, r3, r2
 800825c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008260:	464b      	mov	r3, r9
 8008262:	460a      	mov	r2, r1
 8008264:	eb42 0303 	adc.w	r3, r2, r3
 8008268:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800826c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	67bb      	str	r3, [r7, #120]	; 0x78
 8008276:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008278:	f04f 0200 	mov.w	r2, #0
 800827c:	f04f 0300 	mov.w	r3, #0
 8008280:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008284:	4649      	mov	r1, r9
 8008286:	008b      	lsls	r3, r1, #2
 8008288:	4641      	mov	r1, r8
 800828a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800828e:	4641      	mov	r1, r8
 8008290:	008a      	lsls	r2, r1, #2
 8008292:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008296:	f7f8 fca7 	bl	8000be8 <__aeabi_uldivmod>
 800829a:	4602      	mov	r2, r0
 800829c:	460b      	mov	r3, r1
 800829e:	4b39      	ldr	r3, [pc, #228]	; (8008384 <UART_SetConfig+0x4e4>)
 80082a0:	fba3 1302 	umull	r1, r3, r3, r2
 80082a4:	095b      	lsrs	r3, r3, #5
 80082a6:	2164      	movs	r1, #100	; 0x64
 80082a8:	fb01 f303 	mul.w	r3, r1, r3
 80082ac:	1ad3      	subs	r3, r2, r3
 80082ae:	011b      	lsls	r3, r3, #4
 80082b0:	3332      	adds	r3, #50	; 0x32
 80082b2:	4a34      	ldr	r2, [pc, #208]	; (8008384 <UART_SetConfig+0x4e4>)
 80082b4:	fba2 2303 	umull	r2, r3, r2, r3
 80082b8:	095b      	lsrs	r3, r3, #5
 80082ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80082be:	441c      	add	r4, r3
 80082c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082c4:	2200      	movs	r2, #0
 80082c6:	673b      	str	r3, [r7, #112]	; 0x70
 80082c8:	677a      	str	r2, [r7, #116]	; 0x74
 80082ca:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80082ce:	4642      	mov	r2, r8
 80082d0:	464b      	mov	r3, r9
 80082d2:	1891      	adds	r1, r2, r2
 80082d4:	60b9      	str	r1, [r7, #8]
 80082d6:	415b      	adcs	r3, r3
 80082d8:	60fb      	str	r3, [r7, #12]
 80082da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80082de:	4641      	mov	r1, r8
 80082e0:	1851      	adds	r1, r2, r1
 80082e2:	6039      	str	r1, [r7, #0]
 80082e4:	4649      	mov	r1, r9
 80082e6:	414b      	adcs	r3, r1
 80082e8:	607b      	str	r3, [r7, #4]
 80082ea:	f04f 0200 	mov.w	r2, #0
 80082ee:	f04f 0300 	mov.w	r3, #0
 80082f2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80082f6:	4659      	mov	r1, fp
 80082f8:	00cb      	lsls	r3, r1, #3
 80082fa:	4651      	mov	r1, sl
 80082fc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008300:	4651      	mov	r1, sl
 8008302:	00ca      	lsls	r2, r1, #3
 8008304:	4610      	mov	r0, r2
 8008306:	4619      	mov	r1, r3
 8008308:	4603      	mov	r3, r0
 800830a:	4642      	mov	r2, r8
 800830c:	189b      	adds	r3, r3, r2
 800830e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008310:	464b      	mov	r3, r9
 8008312:	460a      	mov	r2, r1
 8008314:	eb42 0303 	adc.w	r3, r2, r3
 8008318:	66fb      	str	r3, [r7, #108]	; 0x6c
 800831a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	2200      	movs	r2, #0
 8008322:	663b      	str	r3, [r7, #96]	; 0x60
 8008324:	667a      	str	r2, [r7, #100]	; 0x64
 8008326:	f04f 0200 	mov.w	r2, #0
 800832a:	f04f 0300 	mov.w	r3, #0
 800832e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008332:	4649      	mov	r1, r9
 8008334:	008b      	lsls	r3, r1, #2
 8008336:	4641      	mov	r1, r8
 8008338:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800833c:	4641      	mov	r1, r8
 800833e:	008a      	lsls	r2, r1, #2
 8008340:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008344:	f7f8 fc50 	bl	8000be8 <__aeabi_uldivmod>
 8008348:	4602      	mov	r2, r0
 800834a:	460b      	mov	r3, r1
 800834c:	4b0d      	ldr	r3, [pc, #52]	; (8008384 <UART_SetConfig+0x4e4>)
 800834e:	fba3 1302 	umull	r1, r3, r3, r2
 8008352:	095b      	lsrs	r3, r3, #5
 8008354:	2164      	movs	r1, #100	; 0x64
 8008356:	fb01 f303 	mul.w	r3, r1, r3
 800835a:	1ad3      	subs	r3, r2, r3
 800835c:	011b      	lsls	r3, r3, #4
 800835e:	3332      	adds	r3, #50	; 0x32
 8008360:	4a08      	ldr	r2, [pc, #32]	; (8008384 <UART_SetConfig+0x4e4>)
 8008362:	fba2 2303 	umull	r2, r3, r2, r3
 8008366:	095b      	lsrs	r3, r3, #5
 8008368:	f003 020f 	and.w	r2, r3, #15
 800836c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4422      	add	r2, r4
 8008374:	609a      	str	r2, [r3, #8]
}
 8008376:	bf00      	nop
 8008378:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800837c:	46bd      	mov	sp, r7
 800837e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008382:	bf00      	nop
 8008384:	51eb851f 	.word	0x51eb851f

08008388 <__errno>:
 8008388:	4b01      	ldr	r3, [pc, #4]	; (8008390 <__errno+0x8>)
 800838a:	6818      	ldr	r0, [r3, #0]
 800838c:	4770      	bx	lr
 800838e:	bf00      	nop
 8008390:	2000001c 	.word	0x2000001c

08008394 <__libc_init_array>:
 8008394:	b570      	push	{r4, r5, r6, lr}
 8008396:	4d0d      	ldr	r5, [pc, #52]	; (80083cc <__libc_init_array+0x38>)
 8008398:	4c0d      	ldr	r4, [pc, #52]	; (80083d0 <__libc_init_array+0x3c>)
 800839a:	1b64      	subs	r4, r4, r5
 800839c:	10a4      	asrs	r4, r4, #2
 800839e:	2600      	movs	r6, #0
 80083a0:	42a6      	cmp	r6, r4
 80083a2:	d109      	bne.n	80083b8 <__libc_init_array+0x24>
 80083a4:	4d0b      	ldr	r5, [pc, #44]	; (80083d4 <__libc_init_array+0x40>)
 80083a6:	4c0c      	ldr	r4, [pc, #48]	; (80083d8 <__libc_init_array+0x44>)
 80083a8:	f002 ff02 	bl	800b1b0 <_init>
 80083ac:	1b64      	subs	r4, r4, r5
 80083ae:	10a4      	asrs	r4, r4, #2
 80083b0:	2600      	movs	r6, #0
 80083b2:	42a6      	cmp	r6, r4
 80083b4:	d105      	bne.n	80083c2 <__libc_init_array+0x2e>
 80083b6:	bd70      	pop	{r4, r5, r6, pc}
 80083b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80083bc:	4798      	blx	r3
 80083be:	3601      	adds	r6, #1
 80083c0:	e7ee      	b.n	80083a0 <__libc_init_array+0xc>
 80083c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80083c6:	4798      	blx	r3
 80083c8:	3601      	adds	r6, #1
 80083ca:	e7f2      	b.n	80083b2 <__libc_init_array+0x1e>
 80083cc:	0800c334 	.word	0x0800c334
 80083d0:	0800c334 	.word	0x0800c334
 80083d4:	0800c334 	.word	0x0800c334
 80083d8:	0800c338 	.word	0x0800c338

080083dc <memset>:
 80083dc:	4402      	add	r2, r0
 80083de:	4603      	mov	r3, r0
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d100      	bne.n	80083e6 <memset+0xa>
 80083e4:	4770      	bx	lr
 80083e6:	f803 1b01 	strb.w	r1, [r3], #1
 80083ea:	e7f9      	b.n	80083e0 <memset+0x4>

080083ec <__cvt>:
 80083ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083f0:	ec55 4b10 	vmov	r4, r5, d0
 80083f4:	2d00      	cmp	r5, #0
 80083f6:	460e      	mov	r6, r1
 80083f8:	4619      	mov	r1, r3
 80083fa:	462b      	mov	r3, r5
 80083fc:	bfbb      	ittet	lt
 80083fe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008402:	461d      	movlt	r5, r3
 8008404:	2300      	movge	r3, #0
 8008406:	232d      	movlt	r3, #45	; 0x2d
 8008408:	700b      	strb	r3, [r1, #0]
 800840a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800840c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008410:	4691      	mov	r9, r2
 8008412:	f023 0820 	bic.w	r8, r3, #32
 8008416:	bfbc      	itt	lt
 8008418:	4622      	movlt	r2, r4
 800841a:	4614      	movlt	r4, r2
 800841c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008420:	d005      	beq.n	800842e <__cvt+0x42>
 8008422:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008426:	d100      	bne.n	800842a <__cvt+0x3e>
 8008428:	3601      	adds	r6, #1
 800842a:	2102      	movs	r1, #2
 800842c:	e000      	b.n	8008430 <__cvt+0x44>
 800842e:	2103      	movs	r1, #3
 8008430:	ab03      	add	r3, sp, #12
 8008432:	9301      	str	r3, [sp, #4]
 8008434:	ab02      	add	r3, sp, #8
 8008436:	9300      	str	r3, [sp, #0]
 8008438:	ec45 4b10 	vmov	d0, r4, r5
 800843c:	4653      	mov	r3, sl
 800843e:	4632      	mov	r2, r6
 8008440:	f000 fcea 	bl	8008e18 <_dtoa_r>
 8008444:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008448:	4607      	mov	r7, r0
 800844a:	d102      	bne.n	8008452 <__cvt+0x66>
 800844c:	f019 0f01 	tst.w	r9, #1
 8008450:	d022      	beq.n	8008498 <__cvt+0xac>
 8008452:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008456:	eb07 0906 	add.w	r9, r7, r6
 800845a:	d110      	bne.n	800847e <__cvt+0x92>
 800845c:	783b      	ldrb	r3, [r7, #0]
 800845e:	2b30      	cmp	r3, #48	; 0x30
 8008460:	d10a      	bne.n	8008478 <__cvt+0x8c>
 8008462:	2200      	movs	r2, #0
 8008464:	2300      	movs	r3, #0
 8008466:	4620      	mov	r0, r4
 8008468:	4629      	mov	r1, r5
 800846a:	f7f8 fb4d 	bl	8000b08 <__aeabi_dcmpeq>
 800846e:	b918      	cbnz	r0, 8008478 <__cvt+0x8c>
 8008470:	f1c6 0601 	rsb	r6, r6, #1
 8008474:	f8ca 6000 	str.w	r6, [sl]
 8008478:	f8da 3000 	ldr.w	r3, [sl]
 800847c:	4499      	add	r9, r3
 800847e:	2200      	movs	r2, #0
 8008480:	2300      	movs	r3, #0
 8008482:	4620      	mov	r0, r4
 8008484:	4629      	mov	r1, r5
 8008486:	f7f8 fb3f 	bl	8000b08 <__aeabi_dcmpeq>
 800848a:	b108      	cbz	r0, 8008490 <__cvt+0xa4>
 800848c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008490:	2230      	movs	r2, #48	; 0x30
 8008492:	9b03      	ldr	r3, [sp, #12]
 8008494:	454b      	cmp	r3, r9
 8008496:	d307      	bcc.n	80084a8 <__cvt+0xbc>
 8008498:	9b03      	ldr	r3, [sp, #12]
 800849a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800849c:	1bdb      	subs	r3, r3, r7
 800849e:	4638      	mov	r0, r7
 80084a0:	6013      	str	r3, [r2, #0]
 80084a2:	b004      	add	sp, #16
 80084a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084a8:	1c59      	adds	r1, r3, #1
 80084aa:	9103      	str	r1, [sp, #12]
 80084ac:	701a      	strb	r2, [r3, #0]
 80084ae:	e7f0      	b.n	8008492 <__cvt+0xa6>

080084b0 <__exponent>:
 80084b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084b2:	4603      	mov	r3, r0
 80084b4:	2900      	cmp	r1, #0
 80084b6:	bfb8      	it	lt
 80084b8:	4249      	neglt	r1, r1
 80084ba:	f803 2b02 	strb.w	r2, [r3], #2
 80084be:	bfb4      	ite	lt
 80084c0:	222d      	movlt	r2, #45	; 0x2d
 80084c2:	222b      	movge	r2, #43	; 0x2b
 80084c4:	2909      	cmp	r1, #9
 80084c6:	7042      	strb	r2, [r0, #1]
 80084c8:	dd2a      	ble.n	8008520 <__exponent+0x70>
 80084ca:	f10d 0407 	add.w	r4, sp, #7
 80084ce:	46a4      	mov	ip, r4
 80084d0:	270a      	movs	r7, #10
 80084d2:	46a6      	mov	lr, r4
 80084d4:	460a      	mov	r2, r1
 80084d6:	fb91 f6f7 	sdiv	r6, r1, r7
 80084da:	fb07 1516 	mls	r5, r7, r6, r1
 80084de:	3530      	adds	r5, #48	; 0x30
 80084e0:	2a63      	cmp	r2, #99	; 0x63
 80084e2:	f104 34ff 	add.w	r4, r4, #4294967295
 80084e6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80084ea:	4631      	mov	r1, r6
 80084ec:	dcf1      	bgt.n	80084d2 <__exponent+0x22>
 80084ee:	3130      	adds	r1, #48	; 0x30
 80084f0:	f1ae 0502 	sub.w	r5, lr, #2
 80084f4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80084f8:	1c44      	adds	r4, r0, #1
 80084fa:	4629      	mov	r1, r5
 80084fc:	4561      	cmp	r1, ip
 80084fe:	d30a      	bcc.n	8008516 <__exponent+0x66>
 8008500:	f10d 0209 	add.w	r2, sp, #9
 8008504:	eba2 020e 	sub.w	r2, r2, lr
 8008508:	4565      	cmp	r5, ip
 800850a:	bf88      	it	hi
 800850c:	2200      	movhi	r2, #0
 800850e:	4413      	add	r3, r2
 8008510:	1a18      	subs	r0, r3, r0
 8008512:	b003      	add	sp, #12
 8008514:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008516:	f811 2b01 	ldrb.w	r2, [r1], #1
 800851a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800851e:	e7ed      	b.n	80084fc <__exponent+0x4c>
 8008520:	2330      	movs	r3, #48	; 0x30
 8008522:	3130      	adds	r1, #48	; 0x30
 8008524:	7083      	strb	r3, [r0, #2]
 8008526:	70c1      	strb	r1, [r0, #3]
 8008528:	1d03      	adds	r3, r0, #4
 800852a:	e7f1      	b.n	8008510 <__exponent+0x60>

0800852c <_printf_float>:
 800852c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008530:	ed2d 8b02 	vpush	{d8}
 8008534:	b08d      	sub	sp, #52	; 0x34
 8008536:	460c      	mov	r4, r1
 8008538:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800853c:	4616      	mov	r6, r2
 800853e:	461f      	mov	r7, r3
 8008540:	4605      	mov	r5, r0
 8008542:	f001 fa57 	bl	80099f4 <_localeconv_r>
 8008546:	f8d0 a000 	ldr.w	sl, [r0]
 800854a:	4650      	mov	r0, sl
 800854c:	f7f7 fe60 	bl	8000210 <strlen>
 8008550:	2300      	movs	r3, #0
 8008552:	930a      	str	r3, [sp, #40]	; 0x28
 8008554:	6823      	ldr	r3, [r4, #0]
 8008556:	9305      	str	r3, [sp, #20]
 8008558:	f8d8 3000 	ldr.w	r3, [r8]
 800855c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008560:	3307      	adds	r3, #7
 8008562:	f023 0307 	bic.w	r3, r3, #7
 8008566:	f103 0208 	add.w	r2, r3, #8
 800856a:	f8c8 2000 	str.w	r2, [r8]
 800856e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008572:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008576:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800857a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800857e:	9307      	str	r3, [sp, #28]
 8008580:	f8cd 8018 	str.w	r8, [sp, #24]
 8008584:	ee08 0a10 	vmov	s16, r0
 8008588:	4b9f      	ldr	r3, [pc, #636]	; (8008808 <_printf_float+0x2dc>)
 800858a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800858e:	f04f 32ff 	mov.w	r2, #4294967295
 8008592:	f7f8 faeb 	bl	8000b6c <__aeabi_dcmpun>
 8008596:	bb88      	cbnz	r0, 80085fc <_printf_float+0xd0>
 8008598:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800859c:	4b9a      	ldr	r3, [pc, #616]	; (8008808 <_printf_float+0x2dc>)
 800859e:	f04f 32ff 	mov.w	r2, #4294967295
 80085a2:	f7f8 fac5 	bl	8000b30 <__aeabi_dcmple>
 80085a6:	bb48      	cbnz	r0, 80085fc <_printf_float+0xd0>
 80085a8:	2200      	movs	r2, #0
 80085aa:	2300      	movs	r3, #0
 80085ac:	4640      	mov	r0, r8
 80085ae:	4649      	mov	r1, r9
 80085b0:	f7f8 fab4 	bl	8000b1c <__aeabi_dcmplt>
 80085b4:	b110      	cbz	r0, 80085bc <_printf_float+0x90>
 80085b6:	232d      	movs	r3, #45	; 0x2d
 80085b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085bc:	4b93      	ldr	r3, [pc, #588]	; (800880c <_printf_float+0x2e0>)
 80085be:	4894      	ldr	r0, [pc, #592]	; (8008810 <_printf_float+0x2e4>)
 80085c0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80085c4:	bf94      	ite	ls
 80085c6:	4698      	movls	r8, r3
 80085c8:	4680      	movhi	r8, r0
 80085ca:	2303      	movs	r3, #3
 80085cc:	6123      	str	r3, [r4, #16]
 80085ce:	9b05      	ldr	r3, [sp, #20]
 80085d0:	f023 0204 	bic.w	r2, r3, #4
 80085d4:	6022      	str	r2, [r4, #0]
 80085d6:	f04f 0900 	mov.w	r9, #0
 80085da:	9700      	str	r7, [sp, #0]
 80085dc:	4633      	mov	r3, r6
 80085de:	aa0b      	add	r2, sp, #44	; 0x2c
 80085e0:	4621      	mov	r1, r4
 80085e2:	4628      	mov	r0, r5
 80085e4:	f000 f9d8 	bl	8008998 <_printf_common>
 80085e8:	3001      	adds	r0, #1
 80085ea:	f040 8090 	bne.w	800870e <_printf_float+0x1e2>
 80085ee:	f04f 30ff 	mov.w	r0, #4294967295
 80085f2:	b00d      	add	sp, #52	; 0x34
 80085f4:	ecbd 8b02 	vpop	{d8}
 80085f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085fc:	4642      	mov	r2, r8
 80085fe:	464b      	mov	r3, r9
 8008600:	4640      	mov	r0, r8
 8008602:	4649      	mov	r1, r9
 8008604:	f7f8 fab2 	bl	8000b6c <__aeabi_dcmpun>
 8008608:	b140      	cbz	r0, 800861c <_printf_float+0xf0>
 800860a:	464b      	mov	r3, r9
 800860c:	2b00      	cmp	r3, #0
 800860e:	bfbc      	itt	lt
 8008610:	232d      	movlt	r3, #45	; 0x2d
 8008612:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008616:	487f      	ldr	r0, [pc, #508]	; (8008814 <_printf_float+0x2e8>)
 8008618:	4b7f      	ldr	r3, [pc, #508]	; (8008818 <_printf_float+0x2ec>)
 800861a:	e7d1      	b.n	80085c0 <_printf_float+0x94>
 800861c:	6863      	ldr	r3, [r4, #4]
 800861e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008622:	9206      	str	r2, [sp, #24]
 8008624:	1c5a      	adds	r2, r3, #1
 8008626:	d13f      	bne.n	80086a8 <_printf_float+0x17c>
 8008628:	2306      	movs	r3, #6
 800862a:	6063      	str	r3, [r4, #4]
 800862c:	9b05      	ldr	r3, [sp, #20]
 800862e:	6861      	ldr	r1, [r4, #4]
 8008630:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008634:	2300      	movs	r3, #0
 8008636:	9303      	str	r3, [sp, #12]
 8008638:	ab0a      	add	r3, sp, #40	; 0x28
 800863a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800863e:	ab09      	add	r3, sp, #36	; 0x24
 8008640:	ec49 8b10 	vmov	d0, r8, r9
 8008644:	9300      	str	r3, [sp, #0]
 8008646:	6022      	str	r2, [r4, #0]
 8008648:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800864c:	4628      	mov	r0, r5
 800864e:	f7ff fecd 	bl	80083ec <__cvt>
 8008652:	9b06      	ldr	r3, [sp, #24]
 8008654:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008656:	2b47      	cmp	r3, #71	; 0x47
 8008658:	4680      	mov	r8, r0
 800865a:	d108      	bne.n	800866e <_printf_float+0x142>
 800865c:	1cc8      	adds	r0, r1, #3
 800865e:	db02      	blt.n	8008666 <_printf_float+0x13a>
 8008660:	6863      	ldr	r3, [r4, #4]
 8008662:	4299      	cmp	r1, r3
 8008664:	dd41      	ble.n	80086ea <_printf_float+0x1be>
 8008666:	f1ab 0b02 	sub.w	fp, fp, #2
 800866a:	fa5f fb8b 	uxtb.w	fp, fp
 800866e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008672:	d820      	bhi.n	80086b6 <_printf_float+0x18a>
 8008674:	3901      	subs	r1, #1
 8008676:	465a      	mov	r2, fp
 8008678:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800867c:	9109      	str	r1, [sp, #36]	; 0x24
 800867e:	f7ff ff17 	bl	80084b0 <__exponent>
 8008682:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008684:	1813      	adds	r3, r2, r0
 8008686:	2a01      	cmp	r2, #1
 8008688:	4681      	mov	r9, r0
 800868a:	6123      	str	r3, [r4, #16]
 800868c:	dc02      	bgt.n	8008694 <_printf_float+0x168>
 800868e:	6822      	ldr	r2, [r4, #0]
 8008690:	07d2      	lsls	r2, r2, #31
 8008692:	d501      	bpl.n	8008698 <_printf_float+0x16c>
 8008694:	3301      	adds	r3, #1
 8008696:	6123      	str	r3, [r4, #16]
 8008698:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800869c:	2b00      	cmp	r3, #0
 800869e:	d09c      	beq.n	80085da <_printf_float+0xae>
 80086a0:	232d      	movs	r3, #45	; 0x2d
 80086a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086a6:	e798      	b.n	80085da <_printf_float+0xae>
 80086a8:	9a06      	ldr	r2, [sp, #24]
 80086aa:	2a47      	cmp	r2, #71	; 0x47
 80086ac:	d1be      	bne.n	800862c <_printf_float+0x100>
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d1bc      	bne.n	800862c <_printf_float+0x100>
 80086b2:	2301      	movs	r3, #1
 80086b4:	e7b9      	b.n	800862a <_printf_float+0xfe>
 80086b6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80086ba:	d118      	bne.n	80086ee <_printf_float+0x1c2>
 80086bc:	2900      	cmp	r1, #0
 80086be:	6863      	ldr	r3, [r4, #4]
 80086c0:	dd0b      	ble.n	80086da <_printf_float+0x1ae>
 80086c2:	6121      	str	r1, [r4, #16]
 80086c4:	b913      	cbnz	r3, 80086cc <_printf_float+0x1a0>
 80086c6:	6822      	ldr	r2, [r4, #0]
 80086c8:	07d0      	lsls	r0, r2, #31
 80086ca:	d502      	bpl.n	80086d2 <_printf_float+0x1a6>
 80086cc:	3301      	adds	r3, #1
 80086ce:	440b      	add	r3, r1
 80086d0:	6123      	str	r3, [r4, #16]
 80086d2:	65a1      	str	r1, [r4, #88]	; 0x58
 80086d4:	f04f 0900 	mov.w	r9, #0
 80086d8:	e7de      	b.n	8008698 <_printf_float+0x16c>
 80086da:	b913      	cbnz	r3, 80086e2 <_printf_float+0x1b6>
 80086dc:	6822      	ldr	r2, [r4, #0]
 80086de:	07d2      	lsls	r2, r2, #31
 80086e0:	d501      	bpl.n	80086e6 <_printf_float+0x1ba>
 80086e2:	3302      	adds	r3, #2
 80086e4:	e7f4      	b.n	80086d0 <_printf_float+0x1a4>
 80086e6:	2301      	movs	r3, #1
 80086e8:	e7f2      	b.n	80086d0 <_printf_float+0x1a4>
 80086ea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80086ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086f0:	4299      	cmp	r1, r3
 80086f2:	db05      	blt.n	8008700 <_printf_float+0x1d4>
 80086f4:	6823      	ldr	r3, [r4, #0]
 80086f6:	6121      	str	r1, [r4, #16]
 80086f8:	07d8      	lsls	r0, r3, #31
 80086fa:	d5ea      	bpl.n	80086d2 <_printf_float+0x1a6>
 80086fc:	1c4b      	adds	r3, r1, #1
 80086fe:	e7e7      	b.n	80086d0 <_printf_float+0x1a4>
 8008700:	2900      	cmp	r1, #0
 8008702:	bfd4      	ite	le
 8008704:	f1c1 0202 	rsble	r2, r1, #2
 8008708:	2201      	movgt	r2, #1
 800870a:	4413      	add	r3, r2
 800870c:	e7e0      	b.n	80086d0 <_printf_float+0x1a4>
 800870e:	6823      	ldr	r3, [r4, #0]
 8008710:	055a      	lsls	r2, r3, #21
 8008712:	d407      	bmi.n	8008724 <_printf_float+0x1f8>
 8008714:	6923      	ldr	r3, [r4, #16]
 8008716:	4642      	mov	r2, r8
 8008718:	4631      	mov	r1, r6
 800871a:	4628      	mov	r0, r5
 800871c:	47b8      	blx	r7
 800871e:	3001      	adds	r0, #1
 8008720:	d12c      	bne.n	800877c <_printf_float+0x250>
 8008722:	e764      	b.n	80085ee <_printf_float+0xc2>
 8008724:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008728:	f240 80e0 	bls.w	80088ec <_printf_float+0x3c0>
 800872c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008730:	2200      	movs	r2, #0
 8008732:	2300      	movs	r3, #0
 8008734:	f7f8 f9e8 	bl	8000b08 <__aeabi_dcmpeq>
 8008738:	2800      	cmp	r0, #0
 800873a:	d034      	beq.n	80087a6 <_printf_float+0x27a>
 800873c:	4a37      	ldr	r2, [pc, #220]	; (800881c <_printf_float+0x2f0>)
 800873e:	2301      	movs	r3, #1
 8008740:	4631      	mov	r1, r6
 8008742:	4628      	mov	r0, r5
 8008744:	47b8      	blx	r7
 8008746:	3001      	adds	r0, #1
 8008748:	f43f af51 	beq.w	80085ee <_printf_float+0xc2>
 800874c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008750:	429a      	cmp	r2, r3
 8008752:	db02      	blt.n	800875a <_printf_float+0x22e>
 8008754:	6823      	ldr	r3, [r4, #0]
 8008756:	07d8      	lsls	r0, r3, #31
 8008758:	d510      	bpl.n	800877c <_printf_float+0x250>
 800875a:	ee18 3a10 	vmov	r3, s16
 800875e:	4652      	mov	r2, sl
 8008760:	4631      	mov	r1, r6
 8008762:	4628      	mov	r0, r5
 8008764:	47b8      	blx	r7
 8008766:	3001      	adds	r0, #1
 8008768:	f43f af41 	beq.w	80085ee <_printf_float+0xc2>
 800876c:	f04f 0800 	mov.w	r8, #0
 8008770:	f104 091a 	add.w	r9, r4, #26
 8008774:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008776:	3b01      	subs	r3, #1
 8008778:	4543      	cmp	r3, r8
 800877a:	dc09      	bgt.n	8008790 <_printf_float+0x264>
 800877c:	6823      	ldr	r3, [r4, #0]
 800877e:	079b      	lsls	r3, r3, #30
 8008780:	f100 8105 	bmi.w	800898e <_printf_float+0x462>
 8008784:	68e0      	ldr	r0, [r4, #12]
 8008786:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008788:	4298      	cmp	r0, r3
 800878a:	bfb8      	it	lt
 800878c:	4618      	movlt	r0, r3
 800878e:	e730      	b.n	80085f2 <_printf_float+0xc6>
 8008790:	2301      	movs	r3, #1
 8008792:	464a      	mov	r2, r9
 8008794:	4631      	mov	r1, r6
 8008796:	4628      	mov	r0, r5
 8008798:	47b8      	blx	r7
 800879a:	3001      	adds	r0, #1
 800879c:	f43f af27 	beq.w	80085ee <_printf_float+0xc2>
 80087a0:	f108 0801 	add.w	r8, r8, #1
 80087a4:	e7e6      	b.n	8008774 <_printf_float+0x248>
 80087a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	dc39      	bgt.n	8008820 <_printf_float+0x2f4>
 80087ac:	4a1b      	ldr	r2, [pc, #108]	; (800881c <_printf_float+0x2f0>)
 80087ae:	2301      	movs	r3, #1
 80087b0:	4631      	mov	r1, r6
 80087b2:	4628      	mov	r0, r5
 80087b4:	47b8      	blx	r7
 80087b6:	3001      	adds	r0, #1
 80087b8:	f43f af19 	beq.w	80085ee <_printf_float+0xc2>
 80087bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80087c0:	4313      	orrs	r3, r2
 80087c2:	d102      	bne.n	80087ca <_printf_float+0x29e>
 80087c4:	6823      	ldr	r3, [r4, #0]
 80087c6:	07d9      	lsls	r1, r3, #31
 80087c8:	d5d8      	bpl.n	800877c <_printf_float+0x250>
 80087ca:	ee18 3a10 	vmov	r3, s16
 80087ce:	4652      	mov	r2, sl
 80087d0:	4631      	mov	r1, r6
 80087d2:	4628      	mov	r0, r5
 80087d4:	47b8      	blx	r7
 80087d6:	3001      	adds	r0, #1
 80087d8:	f43f af09 	beq.w	80085ee <_printf_float+0xc2>
 80087dc:	f04f 0900 	mov.w	r9, #0
 80087e0:	f104 0a1a 	add.w	sl, r4, #26
 80087e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087e6:	425b      	negs	r3, r3
 80087e8:	454b      	cmp	r3, r9
 80087ea:	dc01      	bgt.n	80087f0 <_printf_float+0x2c4>
 80087ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087ee:	e792      	b.n	8008716 <_printf_float+0x1ea>
 80087f0:	2301      	movs	r3, #1
 80087f2:	4652      	mov	r2, sl
 80087f4:	4631      	mov	r1, r6
 80087f6:	4628      	mov	r0, r5
 80087f8:	47b8      	blx	r7
 80087fa:	3001      	adds	r0, #1
 80087fc:	f43f aef7 	beq.w	80085ee <_printf_float+0xc2>
 8008800:	f109 0901 	add.w	r9, r9, #1
 8008804:	e7ee      	b.n	80087e4 <_printf_float+0x2b8>
 8008806:	bf00      	nop
 8008808:	7fefffff 	.word	0x7fefffff
 800880c:	0800bf58 	.word	0x0800bf58
 8008810:	0800bf5c 	.word	0x0800bf5c
 8008814:	0800bf64 	.word	0x0800bf64
 8008818:	0800bf60 	.word	0x0800bf60
 800881c:	0800bf68 	.word	0x0800bf68
 8008820:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008822:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008824:	429a      	cmp	r2, r3
 8008826:	bfa8      	it	ge
 8008828:	461a      	movge	r2, r3
 800882a:	2a00      	cmp	r2, #0
 800882c:	4691      	mov	r9, r2
 800882e:	dc37      	bgt.n	80088a0 <_printf_float+0x374>
 8008830:	f04f 0b00 	mov.w	fp, #0
 8008834:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008838:	f104 021a 	add.w	r2, r4, #26
 800883c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800883e:	9305      	str	r3, [sp, #20]
 8008840:	eba3 0309 	sub.w	r3, r3, r9
 8008844:	455b      	cmp	r3, fp
 8008846:	dc33      	bgt.n	80088b0 <_printf_float+0x384>
 8008848:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800884c:	429a      	cmp	r2, r3
 800884e:	db3b      	blt.n	80088c8 <_printf_float+0x39c>
 8008850:	6823      	ldr	r3, [r4, #0]
 8008852:	07da      	lsls	r2, r3, #31
 8008854:	d438      	bmi.n	80088c8 <_printf_float+0x39c>
 8008856:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008858:	9a05      	ldr	r2, [sp, #20]
 800885a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800885c:	1a9a      	subs	r2, r3, r2
 800885e:	eba3 0901 	sub.w	r9, r3, r1
 8008862:	4591      	cmp	r9, r2
 8008864:	bfa8      	it	ge
 8008866:	4691      	movge	r9, r2
 8008868:	f1b9 0f00 	cmp.w	r9, #0
 800886c:	dc35      	bgt.n	80088da <_printf_float+0x3ae>
 800886e:	f04f 0800 	mov.w	r8, #0
 8008872:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008876:	f104 0a1a 	add.w	sl, r4, #26
 800887a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800887e:	1a9b      	subs	r3, r3, r2
 8008880:	eba3 0309 	sub.w	r3, r3, r9
 8008884:	4543      	cmp	r3, r8
 8008886:	f77f af79 	ble.w	800877c <_printf_float+0x250>
 800888a:	2301      	movs	r3, #1
 800888c:	4652      	mov	r2, sl
 800888e:	4631      	mov	r1, r6
 8008890:	4628      	mov	r0, r5
 8008892:	47b8      	blx	r7
 8008894:	3001      	adds	r0, #1
 8008896:	f43f aeaa 	beq.w	80085ee <_printf_float+0xc2>
 800889a:	f108 0801 	add.w	r8, r8, #1
 800889e:	e7ec      	b.n	800887a <_printf_float+0x34e>
 80088a0:	4613      	mov	r3, r2
 80088a2:	4631      	mov	r1, r6
 80088a4:	4642      	mov	r2, r8
 80088a6:	4628      	mov	r0, r5
 80088a8:	47b8      	blx	r7
 80088aa:	3001      	adds	r0, #1
 80088ac:	d1c0      	bne.n	8008830 <_printf_float+0x304>
 80088ae:	e69e      	b.n	80085ee <_printf_float+0xc2>
 80088b0:	2301      	movs	r3, #1
 80088b2:	4631      	mov	r1, r6
 80088b4:	4628      	mov	r0, r5
 80088b6:	9205      	str	r2, [sp, #20]
 80088b8:	47b8      	blx	r7
 80088ba:	3001      	adds	r0, #1
 80088bc:	f43f ae97 	beq.w	80085ee <_printf_float+0xc2>
 80088c0:	9a05      	ldr	r2, [sp, #20]
 80088c2:	f10b 0b01 	add.w	fp, fp, #1
 80088c6:	e7b9      	b.n	800883c <_printf_float+0x310>
 80088c8:	ee18 3a10 	vmov	r3, s16
 80088cc:	4652      	mov	r2, sl
 80088ce:	4631      	mov	r1, r6
 80088d0:	4628      	mov	r0, r5
 80088d2:	47b8      	blx	r7
 80088d4:	3001      	adds	r0, #1
 80088d6:	d1be      	bne.n	8008856 <_printf_float+0x32a>
 80088d8:	e689      	b.n	80085ee <_printf_float+0xc2>
 80088da:	9a05      	ldr	r2, [sp, #20]
 80088dc:	464b      	mov	r3, r9
 80088de:	4442      	add	r2, r8
 80088e0:	4631      	mov	r1, r6
 80088e2:	4628      	mov	r0, r5
 80088e4:	47b8      	blx	r7
 80088e6:	3001      	adds	r0, #1
 80088e8:	d1c1      	bne.n	800886e <_printf_float+0x342>
 80088ea:	e680      	b.n	80085ee <_printf_float+0xc2>
 80088ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088ee:	2a01      	cmp	r2, #1
 80088f0:	dc01      	bgt.n	80088f6 <_printf_float+0x3ca>
 80088f2:	07db      	lsls	r3, r3, #31
 80088f4:	d538      	bpl.n	8008968 <_printf_float+0x43c>
 80088f6:	2301      	movs	r3, #1
 80088f8:	4642      	mov	r2, r8
 80088fa:	4631      	mov	r1, r6
 80088fc:	4628      	mov	r0, r5
 80088fe:	47b8      	blx	r7
 8008900:	3001      	adds	r0, #1
 8008902:	f43f ae74 	beq.w	80085ee <_printf_float+0xc2>
 8008906:	ee18 3a10 	vmov	r3, s16
 800890a:	4652      	mov	r2, sl
 800890c:	4631      	mov	r1, r6
 800890e:	4628      	mov	r0, r5
 8008910:	47b8      	blx	r7
 8008912:	3001      	adds	r0, #1
 8008914:	f43f ae6b 	beq.w	80085ee <_printf_float+0xc2>
 8008918:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800891c:	2200      	movs	r2, #0
 800891e:	2300      	movs	r3, #0
 8008920:	f7f8 f8f2 	bl	8000b08 <__aeabi_dcmpeq>
 8008924:	b9d8      	cbnz	r0, 800895e <_printf_float+0x432>
 8008926:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008928:	f108 0201 	add.w	r2, r8, #1
 800892c:	3b01      	subs	r3, #1
 800892e:	4631      	mov	r1, r6
 8008930:	4628      	mov	r0, r5
 8008932:	47b8      	blx	r7
 8008934:	3001      	adds	r0, #1
 8008936:	d10e      	bne.n	8008956 <_printf_float+0x42a>
 8008938:	e659      	b.n	80085ee <_printf_float+0xc2>
 800893a:	2301      	movs	r3, #1
 800893c:	4652      	mov	r2, sl
 800893e:	4631      	mov	r1, r6
 8008940:	4628      	mov	r0, r5
 8008942:	47b8      	blx	r7
 8008944:	3001      	adds	r0, #1
 8008946:	f43f ae52 	beq.w	80085ee <_printf_float+0xc2>
 800894a:	f108 0801 	add.w	r8, r8, #1
 800894e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008950:	3b01      	subs	r3, #1
 8008952:	4543      	cmp	r3, r8
 8008954:	dcf1      	bgt.n	800893a <_printf_float+0x40e>
 8008956:	464b      	mov	r3, r9
 8008958:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800895c:	e6dc      	b.n	8008718 <_printf_float+0x1ec>
 800895e:	f04f 0800 	mov.w	r8, #0
 8008962:	f104 0a1a 	add.w	sl, r4, #26
 8008966:	e7f2      	b.n	800894e <_printf_float+0x422>
 8008968:	2301      	movs	r3, #1
 800896a:	4642      	mov	r2, r8
 800896c:	e7df      	b.n	800892e <_printf_float+0x402>
 800896e:	2301      	movs	r3, #1
 8008970:	464a      	mov	r2, r9
 8008972:	4631      	mov	r1, r6
 8008974:	4628      	mov	r0, r5
 8008976:	47b8      	blx	r7
 8008978:	3001      	adds	r0, #1
 800897a:	f43f ae38 	beq.w	80085ee <_printf_float+0xc2>
 800897e:	f108 0801 	add.w	r8, r8, #1
 8008982:	68e3      	ldr	r3, [r4, #12]
 8008984:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008986:	1a5b      	subs	r3, r3, r1
 8008988:	4543      	cmp	r3, r8
 800898a:	dcf0      	bgt.n	800896e <_printf_float+0x442>
 800898c:	e6fa      	b.n	8008784 <_printf_float+0x258>
 800898e:	f04f 0800 	mov.w	r8, #0
 8008992:	f104 0919 	add.w	r9, r4, #25
 8008996:	e7f4      	b.n	8008982 <_printf_float+0x456>

08008998 <_printf_common>:
 8008998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800899c:	4616      	mov	r6, r2
 800899e:	4699      	mov	r9, r3
 80089a0:	688a      	ldr	r2, [r1, #8]
 80089a2:	690b      	ldr	r3, [r1, #16]
 80089a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80089a8:	4293      	cmp	r3, r2
 80089aa:	bfb8      	it	lt
 80089ac:	4613      	movlt	r3, r2
 80089ae:	6033      	str	r3, [r6, #0]
 80089b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80089b4:	4607      	mov	r7, r0
 80089b6:	460c      	mov	r4, r1
 80089b8:	b10a      	cbz	r2, 80089be <_printf_common+0x26>
 80089ba:	3301      	adds	r3, #1
 80089bc:	6033      	str	r3, [r6, #0]
 80089be:	6823      	ldr	r3, [r4, #0]
 80089c0:	0699      	lsls	r1, r3, #26
 80089c2:	bf42      	ittt	mi
 80089c4:	6833      	ldrmi	r3, [r6, #0]
 80089c6:	3302      	addmi	r3, #2
 80089c8:	6033      	strmi	r3, [r6, #0]
 80089ca:	6825      	ldr	r5, [r4, #0]
 80089cc:	f015 0506 	ands.w	r5, r5, #6
 80089d0:	d106      	bne.n	80089e0 <_printf_common+0x48>
 80089d2:	f104 0a19 	add.w	sl, r4, #25
 80089d6:	68e3      	ldr	r3, [r4, #12]
 80089d8:	6832      	ldr	r2, [r6, #0]
 80089da:	1a9b      	subs	r3, r3, r2
 80089dc:	42ab      	cmp	r3, r5
 80089de:	dc26      	bgt.n	8008a2e <_printf_common+0x96>
 80089e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80089e4:	1e13      	subs	r3, r2, #0
 80089e6:	6822      	ldr	r2, [r4, #0]
 80089e8:	bf18      	it	ne
 80089ea:	2301      	movne	r3, #1
 80089ec:	0692      	lsls	r2, r2, #26
 80089ee:	d42b      	bmi.n	8008a48 <_printf_common+0xb0>
 80089f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80089f4:	4649      	mov	r1, r9
 80089f6:	4638      	mov	r0, r7
 80089f8:	47c0      	blx	r8
 80089fa:	3001      	adds	r0, #1
 80089fc:	d01e      	beq.n	8008a3c <_printf_common+0xa4>
 80089fe:	6823      	ldr	r3, [r4, #0]
 8008a00:	68e5      	ldr	r5, [r4, #12]
 8008a02:	6832      	ldr	r2, [r6, #0]
 8008a04:	f003 0306 	and.w	r3, r3, #6
 8008a08:	2b04      	cmp	r3, #4
 8008a0a:	bf08      	it	eq
 8008a0c:	1aad      	subeq	r5, r5, r2
 8008a0e:	68a3      	ldr	r3, [r4, #8]
 8008a10:	6922      	ldr	r2, [r4, #16]
 8008a12:	bf0c      	ite	eq
 8008a14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a18:	2500      	movne	r5, #0
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	bfc4      	itt	gt
 8008a1e:	1a9b      	subgt	r3, r3, r2
 8008a20:	18ed      	addgt	r5, r5, r3
 8008a22:	2600      	movs	r6, #0
 8008a24:	341a      	adds	r4, #26
 8008a26:	42b5      	cmp	r5, r6
 8008a28:	d11a      	bne.n	8008a60 <_printf_common+0xc8>
 8008a2a:	2000      	movs	r0, #0
 8008a2c:	e008      	b.n	8008a40 <_printf_common+0xa8>
 8008a2e:	2301      	movs	r3, #1
 8008a30:	4652      	mov	r2, sl
 8008a32:	4649      	mov	r1, r9
 8008a34:	4638      	mov	r0, r7
 8008a36:	47c0      	blx	r8
 8008a38:	3001      	adds	r0, #1
 8008a3a:	d103      	bne.n	8008a44 <_printf_common+0xac>
 8008a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a44:	3501      	adds	r5, #1
 8008a46:	e7c6      	b.n	80089d6 <_printf_common+0x3e>
 8008a48:	18e1      	adds	r1, r4, r3
 8008a4a:	1c5a      	adds	r2, r3, #1
 8008a4c:	2030      	movs	r0, #48	; 0x30
 8008a4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a52:	4422      	add	r2, r4
 8008a54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008a58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008a5c:	3302      	adds	r3, #2
 8008a5e:	e7c7      	b.n	80089f0 <_printf_common+0x58>
 8008a60:	2301      	movs	r3, #1
 8008a62:	4622      	mov	r2, r4
 8008a64:	4649      	mov	r1, r9
 8008a66:	4638      	mov	r0, r7
 8008a68:	47c0      	blx	r8
 8008a6a:	3001      	adds	r0, #1
 8008a6c:	d0e6      	beq.n	8008a3c <_printf_common+0xa4>
 8008a6e:	3601      	adds	r6, #1
 8008a70:	e7d9      	b.n	8008a26 <_printf_common+0x8e>
	...

08008a74 <_printf_i>:
 8008a74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a78:	7e0f      	ldrb	r7, [r1, #24]
 8008a7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008a7c:	2f78      	cmp	r7, #120	; 0x78
 8008a7e:	4691      	mov	r9, r2
 8008a80:	4680      	mov	r8, r0
 8008a82:	460c      	mov	r4, r1
 8008a84:	469a      	mov	sl, r3
 8008a86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008a8a:	d807      	bhi.n	8008a9c <_printf_i+0x28>
 8008a8c:	2f62      	cmp	r7, #98	; 0x62
 8008a8e:	d80a      	bhi.n	8008aa6 <_printf_i+0x32>
 8008a90:	2f00      	cmp	r7, #0
 8008a92:	f000 80d8 	beq.w	8008c46 <_printf_i+0x1d2>
 8008a96:	2f58      	cmp	r7, #88	; 0x58
 8008a98:	f000 80a3 	beq.w	8008be2 <_printf_i+0x16e>
 8008a9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008aa0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008aa4:	e03a      	b.n	8008b1c <_printf_i+0xa8>
 8008aa6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008aaa:	2b15      	cmp	r3, #21
 8008aac:	d8f6      	bhi.n	8008a9c <_printf_i+0x28>
 8008aae:	a101      	add	r1, pc, #4	; (adr r1, 8008ab4 <_printf_i+0x40>)
 8008ab0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ab4:	08008b0d 	.word	0x08008b0d
 8008ab8:	08008b21 	.word	0x08008b21
 8008abc:	08008a9d 	.word	0x08008a9d
 8008ac0:	08008a9d 	.word	0x08008a9d
 8008ac4:	08008a9d 	.word	0x08008a9d
 8008ac8:	08008a9d 	.word	0x08008a9d
 8008acc:	08008b21 	.word	0x08008b21
 8008ad0:	08008a9d 	.word	0x08008a9d
 8008ad4:	08008a9d 	.word	0x08008a9d
 8008ad8:	08008a9d 	.word	0x08008a9d
 8008adc:	08008a9d 	.word	0x08008a9d
 8008ae0:	08008c2d 	.word	0x08008c2d
 8008ae4:	08008b51 	.word	0x08008b51
 8008ae8:	08008c0f 	.word	0x08008c0f
 8008aec:	08008a9d 	.word	0x08008a9d
 8008af0:	08008a9d 	.word	0x08008a9d
 8008af4:	08008c4f 	.word	0x08008c4f
 8008af8:	08008a9d 	.word	0x08008a9d
 8008afc:	08008b51 	.word	0x08008b51
 8008b00:	08008a9d 	.word	0x08008a9d
 8008b04:	08008a9d 	.word	0x08008a9d
 8008b08:	08008c17 	.word	0x08008c17
 8008b0c:	682b      	ldr	r3, [r5, #0]
 8008b0e:	1d1a      	adds	r2, r3, #4
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	602a      	str	r2, [r5, #0]
 8008b14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	e0a3      	b.n	8008c68 <_printf_i+0x1f4>
 8008b20:	6820      	ldr	r0, [r4, #0]
 8008b22:	6829      	ldr	r1, [r5, #0]
 8008b24:	0606      	lsls	r6, r0, #24
 8008b26:	f101 0304 	add.w	r3, r1, #4
 8008b2a:	d50a      	bpl.n	8008b42 <_printf_i+0xce>
 8008b2c:	680e      	ldr	r6, [r1, #0]
 8008b2e:	602b      	str	r3, [r5, #0]
 8008b30:	2e00      	cmp	r6, #0
 8008b32:	da03      	bge.n	8008b3c <_printf_i+0xc8>
 8008b34:	232d      	movs	r3, #45	; 0x2d
 8008b36:	4276      	negs	r6, r6
 8008b38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b3c:	485e      	ldr	r0, [pc, #376]	; (8008cb8 <_printf_i+0x244>)
 8008b3e:	230a      	movs	r3, #10
 8008b40:	e019      	b.n	8008b76 <_printf_i+0x102>
 8008b42:	680e      	ldr	r6, [r1, #0]
 8008b44:	602b      	str	r3, [r5, #0]
 8008b46:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008b4a:	bf18      	it	ne
 8008b4c:	b236      	sxthne	r6, r6
 8008b4e:	e7ef      	b.n	8008b30 <_printf_i+0xbc>
 8008b50:	682b      	ldr	r3, [r5, #0]
 8008b52:	6820      	ldr	r0, [r4, #0]
 8008b54:	1d19      	adds	r1, r3, #4
 8008b56:	6029      	str	r1, [r5, #0]
 8008b58:	0601      	lsls	r1, r0, #24
 8008b5a:	d501      	bpl.n	8008b60 <_printf_i+0xec>
 8008b5c:	681e      	ldr	r6, [r3, #0]
 8008b5e:	e002      	b.n	8008b66 <_printf_i+0xf2>
 8008b60:	0646      	lsls	r6, r0, #25
 8008b62:	d5fb      	bpl.n	8008b5c <_printf_i+0xe8>
 8008b64:	881e      	ldrh	r6, [r3, #0]
 8008b66:	4854      	ldr	r0, [pc, #336]	; (8008cb8 <_printf_i+0x244>)
 8008b68:	2f6f      	cmp	r7, #111	; 0x6f
 8008b6a:	bf0c      	ite	eq
 8008b6c:	2308      	moveq	r3, #8
 8008b6e:	230a      	movne	r3, #10
 8008b70:	2100      	movs	r1, #0
 8008b72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008b76:	6865      	ldr	r5, [r4, #4]
 8008b78:	60a5      	str	r5, [r4, #8]
 8008b7a:	2d00      	cmp	r5, #0
 8008b7c:	bfa2      	ittt	ge
 8008b7e:	6821      	ldrge	r1, [r4, #0]
 8008b80:	f021 0104 	bicge.w	r1, r1, #4
 8008b84:	6021      	strge	r1, [r4, #0]
 8008b86:	b90e      	cbnz	r6, 8008b8c <_printf_i+0x118>
 8008b88:	2d00      	cmp	r5, #0
 8008b8a:	d04d      	beq.n	8008c28 <_printf_i+0x1b4>
 8008b8c:	4615      	mov	r5, r2
 8008b8e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008b92:	fb03 6711 	mls	r7, r3, r1, r6
 8008b96:	5dc7      	ldrb	r7, [r0, r7]
 8008b98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008b9c:	4637      	mov	r7, r6
 8008b9e:	42bb      	cmp	r3, r7
 8008ba0:	460e      	mov	r6, r1
 8008ba2:	d9f4      	bls.n	8008b8e <_printf_i+0x11a>
 8008ba4:	2b08      	cmp	r3, #8
 8008ba6:	d10b      	bne.n	8008bc0 <_printf_i+0x14c>
 8008ba8:	6823      	ldr	r3, [r4, #0]
 8008baa:	07de      	lsls	r6, r3, #31
 8008bac:	d508      	bpl.n	8008bc0 <_printf_i+0x14c>
 8008bae:	6923      	ldr	r3, [r4, #16]
 8008bb0:	6861      	ldr	r1, [r4, #4]
 8008bb2:	4299      	cmp	r1, r3
 8008bb4:	bfde      	ittt	le
 8008bb6:	2330      	movle	r3, #48	; 0x30
 8008bb8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008bbc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008bc0:	1b52      	subs	r2, r2, r5
 8008bc2:	6122      	str	r2, [r4, #16]
 8008bc4:	f8cd a000 	str.w	sl, [sp]
 8008bc8:	464b      	mov	r3, r9
 8008bca:	aa03      	add	r2, sp, #12
 8008bcc:	4621      	mov	r1, r4
 8008bce:	4640      	mov	r0, r8
 8008bd0:	f7ff fee2 	bl	8008998 <_printf_common>
 8008bd4:	3001      	adds	r0, #1
 8008bd6:	d14c      	bne.n	8008c72 <_printf_i+0x1fe>
 8008bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bdc:	b004      	add	sp, #16
 8008bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008be2:	4835      	ldr	r0, [pc, #212]	; (8008cb8 <_printf_i+0x244>)
 8008be4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008be8:	6829      	ldr	r1, [r5, #0]
 8008bea:	6823      	ldr	r3, [r4, #0]
 8008bec:	f851 6b04 	ldr.w	r6, [r1], #4
 8008bf0:	6029      	str	r1, [r5, #0]
 8008bf2:	061d      	lsls	r5, r3, #24
 8008bf4:	d514      	bpl.n	8008c20 <_printf_i+0x1ac>
 8008bf6:	07df      	lsls	r7, r3, #31
 8008bf8:	bf44      	itt	mi
 8008bfa:	f043 0320 	orrmi.w	r3, r3, #32
 8008bfe:	6023      	strmi	r3, [r4, #0]
 8008c00:	b91e      	cbnz	r6, 8008c0a <_printf_i+0x196>
 8008c02:	6823      	ldr	r3, [r4, #0]
 8008c04:	f023 0320 	bic.w	r3, r3, #32
 8008c08:	6023      	str	r3, [r4, #0]
 8008c0a:	2310      	movs	r3, #16
 8008c0c:	e7b0      	b.n	8008b70 <_printf_i+0xfc>
 8008c0e:	6823      	ldr	r3, [r4, #0]
 8008c10:	f043 0320 	orr.w	r3, r3, #32
 8008c14:	6023      	str	r3, [r4, #0]
 8008c16:	2378      	movs	r3, #120	; 0x78
 8008c18:	4828      	ldr	r0, [pc, #160]	; (8008cbc <_printf_i+0x248>)
 8008c1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008c1e:	e7e3      	b.n	8008be8 <_printf_i+0x174>
 8008c20:	0659      	lsls	r1, r3, #25
 8008c22:	bf48      	it	mi
 8008c24:	b2b6      	uxthmi	r6, r6
 8008c26:	e7e6      	b.n	8008bf6 <_printf_i+0x182>
 8008c28:	4615      	mov	r5, r2
 8008c2a:	e7bb      	b.n	8008ba4 <_printf_i+0x130>
 8008c2c:	682b      	ldr	r3, [r5, #0]
 8008c2e:	6826      	ldr	r6, [r4, #0]
 8008c30:	6961      	ldr	r1, [r4, #20]
 8008c32:	1d18      	adds	r0, r3, #4
 8008c34:	6028      	str	r0, [r5, #0]
 8008c36:	0635      	lsls	r5, r6, #24
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	d501      	bpl.n	8008c40 <_printf_i+0x1cc>
 8008c3c:	6019      	str	r1, [r3, #0]
 8008c3e:	e002      	b.n	8008c46 <_printf_i+0x1d2>
 8008c40:	0670      	lsls	r0, r6, #25
 8008c42:	d5fb      	bpl.n	8008c3c <_printf_i+0x1c8>
 8008c44:	8019      	strh	r1, [r3, #0]
 8008c46:	2300      	movs	r3, #0
 8008c48:	6123      	str	r3, [r4, #16]
 8008c4a:	4615      	mov	r5, r2
 8008c4c:	e7ba      	b.n	8008bc4 <_printf_i+0x150>
 8008c4e:	682b      	ldr	r3, [r5, #0]
 8008c50:	1d1a      	adds	r2, r3, #4
 8008c52:	602a      	str	r2, [r5, #0]
 8008c54:	681d      	ldr	r5, [r3, #0]
 8008c56:	6862      	ldr	r2, [r4, #4]
 8008c58:	2100      	movs	r1, #0
 8008c5a:	4628      	mov	r0, r5
 8008c5c:	f7f7 fae0 	bl	8000220 <memchr>
 8008c60:	b108      	cbz	r0, 8008c66 <_printf_i+0x1f2>
 8008c62:	1b40      	subs	r0, r0, r5
 8008c64:	6060      	str	r0, [r4, #4]
 8008c66:	6863      	ldr	r3, [r4, #4]
 8008c68:	6123      	str	r3, [r4, #16]
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c70:	e7a8      	b.n	8008bc4 <_printf_i+0x150>
 8008c72:	6923      	ldr	r3, [r4, #16]
 8008c74:	462a      	mov	r2, r5
 8008c76:	4649      	mov	r1, r9
 8008c78:	4640      	mov	r0, r8
 8008c7a:	47d0      	blx	sl
 8008c7c:	3001      	adds	r0, #1
 8008c7e:	d0ab      	beq.n	8008bd8 <_printf_i+0x164>
 8008c80:	6823      	ldr	r3, [r4, #0]
 8008c82:	079b      	lsls	r3, r3, #30
 8008c84:	d413      	bmi.n	8008cae <_printf_i+0x23a>
 8008c86:	68e0      	ldr	r0, [r4, #12]
 8008c88:	9b03      	ldr	r3, [sp, #12]
 8008c8a:	4298      	cmp	r0, r3
 8008c8c:	bfb8      	it	lt
 8008c8e:	4618      	movlt	r0, r3
 8008c90:	e7a4      	b.n	8008bdc <_printf_i+0x168>
 8008c92:	2301      	movs	r3, #1
 8008c94:	4632      	mov	r2, r6
 8008c96:	4649      	mov	r1, r9
 8008c98:	4640      	mov	r0, r8
 8008c9a:	47d0      	blx	sl
 8008c9c:	3001      	adds	r0, #1
 8008c9e:	d09b      	beq.n	8008bd8 <_printf_i+0x164>
 8008ca0:	3501      	adds	r5, #1
 8008ca2:	68e3      	ldr	r3, [r4, #12]
 8008ca4:	9903      	ldr	r1, [sp, #12]
 8008ca6:	1a5b      	subs	r3, r3, r1
 8008ca8:	42ab      	cmp	r3, r5
 8008caa:	dcf2      	bgt.n	8008c92 <_printf_i+0x21e>
 8008cac:	e7eb      	b.n	8008c86 <_printf_i+0x212>
 8008cae:	2500      	movs	r5, #0
 8008cb0:	f104 0619 	add.w	r6, r4, #25
 8008cb4:	e7f5      	b.n	8008ca2 <_printf_i+0x22e>
 8008cb6:	bf00      	nop
 8008cb8:	0800bf6a 	.word	0x0800bf6a
 8008cbc:	0800bf7b 	.word	0x0800bf7b

08008cc0 <siprintf>:
 8008cc0:	b40e      	push	{r1, r2, r3}
 8008cc2:	b500      	push	{lr}
 8008cc4:	b09c      	sub	sp, #112	; 0x70
 8008cc6:	ab1d      	add	r3, sp, #116	; 0x74
 8008cc8:	9002      	str	r0, [sp, #8]
 8008cca:	9006      	str	r0, [sp, #24]
 8008ccc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008cd0:	4809      	ldr	r0, [pc, #36]	; (8008cf8 <siprintf+0x38>)
 8008cd2:	9107      	str	r1, [sp, #28]
 8008cd4:	9104      	str	r1, [sp, #16]
 8008cd6:	4909      	ldr	r1, [pc, #36]	; (8008cfc <siprintf+0x3c>)
 8008cd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cdc:	9105      	str	r1, [sp, #20]
 8008cde:	6800      	ldr	r0, [r0, #0]
 8008ce0:	9301      	str	r3, [sp, #4]
 8008ce2:	a902      	add	r1, sp, #8
 8008ce4:	f001 fb76 	bl	800a3d4 <_svfiprintf_r>
 8008ce8:	9b02      	ldr	r3, [sp, #8]
 8008cea:	2200      	movs	r2, #0
 8008cec:	701a      	strb	r2, [r3, #0]
 8008cee:	b01c      	add	sp, #112	; 0x70
 8008cf0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008cf4:	b003      	add	sp, #12
 8008cf6:	4770      	bx	lr
 8008cf8:	2000001c 	.word	0x2000001c
 8008cfc:	ffff0208 	.word	0xffff0208

08008d00 <quorem>:
 8008d00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d04:	6903      	ldr	r3, [r0, #16]
 8008d06:	690c      	ldr	r4, [r1, #16]
 8008d08:	42a3      	cmp	r3, r4
 8008d0a:	4607      	mov	r7, r0
 8008d0c:	f2c0 8081 	blt.w	8008e12 <quorem+0x112>
 8008d10:	3c01      	subs	r4, #1
 8008d12:	f101 0814 	add.w	r8, r1, #20
 8008d16:	f100 0514 	add.w	r5, r0, #20
 8008d1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008d1e:	9301      	str	r3, [sp, #4]
 8008d20:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008d24:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008d28:	3301      	adds	r3, #1
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008d30:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008d34:	fbb2 f6f3 	udiv	r6, r2, r3
 8008d38:	d331      	bcc.n	8008d9e <quorem+0x9e>
 8008d3a:	f04f 0e00 	mov.w	lr, #0
 8008d3e:	4640      	mov	r0, r8
 8008d40:	46ac      	mov	ip, r5
 8008d42:	46f2      	mov	sl, lr
 8008d44:	f850 2b04 	ldr.w	r2, [r0], #4
 8008d48:	b293      	uxth	r3, r2
 8008d4a:	fb06 e303 	mla	r3, r6, r3, lr
 8008d4e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008d52:	b29b      	uxth	r3, r3
 8008d54:	ebaa 0303 	sub.w	r3, sl, r3
 8008d58:	f8dc a000 	ldr.w	sl, [ip]
 8008d5c:	0c12      	lsrs	r2, r2, #16
 8008d5e:	fa13 f38a 	uxtah	r3, r3, sl
 8008d62:	fb06 e202 	mla	r2, r6, r2, lr
 8008d66:	9300      	str	r3, [sp, #0]
 8008d68:	9b00      	ldr	r3, [sp, #0]
 8008d6a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008d6e:	b292      	uxth	r2, r2
 8008d70:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008d74:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008d78:	f8bd 3000 	ldrh.w	r3, [sp]
 8008d7c:	4581      	cmp	r9, r0
 8008d7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d82:	f84c 3b04 	str.w	r3, [ip], #4
 8008d86:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008d8a:	d2db      	bcs.n	8008d44 <quorem+0x44>
 8008d8c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008d90:	b92b      	cbnz	r3, 8008d9e <quorem+0x9e>
 8008d92:	9b01      	ldr	r3, [sp, #4]
 8008d94:	3b04      	subs	r3, #4
 8008d96:	429d      	cmp	r5, r3
 8008d98:	461a      	mov	r2, r3
 8008d9a:	d32e      	bcc.n	8008dfa <quorem+0xfa>
 8008d9c:	613c      	str	r4, [r7, #16]
 8008d9e:	4638      	mov	r0, r7
 8008da0:	f001 f8c4 	bl	8009f2c <__mcmp>
 8008da4:	2800      	cmp	r0, #0
 8008da6:	db24      	blt.n	8008df2 <quorem+0xf2>
 8008da8:	3601      	adds	r6, #1
 8008daa:	4628      	mov	r0, r5
 8008dac:	f04f 0c00 	mov.w	ip, #0
 8008db0:	f858 2b04 	ldr.w	r2, [r8], #4
 8008db4:	f8d0 e000 	ldr.w	lr, [r0]
 8008db8:	b293      	uxth	r3, r2
 8008dba:	ebac 0303 	sub.w	r3, ip, r3
 8008dbe:	0c12      	lsrs	r2, r2, #16
 8008dc0:	fa13 f38e 	uxtah	r3, r3, lr
 8008dc4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008dc8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008dcc:	b29b      	uxth	r3, r3
 8008dce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008dd2:	45c1      	cmp	r9, r8
 8008dd4:	f840 3b04 	str.w	r3, [r0], #4
 8008dd8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008ddc:	d2e8      	bcs.n	8008db0 <quorem+0xb0>
 8008dde:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008de2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008de6:	b922      	cbnz	r2, 8008df2 <quorem+0xf2>
 8008de8:	3b04      	subs	r3, #4
 8008dea:	429d      	cmp	r5, r3
 8008dec:	461a      	mov	r2, r3
 8008dee:	d30a      	bcc.n	8008e06 <quorem+0x106>
 8008df0:	613c      	str	r4, [r7, #16]
 8008df2:	4630      	mov	r0, r6
 8008df4:	b003      	add	sp, #12
 8008df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dfa:	6812      	ldr	r2, [r2, #0]
 8008dfc:	3b04      	subs	r3, #4
 8008dfe:	2a00      	cmp	r2, #0
 8008e00:	d1cc      	bne.n	8008d9c <quorem+0x9c>
 8008e02:	3c01      	subs	r4, #1
 8008e04:	e7c7      	b.n	8008d96 <quorem+0x96>
 8008e06:	6812      	ldr	r2, [r2, #0]
 8008e08:	3b04      	subs	r3, #4
 8008e0a:	2a00      	cmp	r2, #0
 8008e0c:	d1f0      	bne.n	8008df0 <quorem+0xf0>
 8008e0e:	3c01      	subs	r4, #1
 8008e10:	e7eb      	b.n	8008dea <quorem+0xea>
 8008e12:	2000      	movs	r0, #0
 8008e14:	e7ee      	b.n	8008df4 <quorem+0xf4>
	...

08008e18 <_dtoa_r>:
 8008e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e1c:	ed2d 8b04 	vpush	{d8-d9}
 8008e20:	ec57 6b10 	vmov	r6, r7, d0
 8008e24:	b093      	sub	sp, #76	; 0x4c
 8008e26:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008e28:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008e2c:	9106      	str	r1, [sp, #24]
 8008e2e:	ee10 aa10 	vmov	sl, s0
 8008e32:	4604      	mov	r4, r0
 8008e34:	9209      	str	r2, [sp, #36]	; 0x24
 8008e36:	930c      	str	r3, [sp, #48]	; 0x30
 8008e38:	46bb      	mov	fp, r7
 8008e3a:	b975      	cbnz	r5, 8008e5a <_dtoa_r+0x42>
 8008e3c:	2010      	movs	r0, #16
 8008e3e:	f000 fddd 	bl	80099fc <malloc>
 8008e42:	4602      	mov	r2, r0
 8008e44:	6260      	str	r0, [r4, #36]	; 0x24
 8008e46:	b920      	cbnz	r0, 8008e52 <_dtoa_r+0x3a>
 8008e48:	4ba7      	ldr	r3, [pc, #668]	; (80090e8 <_dtoa_r+0x2d0>)
 8008e4a:	21ea      	movs	r1, #234	; 0xea
 8008e4c:	48a7      	ldr	r0, [pc, #668]	; (80090ec <_dtoa_r+0x2d4>)
 8008e4e:	f001 fbd1 	bl	800a5f4 <__assert_func>
 8008e52:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008e56:	6005      	str	r5, [r0, #0]
 8008e58:	60c5      	str	r5, [r0, #12]
 8008e5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e5c:	6819      	ldr	r1, [r3, #0]
 8008e5e:	b151      	cbz	r1, 8008e76 <_dtoa_r+0x5e>
 8008e60:	685a      	ldr	r2, [r3, #4]
 8008e62:	604a      	str	r2, [r1, #4]
 8008e64:	2301      	movs	r3, #1
 8008e66:	4093      	lsls	r3, r2
 8008e68:	608b      	str	r3, [r1, #8]
 8008e6a:	4620      	mov	r0, r4
 8008e6c:	f000 fe1c 	bl	8009aa8 <_Bfree>
 8008e70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e72:	2200      	movs	r2, #0
 8008e74:	601a      	str	r2, [r3, #0]
 8008e76:	1e3b      	subs	r3, r7, #0
 8008e78:	bfaa      	itet	ge
 8008e7a:	2300      	movge	r3, #0
 8008e7c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008e80:	f8c8 3000 	strge.w	r3, [r8]
 8008e84:	4b9a      	ldr	r3, [pc, #616]	; (80090f0 <_dtoa_r+0x2d8>)
 8008e86:	bfbc      	itt	lt
 8008e88:	2201      	movlt	r2, #1
 8008e8a:	f8c8 2000 	strlt.w	r2, [r8]
 8008e8e:	ea33 030b 	bics.w	r3, r3, fp
 8008e92:	d11b      	bne.n	8008ecc <_dtoa_r+0xb4>
 8008e94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e96:	f242 730f 	movw	r3, #9999	; 0x270f
 8008e9a:	6013      	str	r3, [r2, #0]
 8008e9c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008ea0:	4333      	orrs	r3, r6
 8008ea2:	f000 8592 	beq.w	80099ca <_dtoa_r+0xbb2>
 8008ea6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ea8:	b963      	cbnz	r3, 8008ec4 <_dtoa_r+0xac>
 8008eaa:	4b92      	ldr	r3, [pc, #584]	; (80090f4 <_dtoa_r+0x2dc>)
 8008eac:	e022      	b.n	8008ef4 <_dtoa_r+0xdc>
 8008eae:	4b92      	ldr	r3, [pc, #584]	; (80090f8 <_dtoa_r+0x2e0>)
 8008eb0:	9301      	str	r3, [sp, #4]
 8008eb2:	3308      	adds	r3, #8
 8008eb4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008eb6:	6013      	str	r3, [r2, #0]
 8008eb8:	9801      	ldr	r0, [sp, #4]
 8008eba:	b013      	add	sp, #76	; 0x4c
 8008ebc:	ecbd 8b04 	vpop	{d8-d9}
 8008ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ec4:	4b8b      	ldr	r3, [pc, #556]	; (80090f4 <_dtoa_r+0x2dc>)
 8008ec6:	9301      	str	r3, [sp, #4]
 8008ec8:	3303      	adds	r3, #3
 8008eca:	e7f3      	b.n	8008eb4 <_dtoa_r+0x9c>
 8008ecc:	2200      	movs	r2, #0
 8008ece:	2300      	movs	r3, #0
 8008ed0:	4650      	mov	r0, sl
 8008ed2:	4659      	mov	r1, fp
 8008ed4:	f7f7 fe18 	bl	8000b08 <__aeabi_dcmpeq>
 8008ed8:	ec4b ab19 	vmov	d9, sl, fp
 8008edc:	4680      	mov	r8, r0
 8008ede:	b158      	cbz	r0, 8008ef8 <_dtoa_r+0xe0>
 8008ee0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	6013      	str	r3, [r2, #0]
 8008ee6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	f000 856b 	beq.w	80099c4 <_dtoa_r+0xbac>
 8008eee:	4883      	ldr	r0, [pc, #524]	; (80090fc <_dtoa_r+0x2e4>)
 8008ef0:	6018      	str	r0, [r3, #0]
 8008ef2:	1e43      	subs	r3, r0, #1
 8008ef4:	9301      	str	r3, [sp, #4]
 8008ef6:	e7df      	b.n	8008eb8 <_dtoa_r+0xa0>
 8008ef8:	ec4b ab10 	vmov	d0, sl, fp
 8008efc:	aa10      	add	r2, sp, #64	; 0x40
 8008efe:	a911      	add	r1, sp, #68	; 0x44
 8008f00:	4620      	mov	r0, r4
 8008f02:	f001 f8b9 	bl	800a078 <__d2b>
 8008f06:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008f0a:	ee08 0a10 	vmov	s16, r0
 8008f0e:	2d00      	cmp	r5, #0
 8008f10:	f000 8084 	beq.w	800901c <_dtoa_r+0x204>
 8008f14:	ee19 3a90 	vmov	r3, s19
 8008f18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008f1c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008f20:	4656      	mov	r6, sl
 8008f22:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008f26:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008f2a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008f2e:	4b74      	ldr	r3, [pc, #464]	; (8009100 <_dtoa_r+0x2e8>)
 8008f30:	2200      	movs	r2, #0
 8008f32:	4630      	mov	r0, r6
 8008f34:	4639      	mov	r1, r7
 8008f36:	f7f7 f9c7 	bl	80002c8 <__aeabi_dsub>
 8008f3a:	a365      	add	r3, pc, #404	; (adr r3, 80090d0 <_dtoa_r+0x2b8>)
 8008f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f40:	f7f7 fb7a 	bl	8000638 <__aeabi_dmul>
 8008f44:	a364      	add	r3, pc, #400	; (adr r3, 80090d8 <_dtoa_r+0x2c0>)
 8008f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f4a:	f7f7 f9bf 	bl	80002cc <__adddf3>
 8008f4e:	4606      	mov	r6, r0
 8008f50:	4628      	mov	r0, r5
 8008f52:	460f      	mov	r7, r1
 8008f54:	f7f7 fb06 	bl	8000564 <__aeabi_i2d>
 8008f58:	a361      	add	r3, pc, #388	; (adr r3, 80090e0 <_dtoa_r+0x2c8>)
 8008f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f5e:	f7f7 fb6b 	bl	8000638 <__aeabi_dmul>
 8008f62:	4602      	mov	r2, r0
 8008f64:	460b      	mov	r3, r1
 8008f66:	4630      	mov	r0, r6
 8008f68:	4639      	mov	r1, r7
 8008f6a:	f7f7 f9af 	bl	80002cc <__adddf3>
 8008f6e:	4606      	mov	r6, r0
 8008f70:	460f      	mov	r7, r1
 8008f72:	f7f7 fe11 	bl	8000b98 <__aeabi_d2iz>
 8008f76:	2200      	movs	r2, #0
 8008f78:	9000      	str	r0, [sp, #0]
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	4630      	mov	r0, r6
 8008f7e:	4639      	mov	r1, r7
 8008f80:	f7f7 fdcc 	bl	8000b1c <__aeabi_dcmplt>
 8008f84:	b150      	cbz	r0, 8008f9c <_dtoa_r+0x184>
 8008f86:	9800      	ldr	r0, [sp, #0]
 8008f88:	f7f7 faec 	bl	8000564 <__aeabi_i2d>
 8008f8c:	4632      	mov	r2, r6
 8008f8e:	463b      	mov	r3, r7
 8008f90:	f7f7 fdba 	bl	8000b08 <__aeabi_dcmpeq>
 8008f94:	b910      	cbnz	r0, 8008f9c <_dtoa_r+0x184>
 8008f96:	9b00      	ldr	r3, [sp, #0]
 8008f98:	3b01      	subs	r3, #1
 8008f9a:	9300      	str	r3, [sp, #0]
 8008f9c:	9b00      	ldr	r3, [sp, #0]
 8008f9e:	2b16      	cmp	r3, #22
 8008fa0:	d85a      	bhi.n	8009058 <_dtoa_r+0x240>
 8008fa2:	9a00      	ldr	r2, [sp, #0]
 8008fa4:	4b57      	ldr	r3, [pc, #348]	; (8009104 <_dtoa_r+0x2ec>)
 8008fa6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fae:	ec51 0b19 	vmov	r0, r1, d9
 8008fb2:	f7f7 fdb3 	bl	8000b1c <__aeabi_dcmplt>
 8008fb6:	2800      	cmp	r0, #0
 8008fb8:	d050      	beq.n	800905c <_dtoa_r+0x244>
 8008fba:	9b00      	ldr	r3, [sp, #0]
 8008fbc:	3b01      	subs	r3, #1
 8008fbe:	9300      	str	r3, [sp, #0]
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008fc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008fc6:	1b5d      	subs	r5, r3, r5
 8008fc8:	1e6b      	subs	r3, r5, #1
 8008fca:	9305      	str	r3, [sp, #20]
 8008fcc:	bf45      	ittet	mi
 8008fce:	f1c5 0301 	rsbmi	r3, r5, #1
 8008fd2:	9304      	strmi	r3, [sp, #16]
 8008fd4:	2300      	movpl	r3, #0
 8008fd6:	2300      	movmi	r3, #0
 8008fd8:	bf4c      	ite	mi
 8008fda:	9305      	strmi	r3, [sp, #20]
 8008fdc:	9304      	strpl	r3, [sp, #16]
 8008fde:	9b00      	ldr	r3, [sp, #0]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	db3d      	blt.n	8009060 <_dtoa_r+0x248>
 8008fe4:	9b05      	ldr	r3, [sp, #20]
 8008fe6:	9a00      	ldr	r2, [sp, #0]
 8008fe8:	920a      	str	r2, [sp, #40]	; 0x28
 8008fea:	4413      	add	r3, r2
 8008fec:	9305      	str	r3, [sp, #20]
 8008fee:	2300      	movs	r3, #0
 8008ff0:	9307      	str	r3, [sp, #28]
 8008ff2:	9b06      	ldr	r3, [sp, #24]
 8008ff4:	2b09      	cmp	r3, #9
 8008ff6:	f200 8089 	bhi.w	800910c <_dtoa_r+0x2f4>
 8008ffa:	2b05      	cmp	r3, #5
 8008ffc:	bfc4      	itt	gt
 8008ffe:	3b04      	subgt	r3, #4
 8009000:	9306      	strgt	r3, [sp, #24]
 8009002:	9b06      	ldr	r3, [sp, #24]
 8009004:	f1a3 0302 	sub.w	r3, r3, #2
 8009008:	bfcc      	ite	gt
 800900a:	2500      	movgt	r5, #0
 800900c:	2501      	movle	r5, #1
 800900e:	2b03      	cmp	r3, #3
 8009010:	f200 8087 	bhi.w	8009122 <_dtoa_r+0x30a>
 8009014:	e8df f003 	tbb	[pc, r3]
 8009018:	59383a2d 	.word	0x59383a2d
 800901c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009020:	441d      	add	r5, r3
 8009022:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009026:	2b20      	cmp	r3, #32
 8009028:	bfc1      	itttt	gt
 800902a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800902e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009032:	fa0b f303 	lslgt.w	r3, fp, r3
 8009036:	fa26 f000 	lsrgt.w	r0, r6, r0
 800903a:	bfda      	itte	le
 800903c:	f1c3 0320 	rsble	r3, r3, #32
 8009040:	fa06 f003 	lslle.w	r0, r6, r3
 8009044:	4318      	orrgt	r0, r3
 8009046:	f7f7 fa7d 	bl	8000544 <__aeabi_ui2d>
 800904a:	2301      	movs	r3, #1
 800904c:	4606      	mov	r6, r0
 800904e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009052:	3d01      	subs	r5, #1
 8009054:	930e      	str	r3, [sp, #56]	; 0x38
 8009056:	e76a      	b.n	8008f2e <_dtoa_r+0x116>
 8009058:	2301      	movs	r3, #1
 800905a:	e7b2      	b.n	8008fc2 <_dtoa_r+0x1aa>
 800905c:	900b      	str	r0, [sp, #44]	; 0x2c
 800905e:	e7b1      	b.n	8008fc4 <_dtoa_r+0x1ac>
 8009060:	9b04      	ldr	r3, [sp, #16]
 8009062:	9a00      	ldr	r2, [sp, #0]
 8009064:	1a9b      	subs	r3, r3, r2
 8009066:	9304      	str	r3, [sp, #16]
 8009068:	4253      	negs	r3, r2
 800906a:	9307      	str	r3, [sp, #28]
 800906c:	2300      	movs	r3, #0
 800906e:	930a      	str	r3, [sp, #40]	; 0x28
 8009070:	e7bf      	b.n	8008ff2 <_dtoa_r+0x1da>
 8009072:	2300      	movs	r3, #0
 8009074:	9308      	str	r3, [sp, #32]
 8009076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009078:	2b00      	cmp	r3, #0
 800907a:	dc55      	bgt.n	8009128 <_dtoa_r+0x310>
 800907c:	2301      	movs	r3, #1
 800907e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009082:	461a      	mov	r2, r3
 8009084:	9209      	str	r2, [sp, #36]	; 0x24
 8009086:	e00c      	b.n	80090a2 <_dtoa_r+0x28a>
 8009088:	2301      	movs	r3, #1
 800908a:	e7f3      	b.n	8009074 <_dtoa_r+0x25c>
 800908c:	2300      	movs	r3, #0
 800908e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009090:	9308      	str	r3, [sp, #32]
 8009092:	9b00      	ldr	r3, [sp, #0]
 8009094:	4413      	add	r3, r2
 8009096:	9302      	str	r3, [sp, #8]
 8009098:	3301      	adds	r3, #1
 800909a:	2b01      	cmp	r3, #1
 800909c:	9303      	str	r3, [sp, #12]
 800909e:	bfb8      	it	lt
 80090a0:	2301      	movlt	r3, #1
 80090a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80090a4:	2200      	movs	r2, #0
 80090a6:	6042      	str	r2, [r0, #4]
 80090a8:	2204      	movs	r2, #4
 80090aa:	f102 0614 	add.w	r6, r2, #20
 80090ae:	429e      	cmp	r6, r3
 80090b0:	6841      	ldr	r1, [r0, #4]
 80090b2:	d93d      	bls.n	8009130 <_dtoa_r+0x318>
 80090b4:	4620      	mov	r0, r4
 80090b6:	f000 fcb7 	bl	8009a28 <_Balloc>
 80090ba:	9001      	str	r0, [sp, #4]
 80090bc:	2800      	cmp	r0, #0
 80090be:	d13b      	bne.n	8009138 <_dtoa_r+0x320>
 80090c0:	4b11      	ldr	r3, [pc, #68]	; (8009108 <_dtoa_r+0x2f0>)
 80090c2:	4602      	mov	r2, r0
 80090c4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80090c8:	e6c0      	b.n	8008e4c <_dtoa_r+0x34>
 80090ca:	2301      	movs	r3, #1
 80090cc:	e7df      	b.n	800908e <_dtoa_r+0x276>
 80090ce:	bf00      	nop
 80090d0:	636f4361 	.word	0x636f4361
 80090d4:	3fd287a7 	.word	0x3fd287a7
 80090d8:	8b60c8b3 	.word	0x8b60c8b3
 80090dc:	3fc68a28 	.word	0x3fc68a28
 80090e0:	509f79fb 	.word	0x509f79fb
 80090e4:	3fd34413 	.word	0x3fd34413
 80090e8:	0800bf99 	.word	0x0800bf99
 80090ec:	0800bfb0 	.word	0x0800bfb0
 80090f0:	7ff00000 	.word	0x7ff00000
 80090f4:	0800bf95 	.word	0x0800bf95
 80090f8:	0800bf8c 	.word	0x0800bf8c
 80090fc:	0800bf69 	.word	0x0800bf69
 8009100:	3ff80000 	.word	0x3ff80000
 8009104:	0800c0a0 	.word	0x0800c0a0
 8009108:	0800c00b 	.word	0x0800c00b
 800910c:	2501      	movs	r5, #1
 800910e:	2300      	movs	r3, #0
 8009110:	9306      	str	r3, [sp, #24]
 8009112:	9508      	str	r5, [sp, #32]
 8009114:	f04f 33ff 	mov.w	r3, #4294967295
 8009118:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800911c:	2200      	movs	r2, #0
 800911e:	2312      	movs	r3, #18
 8009120:	e7b0      	b.n	8009084 <_dtoa_r+0x26c>
 8009122:	2301      	movs	r3, #1
 8009124:	9308      	str	r3, [sp, #32]
 8009126:	e7f5      	b.n	8009114 <_dtoa_r+0x2fc>
 8009128:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800912a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800912e:	e7b8      	b.n	80090a2 <_dtoa_r+0x28a>
 8009130:	3101      	adds	r1, #1
 8009132:	6041      	str	r1, [r0, #4]
 8009134:	0052      	lsls	r2, r2, #1
 8009136:	e7b8      	b.n	80090aa <_dtoa_r+0x292>
 8009138:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800913a:	9a01      	ldr	r2, [sp, #4]
 800913c:	601a      	str	r2, [r3, #0]
 800913e:	9b03      	ldr	r3, [sp, #12]
 8009140:	2b0e      	cmp	r3, #14
 8009142:	f200 809d 	bhi.w	8009280 <_dtoa_r+0x468>
 8009146:	2d00      	cmp	r5, #0
 8009148:	f000 809a 	beq.w	8009280 <_dtoa_r+0x468>
 800914c:	9b00      	ldr	r3, [sp, #0]
 800914e:	2b00      	cmp	r3, #0
 8009150:	dd32      	ble.n	80091b8 <_dtoa_r+0x3a0>
 8009152:	4ab7      	ldr	r2, [pc, #732]	; (8009430 <_dtoa_r+0x618>)
 8009154:	f003 030f 	and.w	r3, r3, #15
 8009158:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800915c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009160:	9b00      	ldr	r3, [sp, #0]
 8009162:	05d8      	lsls	r0, r3, #23
 8009164:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009168:	d516      	bpl.n	8009198 <_dtoa_r+0x380>
 800916a:	4bb2      	ldr	r3, [pc, #712]	; (8009434 <_dtoa_r+0x61c>)
 800916c:	ec51 0b19 	vmov	r0, r1, d9
 8009170:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009174:	f7f7 fb8a 	bl	800088c <__aeabi_ddiv>
 8009178:	f007 070f 	and.w	r7, r7, #15
 800917c:	4682      	mov	sl, r0
 800917e:	468b      	mov	fp, r1
 8009180:	2503      	movs	r5, #3
 8009182:	4eac      	ldr	r6, [pc, #688]	; (8009434 <_dtoa_r+0x61c>)
 8009184:	b957      	cbnz	r7, 800919c <_dtoa_r+0x384>
 8009186:	4642      	mov	r2, r8
 8009188:	464b      	mov	r3, r9
 800918a:	4650      	mov	r0, sl
 800918c:	4659      	mov	r1, fp
 800918e:	f7f7 fb7d 	bl	800088c <__aeabi_ddiv>
 8009192:	4682      	mov	sl, r0
 8009194:	468b      	mov	fp, r1
 8009196:	e028      	b.n	80091ea <_dtoa_r+0x3d2>
 8009198:	2502      	movs	r5, #2
 800919a:	e7f2      	b.n	8009182 <_dtoa_r+0x36a>
 800919c:	07f9      	lsls	r1, r7, #31
 800919e:	d508      	bpl.n	80091b2 <_dtoa_r+0x39a>
 80091a0:	4640      	mov	r0, r8
 80091a2:	4649      	mov	r1, r9
 80091a4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80091a8:	f7f7 fa46 	bl	8000638 <__aeabi_dmul>
 80091ac:	3501      	adds	r5, #1
 80091ae:	4680      	mov	r8, r0
 80091b0:	4689      	mov	r9, r1
 80091b2:	107f      	asrs	r7, r7, #1
 80091b4:	3608      	adds	r6, #8
 80091b6:	e7e5      	b.n	8009184 <_dtoa_r+0x36c>
 80091b8:	f000 809b 	beq.w	80092f2 <_dtoa_r+0x4da>
 80091bc:	9b00      	ldr	r3, [sp, #0]
 80091be:	4f9d      	ldr	r7, [pc, #628]	; (8009434 <_dtoa_r+0x61c>)
 80091c0:	425e      	negs	r6, r3
 80091c2:	4b9b      	ldr	r3, [pc, #620]	; (8009430 <_dtoa_r+0x618>)
 80091c4:	f006 020f 	and.w	r2, r6, #15
 80091c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80091cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d0:	ec51 0b19 	vmov	r0, r1, d9
 80091d4:	f7f7 fa30 	bl	8000638 <__aeabi_dmul>
 80091d8:	1136      	asrs	r6, r6, #4
 80091da:	4682      	mov	sl, r0
 80091dc:	468b      	mov	fp, r1
 80091de:	2300      	movs	r3, #0
 80091e0:	2502      	movs	r5, #2
 80091e2:	2e00      	cmp	r6, #0
 80091e4:	d17a      	bne.n	80092dc <_dtoa_r+0x4c4>
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d1d3      	bne.n	8009192 <_dtoa_r+0x37a>
 80091ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	f000 8082 	beq.w	80092f6 <_dtoa_r+0x4de>
 80091f2:	4b91      	ldr	r3, [pc, #580]	; (8009438 <_dtoa_r+0x620>)
 80091f4:	2200      	movs	r2, #0
 80091f6:	4650      	mov	r0, sl
 80091f8:	4659      	mov	r1, fp
 80091fa:	f7f7 fc8f 	bl	8000b1c <__aeabi_dcmplt>
 80091fe:	2800      	cmp	r0, #0
 8009200:	d079      	beq.n	80092f6 <_dtoa_r+0x4de>
 8009202:	9b03      	ldr	r3, [sp, #12]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d076      	beq.n	80092f6 <_dtoa_r+0x4de>
 8009208:	9b02      	ldr	r3, [sp, #8]
 800920a:	2b00      	cmp	r3, #0
 800920c:	dd36      	ble.n	800927c <_dtoa_r+0x464>
 800920e:	9b00      	ldr	r3, [sp, #0]
 8009210:	4650      	mov	r0, sl
 8009212:	4659      	mov	r1, fp
 8009214:	1e5f      	subs	r7, r3, #1
 8009216:	2200      	movs	r2, #0
 8009218:	4b88      	ldr	r3, [pc, #544]	; (800943c <_dtoa_r+0x624>)
 800921a:	f7f7 fa0d 	bl	8000638 <__aeabi_dmul>
 800921e:	9e02      	ldr	r6, [sp, #8]
 8009220:	4682      	mov	sl, r0
 8009222:	468b      	mov	fp, r1
 8009224:	3501      	adds	r5, #1
 8009226:	4628      	mov	r0, r5
 8009228:	f7f7 f99c 	bl	8000564 <__aeabi_i2d>
 800922c:	4652      	mov	r2, sl
 800922e:	465b      	mov	r3, fp
 8009230:	f7f7 fa02 	bl	8000638 <__aeabi_dmul>
 8009234:	4b82      	ldr	r3, [pc, #520]	; (8009440 <_dtoa_r+0x628>)
 8009236:	2200      	movs	r2, #0
 8009238:	f7f7 f848 	bl	80002cc <__adddf3>
 800923c:	46d0      	mov	r8, sl
 800923e:	46d9      	mov	r9, fp
 8009240:	4682      	mov	sl, r0
 8009242:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009246:	2e00      	cmp	r6, #0
 8009248:	d158      	bne.n	80092fc <_dtoa_r+0x4e4>
 800924a:	4b7e      	ldr	r3, [pc, #504]	; (8009444 <_dtoa_r+0x62c>)
 800924c:	2200      	movs	r2, #0
 800924e:	4640      	mov	r0, r8
 8009250:	4649      	mov	r1, r9
 8009252:	f7f7 f839 	bl	80002c8 <__aeabi_dsub>
 8009256:	4652      	mov	r2, sl
 8009258:	465b      	mov	r3, fp
 800925a:	4680      	mov	r8, r0
 800925c:	4689      	mov	r9, r1
 800925e:	f7f7 fc7b 	bl	8000b58 <__aeabi_dcmpgt>
 8009262:	2800      	cmp	r0, #0
 8009264:	f040 8295 	bne.w	8009792 <_dtoa_r+0x97a>
 8009268:	4652      	mov	r2, sl
 800926a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800926e:	4640      	mov	r0, r8
 8009270:	4649      	mov	r1, r9
 8009272:	f7f7 fc53 	bl	8000b1c <__aeabi_dcmplt>
 8009276:	2800      	cmp	r0, #0
 8009278:	f040 8289 	bne.w	800978e <_dtoa_r+0x976>
 800927c:	ec5b ab19 	vmov	sl, fp, d9
 8009280:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009282:	2b00      	cmp	r3, #0
 8009284:	f2c0 8148 	blt.w	8009518 <_dtoa_r+0x700>
 8009288:	9a00      	ldr	r2, [sp, #0]
 800928a:	2a0e      	cmp	r2, #14
 800928c:	f300 8144 	bgt.w	8009518 <_dtoa_r+0x700>
 8009290:	4b67      	ldr	r3, [pc, #412]	; (8009430 <_dtoa_r+0x618>)
 8009292:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009296:	e9d3 8900 	ldrd	r8, r9, [r3]
 800929a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800929c:	2b00      	cmp	r3, #0
 800929e:	f280 80d5 	bge.w	800944c <_dtoa_r+0x634>
 80092a2:	9b03      	ldr	r3, [sp, #12]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	f300 80d1 	bgt.w	800944c <_dtoa_r+0x634>
 80092aa:	f040 826f 	bne.w	800978c <_dtoa_r+0x974>
 80092ae:	4b65      	ldr	r3, [pc, #404]	; (8009444 <_dtoa_r+0x62c>)
 80092b0:	2200      	movs	r2, #0
 80092b2:	4640      	mov	r0, r8
 80092b4:	4649      	mov	r1, r9
 80092b6:	f7f7 f9bf 	bl	8000638 <__aeabi_dmul>
 80092ba:	4652      	mov	r2, sl
 80092bc:	465b      	mov	r3, fp
 80092be:	f7f7 fc41 	bl	8000b44 <__aeabi_dcmpge>
 80092c2:	9e03      	ldr	r6, [sp, #12]
 80092c4:	4637      	mov	r7, r6
 80092c6:	2800      	cmp	r0, #0
 80092c8:	f040 8245 	bne.w	8009756 <_dtoa_r+0x93e>
 80092cc:	9d01      	ldr	r5, [sp, #4]
 80092ce:	2331      	movs	r3, #49	; 0x31
 80092d0:	f805 3b01 	strb.w	r3, [r5], #1
 80092d4:	9b00      	ldr	r3, [sp, #0]
 80092d6:	3301      	adds	r3, #1
 80092d8:	9300      	str	r3, [sp, #0]
 80092da:	e240      	b.n	800975e <_dtoa_r+0x946>
 80092dc:	07f2      	lsls	r2, r6, #31
 80092de:	d505      	bpl.n	80092ec <_dtoa_r+0x4d4>
 80092e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092e4:	f7f7 f9a8 	bl	8000638 <__aeabi_dmul>
 80092e8:	3501      	adds	r5, #1
 80092ea:	2301      	movs	r3, #1
 80092ec:	1076      	asrs	r6, r6, #1
 80092ee:	3708      	adds	r7, #8
 80092f0:	e777      	b.n	80091e2 <_dtoa_r+0x3ca>
 80092f2:	2502      	movs	r5, #2
 80092f4:	e779      	b.n	80091ea <_dtoa_r+0x3d2>
 80092f6:	9f00      	ldr	r7, [sp, #0]
 80092f8:	9e03      	ldr	r6, [sp, #12]
 80092fa:	e794      	b.n	8009226 <_dtoa_r+0x40e>
 80092fc:	9901      	ldr	r1, [sp, #4]
 80092fe:	4b4c      	ldr	r3, [pc, #304]	; (8009430 <_dtoa_r+0x618>)
 8009300:	4431      	add	r1, r6
 8009302:	910d      	str	r1, [sp, #52]	; 0x34
 8009304:	9908      	ldr	r1, [sp, #32]
 8009306:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800930a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800930e:	2900      	cmp	r1, #0
 8009310:	d043      	beq.n	800939a <_dtoa_r+0x582>
 8009312:	494d      	ldr	r1, [pc, #308]	; (8009448 <_dtoa_r+0x630>)
 8009314:	2000      	movs	r0, #0
 8009316:	f7f7 fab9 	bl	800088c <__aeabi_ddiv>
 800931a:	4652      	mov	r2, sl
 800931c:	465b      	mov	r3, fp
 800931e:	f7f6 ffd3 	bl	80002c8 <__aeabi_dsub>
 8009322:	9d01      	ldr	r5, [sp, #4]
 8009324:	4682      	mov	sl, r0
 8009326:	468b      	mov	fp, r1
 8009328:	4649      	mov	r1, r9
 800932a:	4640      	mov	r0, r8
 800932c:	f7f7 fc34 	bl	8000b98 <__aeabi_d2iz>
 8009330:	4606      	mov	r6, r0
 8009332:	f7f7 f917 	bl	8000564 <__aeabi_i2d>
 8009336:	4602      	mov	r2, r0
 8009338:	460b      	mov	r3, r1
 800933a:	4640      	mov	r0, r8
 800933c:	4649      	mov	r1, r9
 800933e:	f7f6 ffc3 	bl	80002c8 <__aeabi_dsub>
 8009342:	3630      	adds	r6, #48	; 0x30
 8009344:	f805 6b01 	strb.w	r6, [r5], #1
 8009348:	4652      	mov	r2, sl
 800934a:	465b      	mov	r3, fp
 800934c:	4680      	mov	r8, r0
 800934e:	4689      	mov	r9, r1
 8009350:	f7f7 fbe4 	bl	8000b1c <__aeabi_dcmplt>
 8009354:	2800      	cmp	r0, #0
 8009356:	d163      	bne.n	8009420 <_dtoa_r+0x608>
 8009358:	4642      	mov	r2, r8
 800935a:	464b      	mov	r3, r9
 800935c:	4936      	ldr	r1, [pc, #216]	; (8009438 <_dtoa_r+0x620>)
 800935e:	2000      	movs	r0, #0
 8009360:	f7f6 ffb2 	bl	80002c8 <__aeabi_dsub>
 8009364:	4652      	mov	r2, sl
 8009366:	465b      	mov	r3, fp
 8009368:	f7f7 fbd8 	bl	8000b1c <__aeabi_dcmplt>
 800936c:	2800      	cmp	r0, #0
 800936e:	f040 80b5 	bne.w	80094dc <_dtoa_r+0x6c4>
 8009372:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009374:	429d      	cmp	r5, r3
 8009376:	d081      	beq.n	800927c <_dtoa_r+0x464>
 8009378:	4b30      	ldr	r3, [pc, #192]	; (800943c <_dtoa_r+0x624>)
 800937a:	2200      	movs	r2, #0
 800937c:	4650      	mov	r0, sl
 800937e:	4659      	mov	r1, fp
 8009380:	f7f7 f95a 	bl	8000638 <__aeabi_dmul>
 8009384:	4b2d      	ldr	r3, [pc, #180]	; (800943c <_dtoa_r+0x624>)
 8009386:	4682      	mov	sl, r0
 8009388:	468b      	mov	fp, r1
 800938a:	4640      	mov	r0, r8
 800938c:	4649      	mov	r1, r9
 800938e:	2200      	movs	r2, #0
 8009390:	f7f7 f952 	bl	8000638 <__aeabi_dmul>
 8009394:	4680      	mov	r8, r0
 8009396:	4689      	mov	r9, r1
 8009398:	e7c6      	b.n	8009328 <_dtoa_r+0x510>
 800939a:	4650      	mov	r0, sl
 800939c:	4659      	mov	r1, fp
 800939e:	f7f7 f94b 	bl	8000638 <__aeabi_dmul>
 80093a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093a4:	9d01      	ldr	r5, [sp, #4]
 80093a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80093a8:	4682      	mov	sl, r0
 80093aa:	468b      	mov	fp, r1
 80093ac:	4649      	mov	r1, r9
 80093ae:	4640      	mov	r0, r8
 80093b0:	f7f7 fbf2 	bl	8000b98 <__aeabi_d2iz>
 80093b4:	4606      	mov	r6, r0
 80093b6:	f7f7 f8d5 	bl	8000564 <__aeabi_i2d>
 80093ba:	3630      	adds	r6, #48	; 0x30
 80093bc:	4602      	mov	r2, r0
 80093be:	460b      	mov	r3, r1
 80093c0:	4640      	mov	r0, r8
 80093c2:	4649      	mov	r1, r9
 80093c4:	f7f6 ff80 	bl	80002c8 <__aeabi_dsub>
 80093c8:	f805 6b01 	strb.w	r6, [r5], #1
 80093cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093ce:	429d      	cmp	r5, r3
 80093d0:	4680      	mov	r8, r0
 80093d2:	4689      	mov	r9, r1
 80093d4:	f04f 0200 	mov.w	r2, #0
 80093d8:	d124      	bne.n	8009424 <_dtoa_r+0x60c>
 80093da:	4b1b      	ldr	r3, [pc, #108]	; (8009448 <_dtoa_r+0x630>)
 80093dc:	4650      	mov	r0, sl
 80093de:	4659      	mov	r1, fp
 80093e0:	f7f6 ff74 	bl	80002cc <__adddf3>
 80093e4:	4602      	mov	r2, r0
 80093e6:	460b      	mov	r3, r1
 80093e8:	4640      	mov	r0, r8
 80093ea:	4649      	mov	r1, r9
 80093ec:	f7f7 fbb4 	bl	8000b58 <__aeabi_dcmpgt>
 80093f0:	2800      	cmp	r0, #0
 80093f2:	d173      	bne.n	80094dc <_dtoa_r+0x6c4>
 80093f4:	4652      	mov	r2, sl
 80093f6:	465b      	mov	r3, fp
 80093f8:	4913      	ldr	r1, [pc, #76]	; (8009448 <_dtoa_r+0x630>)
 80093fa:	2000      	movs	r0, #0
 80093fc:	f7f6 ff64 	bl	80002c8 <__aeabi_dsub>
 8009400:	4602      	mov	r2, r0
 8009402:	460b      	mov	r3, r1
 8009404:	4640      	mov	r0, r8
 8009406:	4649      	mov	r1, r9
 8009408:	f7f7 fb88 	bl	8000b1c <__aeabi_dcmplt>
 800940c:	2800      	cmp	r0, #0
 800940e:	f43f af35 	beq.w	800927c <_dtoa_r+0x464>
 8009412:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009414:	1e6b      	subs	r3, r5, #1
 8009416:	930f      	str	r3, [sp, #60]	; 0x3c
 8009418:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800941c:	2b30      	cmp	r3, #48	; 0x30
 800941e:	d0f8      	beq.n	8009412 <_dtoa_r+0x5fa>
 8009420:	9700      	str	r7, [sp, #0]
 8009422:	e049      	b.n	80094b8 <_dtoa_r+0x6a0>
 8009424:	4b05      	ldr	r3, [pc, #20]	; (800943c <_dtoa_r+0x624>)
 8009426:	f7f7 f907 	bl	8000638 <__aeabi_dmul>
 800942a:	4680      	mov	r8, r0
 800942c:	4689      	mov	r9, r1
 800942e:	e7bd      	b.n	80093ac <_dtoa_r+0x594>
 8009430:	0800c0a0 	.word	0x0800c0a0
 8009434:	0800c078 	.word	0x0800c078
 8009438:	3ff00000 	.word	0x3ff00000
 800943c:	40240000 	.word	0x40240000
 8009440:	401c0000 	.word	0x401c0000
 8009444:	40140000 	.word	0x40140000
 8009448:	3fe00000 	.word	0x3fe00000
 800944c:	9d01      	ldr	r5, [sp, #4]
 800944e:	4656      	mov	r6, sl
 8009450:	465f      	mov	r7, fp
 8009452:	4642      	mov	r2, r8
 8009454:	464b      	mov	r3, r9
 8009456:	4630      	mov	r0, r6
 8009458:	4639      	mov	r1, r7
 800945a:	f7f7 fa17 	bl	800088c <__aeabi_ddiv>
 800945e:	f7f7 fb9b 	bl	8000b98 <__aeabi_d2iz>
 8009462:	4682      	mov	sl, r0
 8009464:	f7f7 f87e 	bl	8000564 <__aeabi_i2d>
 8009468:	4642      	mov	r2, r8
 800946a:	464b      	mov	r3, r9
 800946c:	f7f7 f8e4 	bl	8000638 <__aeabi_dmul>
 8009470:	4602      	mov	r2, r0
 8009472:	460b      	mov	r3, r1
 8009474:	4630      	mov	r0, r6
 8009476:	4639      	mov	r1, r7
 8009478:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800947c:	f7f6 ff24 	bl	80002c8 <__aeabi_dsub>
 8009480:	f805 6b01 	strb.w	r6, [r5], #1
 8009484:	9e01      	ldr	r6, [sp, #4]
 8009486:	9f03      	ldr	r7, [sp, #12]
 8009488:	1bae      	subs	r6, r5, r6
 800948a:	42b7      	cmp	r7, r6
 800948c:	4602      	mov	r2, r0
 800948e:	460b      	mov	r3, r1
 8009490:	d135      	bne.n	80094fe <_dtoa_r+0x6e6>
 8009492:	f7f6 ff1b 	bl	80002cc <__adddf3>
 8009496:	4642      	mov	r2, r8
 8009498:	464b      	mov	r3, r9
 800949a:	4606      	mov	r6, r0
 800949c:	460f      	mov	r7, r1
 800949e:	f7f7 fb5b 	bl	8000b58 <__aeabi_dcmpgt>
 80094a2:	b9d0      	cbnz	r0, 80094da <_dtoa_r+0x6c2>
 80094a4:	4642      	mov	r2, r8
 80094a6:	464b      	mov	r3, r9
 80094a8:	4630      	mov	r0, r6
 80094aa:	4639      	mov	r1, r7
 80094ac:	f7f7 fb2c 	bl	8000b08 <__aeabi_dcmpeq>
 80094b0:	b110      	cbz	r0, 80094b8 <_dtoa_r+0x6a0>
 80094b2:	f01a 0f01 	tst.w	sl, #1
 80094b6:	d110      	bne.n	80094da <_dtoa_r+0x6c2>
 80094b8:	4620      	mov	r0, r4
 80094ba:	ee18 1a10 	vmov	r1, s16
 80094be:	f000 faf3 	bl	8009aa8 <_Bfree>
 80094c2:	2300      	movs	r3, #0
 80094c4:	9800      	ldr	r0, [sp, #0]
 80094c6:	702b      	strb	r3, [r5, #0]
 80094c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80094ca:	3001      	adds	r0, #1
 80094cc:	6018      	str	r0, [r3, #0]
 80094ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	f43f acf1 	beq.w	8008eb8 <_dtoa_r+0xa0>
 80094d6:	601d      	str	r5, [r3, #0]
 80094d8:	e4ee      	b.n	8008eb8 <_dtoa_r+0xa0>
 80094da:	9f00      	ldr	r7, [sp, #0]
 80094dc:	462b      	mov	r3, r5
 80094de:	461d      	mov	r5, r3
 80094e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80094e4:	2a39      	cmp	r2, #57	; 0x39
 80094e6:	d106      	bne.n	80094f6 <_dtoa_r+0x6de>
 80094e8:	9a01      	ldr	r2, [sp, #4]
 80094ea:	429a      	cmp	r2, r3
 80094ec:	d1f7      	bne.n	80094de <_dtoa_r+0x6c6>
 80094ee:	9901      	ldr	r1, [sp, #4]
 80094f0:	2230      	movs	r2, #48	; 0x30
 80094f2:	3701      	adds	r7, #1
 80094f4:	700a      	strb	r2, [r1, #0]
 80094f6:	781a      	ldrb	r2, [r3, #0]
 80094f8:	3201      	adds	r2, #1
 80094fa:	701a      	strb	r2, [r3, #0]
 80094fc:	e790      	b.n	8009420 <_dtoa_r+0x608>
 80094fe:	4ba6      	ldr	r3, [pc, #664]	; (8009798 <_dtoa_r+0x980>)
 8009500:	2200      	movs	r2, #0
 8009502:	f7f7 f899 	bl	8000638 <__aeabi_dmul>
 8009506:	2200      	movs	r2, #0
 8009508:	2300      	movs	r3, #0
 800950a:	4606      	mov	r6, r0
 800950c:	460f      	mov	r7, r1
 800950e:	f7f7 fafb 	bl	8000b08 <__aeabi_dcmpeq>
 8009512:	2800      	cmp	r0, #0
 8009514:	d09d      	beq.n	8009452 <_dtoa_r+0x63a>
 8009516:	e7cf      	b.n	80094b8 <_dtoa_r+0x6a0>
 8009518:	9a08      	ldr	r2, [sp, #32]
 800951a:	2a00      	cmp	r2, #0
 800951c:	f000 80d7 	beq.w	80096ce <_dtoa_r+0x8b6>
 8009520:	9a06      	ldr	r2, [sp, #24]
 8009522:	2a01      	cmp	r2, #1
 8009524:	f300 80ba 	bgt.w	800969c <_dtoa_r+0x884>
 8009528:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800952a:	2a00      	cmp	r2, #0
 800952c:	f000 80b2 	beq.w	8009694 <_dtoa_r+0x87c>
 8009530:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009534:	9e07      	ldr	r6, [sp, #28]
 8009536:	9d04      	ldr	r5, [sp, #16]
 8009538:	9a04      	ldr	r2, [sp, #16]
 800953a:	441a      	add	r2, r3
 800953c:	9204      	str	r2, [sp, #16]
 800953e:	9a05      	ldr	r2, [sp, #20]
 8009540:	2101      	movs	r1, #1
 8009542:	441a      	add	r2, r3
 8009544:	4620      	mov	r0, r4
 8009546:	9205      	str	r2, [sp, #20]
 8009548:	f000 fb66 	bl	8009c18 <__i2b>
 800954c:	4607      	mov	r7, r0
 800954e:	2d00      	cmp	r5, #0
 8009550:	dd0c      	ble.n	800956c <_dtoa_r+0x754>
 8009552:	9b05      	ldr	r3, [sp, #20]
 8009554:	2b00      	cmp	r3, #0
 8009556:	dd09      	ble.n	800956c <_dtoa_r+0x754>
 8009558:	42ab      	cmp	r3, r5
 800955a:	9a04      	ldr	r2, [sp, #16]
 800955c:	bfa8      	it	ge
 800955e:	462b      	movge	r3, r5
 8009560:	1ad2      	subs	r2, r2, r3
 8009562:	9204      	str	r2, [sp, #16]
 8009564:	9a05      	ldr	r2, [sp, #20]
 8009566:	1aed      	subs	r5, r5, r3
 8009568:	1ad3      	subs	r3, r2, r3
 800956a:	9305      	str	r3, [sp, #20]
 800956c:	9b07      	ldr	r3, [sp, #28]
 800956e:	b31b      	cbz	r3, 80095b8 <_dtoa_r+0x7a0>
 8009570:	9b08      	ldr	r3, [sp, #32]
 8009572:	2b00      	cmp	r3, #0
 8009574:	f000 80af 	beq.w	80096d6 <_dtoa_r+0x8be>
 8009578:	2e00      	cmp	r6, #0
 800957a:	dd13      	ble.n	80095a4 <_dtoa_r+0x78c>
 800957c:	4639      	mov	r1, r7
 800957e:	4632      	mov	r2, r6
 8009580:	4620      	mov	r0, r4
 8009582:	f000 fc09 	bl	8009d98 <__pow5mult>
 8009586:	ee18 2a10 	vmov	r2, s16
 800958a:	4601      	mov	r1, r0
 800958c:	4607      	mov	r7, r0
 800958e:	4620      	mov	r0, r4
 8009590:	f000 fb58 	bl	8009c44 <__multiply>
 8009594:	ee18 1a10 	vmov	r1, s16
 8009598:	4680      	mov	r8, r0
 800959a:	4620      	mov	r0, r4
 800959c:	f000 fa84 	bl	8009aa8 <_Bfree>
 80095a0:	ee08 8a10 	vmov	s16, r8
 80095a4:	9b07      	ldr	r3, [sp, #28]
 80095a6:	1b9a      	subs	r2, r3, r6
 80095a8:	d006      	beq.n	80095b8 <_dtoa_r+0x7a0>
 80095aa:	ee18 1a10 	vmov	r1, s16
 80095ae:	4620      	mov	r0, r4
 80095b0:	f000 fbf2 	bl	8009d98 <__pow5mult>
 80095b4:	ee08 0a10 	vmov	s16, r0
 80095b8:	2101      	movs	r1, #1
 80095ba:	4620      	mov	r0, r4
 80095bc:	f000 fb2c 	bl	8009c18 <__i2b>
 80095c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	4606      	mov	r6, r0
 80095c6:	f340 8088 	ble.w	80096da <_dtoa_r+0x8c2>
 80095ca:	461a      	mov	r2, r3
 80095cc:	4601      	mov	r1, r0
 80095ce:	4620      	mov	r0, r4
 80095d0:	f000 fbe2 	bl	8009d98 <__pow5mult>
 80095d4:	9b06      	ldr	r3, [sp, #24]
 80095d6:	2b01      	cmp	r3, #1
 80095d8:	4606      	mov	r6, r0
 80095da:	f340 8081 	ble.w	80096e0 <_dtoa_r+0x8c8>
 80095de:	f04f 0800 	mov.w	r8, #0
 80095e2:	6933      	ldr	r3, [r6, #16]
 80095e4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80095e8:	6918      	ldr	r0, [r3, #16]
 80095ea:	f000 fac5 	bl	8009b78 <__hi0bits>
 80095ee:	f1c0 0020 	rsb	r0, r0, #32
 80095f2:	9b05      	ldr	r3, [sp, #20]
 80095f4:	4418      	add	r0, r3
 80095f6:	f010 001f 	ands.w	r0, r0, #31
 80095fa:	f000 8092 	beq.w	8009722 <_dtoa_r+0x90a>
 80095fe:	f1c0 0320 	rsb	r3, r0, #32
 8009602:	2b04      	cmp	r3, #4
 8009604:	f340 808a 	ble.w	800971c <_dtoa_r+0x904>
 8009608:	f1c0 001c 	rsb	r0, r0, #28
 800960c:	9b04      	ldr	r3, [sp, #16]
 800960e:	4403      	add	r3, r0
 8009610:	9304      	str	r3, [sp, #16]
 8009612:	9b05      	ldr	r3, [sp, #20]
 8009614:	4403      	add	r3, r0
 8009616:	4405      	add	r5, r0
 8009618:	9305      	str	r3, [sp, #20]
 800961a:	9b04      	ldr	r3, [sp, #16]
 800961c:	2b00      	cmp	r3, #0
 800961e:	dd07      	ble.n	8009630 <_dtoa_r+0x818>
 8009620:	ee18 1a10 	vmov	r1, s16
 8009624:	461a      	mov	r2, r3
 8009626:	4620      	mov	r0, r4
 8009628:	f000 fc10 	bl	8009e4c <__lshift>
 800962c:	ee08 0a10 	vmov	s16, r0
 8009630:	9b05      	ldr	r3, [sp, #20]
 8009632:	2b00      	cmp	r3, #0
 8009634:	dd05      	ble.n	8009642 <_dtoa_r+0x82a>
 8009636:	4631      	mov	r1, r6
 8009638:	461a      	mov	r2, r3
 800963a:	4620      	mov	r0, r4
 800963c:	f000 fc06 	bl	8009e4c <__lshift>
 8009640:	4606      	mov	r6, r0
 8009642:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009644:	2b00      	cmp	r3, #0
 8009646:	d06e      	beq.n	8009726 <_dtoa_r+0x90e>
 8009648:	ee18 0a10 	vmov	r0, s16
 800964c:	4631      	mov	r1, r6
 800964e:	f000 fc6d 	bl	8009f2c <__mcmp>
 8009652:	2800      	cmp	r0, #0
 8009654:	da67      	bge.n	8009726 <_dtoa_r+0x90e>
 8009656:	9b00      	ldr	r3, [sp, #0]
 8009658:	3b01      	subs	r3, #1
 800965a:	ee18 1a10 	vmov	r1, s16
 800965e:	9300      	str	r3, [sp, #0]
 8009660:	220a      	movs	r2, #10
 8009662:	2300      	movs	r3, #0
 8009664:	4620      	mov	r0, r4
 8009666:	f000 fa41 	bl	8009aec <__multadd>
 800966a:	9b08      	ldr	r3, [sp, #32]
 800966c:	ee08 0a10 	vmov	s16, r0
 8009670:	2b00      	cmp	r3, #0
 8009672:	f000 81b1 	beq.w	80099d8 <_dtoa_r+0xbc0>
 8009676:	2300      	movs	r3, #0
 8009678:	4639      	mov	r1, r7
 800967a:	220a      	movs	r2, #10
 800967c:	4620      	mov	r0, r4
 800967e:	f000 fa35 	bl	8009aec <__multadd>
 8009682:	9b02      	ldr	r3, [sp, #8]
 8009684:	2b00      	cmp	r3, #0
 8009686:	4607      	mov	r7, r0
 8009688:	f300 808e 	bgt.w	80097a8 <_dtoa_r+0x990>
 800968c:	9b06      	ldr	r3, [sp, #24]
 800968e:	2b02      	cmp	r3, #2
 8009690:	dc51      	bgt.n	8009736 <_dtoa_r+0x91e>
 8009692:	e089      	b.n	80097a8 <_dtoa_r+0x990>
 8009694:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009696:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800969a:	e74b      	b.n	8009534 <_dtoa_r+0x71c>
 800969c:	9b03      	ldr	r3, [sp, #12]
 800969e:	1e5e      	subs	r6, r3, #1
 80096a0:	9b07      	ldr	r3, [sp, #28]
 80096a2:	42b3      	cmp	r3, r6
 80096a4:	bfbf      	itttt	lt
 80096a6:	9b07      	ldrlt	r3, [sp, #28]
 80096a8:	9607      	strlt	r6, [sp, #28]
 80096aa:	1af2      	sublt	r2, r6, r3
 80096ac:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80096ae:	bfb6      	itet	lt
 80096b0:	189b      	addlt	r3, r3, r2
 80096b2:	1b9e      	subge	r6, r3, r6
 80096b4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80096b6:	9b03      	ldr	r3, [sp, #12]
 80096b8:	bfb8      	it	lt
 80096ba:	2600      	movlt	r6, #0
 80096bc:	2b00      	cmp	r3, #0
 80096be:	bfb7      	itett	lt
 80096c0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80096c4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80096c8:	1a9d      	sublt	r5, r3, r2
 80096ca:	2300      	movlt	r3, #0
 80096cc:	e734      	b.n	8009538 <_dtoa_r+0x720>
 80096ce:	9e07      	ldr	r6, [sp, #28]
 80096d0:	9d04      	ldr	r5, [sp, #16]
 80096d2:	9f08      	ldr	r7, [sp, #32]
 80096d4:	e73b      	b.n	800954e <_dtoa_r+0x736>
 80096d6:	9a07      	ldr	r2, [sp, #28]
 80096d8:	e767      	b.n	80095aa <_dtoa_r+0x792>
 80096da:	9b06      	ldr	r3, [sp, #24]
 80096dc:	2b01      	cmp	r3, #1
 80096de:	dc18      	bgt.n	8009712 <_dtoa_r+0x8fa>
 80096e0:	f1ba 0f00 	cmp.w	sl, #0
 80096e4:	d115      	bne.n	8009712 <_dtoa_r+0x8fa>
 80096e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80096ea:	b993      	cbnz	r3, 8009712 <_dtoa_r+0x8fa>
 80096ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80096f0:	0d1b      	lsrs	r3, r3, #20
 80096f2:	051b      	lsls	r3, r3, #20
 80096f4:	b183      	cbz	r3, 8009718 <_dtoa_r+0x900>
 80096f6:	9b04      	ldr	r3, [sp, #16]
 80096f8:	3301      	adds	r3, #1
 80096fa:	9304      	str	r3, [sp, #16]
 80096fc:	9b05      	ldr	r3, [sp, #20]
 80096fe:	3301      	adds	r3, #1
 8009700:	9305      	str	r3, [sp, #20]
 8009702:	f04f 0801 	mov.w	r8, #1
 8009706:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009708:	2b00      	cmp	r3, #0
 800970a:	f47f af6a 	bne.w	80095e2 <_dtoa_r+0x7ca>
 800970e:	2001      	movs	r0, #1
 8009710:	e76f      	b.n	80095f2 <_dtoa_r+0x7da>
 8009712:	f04f 0800 	mov.w	r8, #0
 8009716:	e7f6      	b.n	8009706 <_dtoa_r+0x8ee>
 8009718:	4698      	mov	r8, r3
 800971a:	e7f4      	b.n	8009706 <_dtoa_r+0x8ee>
 800971c:	f43f af7d 	beq.w	800961a <_dtoa_r+0x802>
 8009720:	4618      	mov	r0, r3
 8009722:	301c      	adds	r0, #28
 8009724:	e772      	b.n	800960c <_dtoa_r+0x7f4>
 8009726:	9b03      	ldr	r3, [sp, #12]
 8009728:	2b00      	cmp	r3, #0
 800972a:	dc37      	bgt.n	800979c <_dtoa_r+0x984>
 800972c:	9b06      	ldr	r3, [sp, #24]
 800972e:	2b02      	cmp	r3, #2
 8009730:	dd34      	ble.n	800979c <_dtoa_r+0x984>
 8009732:	9b03      	ldr	r3, [sp, #12]
 8009734:	9302      	str	r3, [sp, #8]
 8009736:	9b02      	ldr	r3, [sp, #8]
 8009738:	b96b      	cbnz	r3, 8009756 <_dtoa_r+0x93e>
 800973a:	4631      	mov	r1, r6
 800973c:	2205      	movs	r2, #5
 800973e:	4620      	mov	r0, r4
 8009740:	f000 f9d4 	bl	8009aec <__multadd>
 8009744:	4601      	mov	r1, r0
 8009746:	4606      	mov	r6, r0
 8009748:	ee18 0a10 	vmov	r0, s16
 800974c:	f000 fbee 	bl	8009f2c <__mcmp>
 8009750:	2800      	cmp	r0, #0
 8009752:	f73f adbb 	bgt.w	80092cc <_dtoa_r+0x4b4>
 8009756:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009758:	9d01      	ldr	r5, [sp, #4]
 800975a:	43db      	mvns	r3, r3
 800975c:	9300      	str	r3, [sp, #0]
 800975e:	f04f 0800 	mov.w	r8, #0
 8009762:	4631      	mov	r1, r6
 8009764:	4620      	mov	r0, r4
 8009766:	f000 f99f 	bl	8009aa8 <_Bfree>
 800976a:	2f00      	cmp	r7, #0
 800976c:	f43f aea4 	beq.w	80094b8 <_dtoa_r+0x6a0>
 8009770:	f1b8 0f00 	cmp.w	r8, #0
 8009774:	d005      	beq.n	8009782 <_dtoa_r+0x96a>
 8009776:	45b8      	cmp	r8, r7
 8009778:	d003      	beq.n	8009782 <_dtoa_r+0x96a>
 800977a:	4641      	mov	r1, r8
 800977c:	4620      	mov	r0, r4
 800977e:	f000 f993 	bl	8009aa8 <_Bfree>
 8009782:	4639      	mov	r1, r7
 8009784:	4620      	mov	r0, r4
 8009786:	f000 f98f 	bl	8009aa8 <_Bfree>
 800978a:	e695      	b.n	80094b8 <_dtoa_r+0x6a0>
 800978c:	2600      	movs	r6, #0
 800978e:	4637      	mov	r7, r6
 8009790:	e7e1      	b.n	8009756 <_dtoa_r+0x93e>
 8009792:	9700      	str	r7, [sp, #0]
 8009794:	4637      	mov	r7, r6
 8009796:	e599      	b.n	80092cc <_dtoa_r+0x4b4>
 8009798:	40240000 	.word	0x40240000
 800979c:	9b08      	ldr	r3, [sp, #32]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	f000 80ca 	beq.w	8009938 <_dtoa_r+0xb20>
 80097a4:	9b03      	ldr	r3, [sp, #12]
 80097a6:	9302      	str	r3, [sp, #8]
 80097a8:	2d00      	cmp	r5, #0
 80097aa:	dd05      	ble.n	80097b8 <_dtoa_r+0x9a0>
 80097ac:	4639      	mov	r1, r7
 80097ae:	462a      	mov	r2, r5
 80097b0:	4620      	mov	r0, r4
 80097b2:	f000 fb4b 	bl	8009e4c <__lshift>
 80097b6:	4607      	mov	r7, r0
 80097b8:	f1b8 0f00 	cmp.w	r8, #0
 80097bc:	d05b      	beq.n	8009876 <_dtoa_r+0xa5e>
 80097be:	6879      	ldr	r1, [r7, #4]
 80097c0:	4620      	mov	r0, r4
 80097c2:	f000 f931 	bl	8009a28 <_Balloc>
 80097c6:	4605      	mov	r5, r0
 80097c8:	b928      	cbnz	r0, 80097d6 <_dtoa_r+0x9be>
 80097ca:	4b87      	ldr	r3, [pc, #540]	; (80099e8 <_dtoa_r+0xbd0>)
 80097cc:	4602      	mov	r2, r0
 80097ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 80097d2:	f7ff bb3b 	b.w	8008e4c <_dtoa_r+0x34>
 80097d6:	693a      	ldr	r2, [r7, #16]
 80097d8:	3202      	adds	r2, #2
 80097da:	0092      	lsls	r2, r2, #2
 80097dc:	f107 010c 	add.w	r1, r7, #12
 80097e0:	300c      	adds	r0, #12
 80097e2:	f000 f913 	bl	8009a0c <memcpy>
 80097e6:	2201      	movs	r2, #1
 80097e8:	4629      	mov	r1, r5
 80097ea:	4620      	mov	r0, r4
 80097ec:	f000 fb2e 	bl	8009e4c <__lshift>
 80097f0:	9b01      	ldr	r3, [sp, #4]
 80097f2:	f103 0901 	add.w	r9, r3, #1
 80097f6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80097fa:	4413      	add	r3, r2
 80097fc:	9305      	str	r3, [sp, #20]
 80097fe:	f00a 0301 	and.w	r3, sl, #1
 8009802:	46b8      	mov	r8, r7
 8009804:	9304      	str	r3, [sp, #16]
 8009806:	4607      	mov	r7, r0
 8009808:	4631      	mov	r1, r6
 800980a:	ee18 0a10 	vmov	r0, s16
 800980e:	f7ff fa77 	bl	8008d00 <quorem>
 8009812:	4641      	mov	r1, r8
 8009814:	9002      	str	r0, [sp, #8]
 8009816:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800981a:	ee18 0a10 	vmov	r0, s16
 800981e:	f000 fb85 	bl	8009f2c <__mcmp>
 8009822:	463a      	mov	r2, r7
 8009824:	9003      	str	r0, [sp, #12]
 8009826:	4631      	mov	r1, r6
 8009828:	4620      	mov	r0, r4
 800982a:	f000 fb9b 	bl	8009f64 <__mdiff>
 800982e:	68c2      	ldr	r2, [r0, #12]
 8009830:	f109 3bff 	add.w	fp, r9, #4294967295
 8009834:	4605      	mov	r5, r0
 8009836:	bb02      	cbnz	r2, 800987a <_dtoa_r+0xa62>
 8009838:	4601      	mov	r1, r0
 800983a:	ee18 0a10 	vmov	r0, s16
 800983e:	f000 fb75 	bl	8009f2c <__mcmp>
 8009842:	4602      	mov	r2, r0
 8009844:	4629      	mov	r1, r5
 8009846:	4620      	mov	r0, r4
 8009848:	9207      	str	r2, [sp, #28]
 800984a:	f000 f92d 	bl	8009aa8 <_Bfree>
 800984e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009852:	ea43 0102 	orr.w	r1, r3, r2
 8009856:	9b04      	ldr	r3, [sp, #16]
 8009858:	430b      	orrs	r3, r1
 800985a:	464d      	mov	r5, r9
 800985c:	d10f      	bne.n	800987e <_dtoa_r+0xa66>
 800985e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009862:	d02a      	beq.n	80098ba <_dtoa_r+0xaa2>
 8009864:	9b03      	ldr	r3, [sp, #12]
 8009866:	2b00      	cmp	r3, #0
 8009868:	dd02      	ble.n	8009870 <_dtoa_r+0xa58>
 800986a:	9b02      	ldr	r3, [sp, #8]
 800986c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009870:	f88b a000 	strb.w	sl, [fp]
 8009874:	e775      	b.n	8009762 <_dtoa_r+0x94a>
 8009876:	4638      	mov	r0, r7
 8009878:	e7ba      	b.n	80097f0 <_dtoa_r+0x9d8>
 800987a:	2201      	movs	r2, #1
 800987c:	e7e2      	b.n	8009844 <_dtoa_r+0xa2c>
 800987e:	9b03      	ldr	r3, [sp, #12]
 8009880:	2b00      	cmp	r3, #0
 8009882:	db04      	blt.n	800988e <_dtoa_r+0xa76>
 8009884:	9906      	ldr	r1, [sp, #24]
 8009886:	430b      	orrs	r3, r1
 8009888:	9904      	ldr	r1, [sp, #16]
 800988a:	430b      	orrs	r3, r1
 800988c:	d122      	bne.n	80098d4 <_dtoa_r+0xabc>
 800988e:	2a00      	cmp	r2, #0
 8009890:	ddee      	ble.n	8009870 <_dtoa_r+0xa58>
 8009892:	ee18 1a10 	vmov	r1, s16
 8009896:	2201      	movs	r2, #1
 8009898:	4620      	mov	r0, r4
 800989a:	f000 fad7 	bl	8009e4c <__lshift>
 800989e:	4631      	mov	r1, r6
 80098a0:	ee08 0a10 	vmov	s16, r0
 80098a4:	f000 fb42 	bl	8009f2c <__mcmp>
 80098a8:	2800      	cmp	r0, #0
 80098aa:	dc03      	bgt.n	80098b4 <_dtoa_r+0xa9c>
 80098ac:	d1e0      	bne.n	8009870 <_dtoa_r+0xa58>
 80098ae:	f01a 0f01 	tst.w	sl, #1
 80098b2:	d0dd      	beq.n	8009870 <_dtoa_r+0xa58>
 80098b4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80098b8:	d1d7      	bne.n	800986a <_dtoa_r+0xa52>
 80098ba:	2339      	movs	r3, #57	; 0x39
 80098bc:	f88b 3000 	strb.w	r3, [fp]
 80098c0:	462b      	mov	r3, r5
 80098c2:	461d      	mov	r5, r3
 80098c4:	3b01      	subs	r3, #1
 80098c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80098ca:	2a39      	cmp	r2, #57	; 0x39
 80098cc:	d071      	beq.n	80099b2 <_dtoa_r+0xb9a>
 80098ce:	3201      	adds	r2, #1
 80098d0:	701a      	strb	r2, [r3, #0]
 80098d2:	e746      	b.n	8009762 <_dtoa_r+0x94a>
 80098d4:	2a00      	cmp	r2, #0
 80098d6:	dd07      	ble.n	80098e8 <_dtoa_r+0xad0>
 80098d8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80098dc:	d0ed      	beq.n	80098ba <_dtoa_r+0xaa2>
 80098de:	f10a 0301 	add.w	r3, sl, #1
 80098e2:	f88b 3000 	strb.w	r3, [fp]
 80098e6:	e73c      	b.n	8009762 <_dtoa_r+0x94a>
 80098e8:	9b05      	ldr	r3, [sp, #20]
 80098ea:	f809 ac01 	strb.w	sl, [r9, #-1]
 80098ee:	4599      	cmp	r9, r3
 80098f0:	d047      	beq.n	8009982 <_dtoa_r+0xb6a>
 80098f2:	ee18 1a10 	vmov	r1, s16
 80098f6:	2300      	movs	r3, #0
 80098f8:	220a      	movs	r2, #10
 80098fa:	4620      	mov	r0, r4
 80098fc:	f000 f8f6 	bl	8009aec <__multadd>
 8009900:	45b8      	cmp	r8, r7
 8009902:	ee08 0a10 	vmov	s16, r0
 8009906:	f04f 0300 	mov.w	r3, #0
 800990a:	f04f 020a 	mov.w	r2, #10
 800990e:	4641      	mov	r1, r8
 8009910:	4620      	mov	r0, r4
 8009912:	d106      	bne.n	8009922 <_dtoa_r+0xb0a>
 8009914:	f000 f8ea 	bl	8009aec <__multadd>
 8009918:	4680      	mov	r8, r0
 800991a:	4607      	mov	r7, r0
 800991c:	f109 0901 	add.w	r9, r9, #1
 8009920:	e772      	b.n	8009808 <_dtoa_r+0x9f0>
 8009922:	f000 f8e3 	bl	8009aec <__multadd>
 8009926:	4639      	mov	r1, r7
 8009928:	4680      	mov	r8, r0
 800992a:	2300      	movs	r3, #0
 800992c:	220a      	movs	r2, #10
 800992e:	4620      	mov	r0, r4
 8009930:	f000 f8dc 	bl	8009aec <__multadd>
 8009934:	4607      	mov	r7, r0
 8009936:	e7f1      	b.n	800991c <_dtoa_r+0xb04>
 8009938:	9b03      	ldr	r3, [sp, #12]
 800993a:	9302      	str	r3, [sp, #8]
 800993c:	9d01      	ldr	r5, [sp, #4]
 800993e:	ee18 0a10 	vmov	r0, s16
 8009942:	4631      	mov	r1, r6
 8009944:	f7ff f9dc 	bl	8008d00 <quorem>
 8009948:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800994c:	9b01      	ldr	r3, [sp, #4]
 800994e:	f805 ab01 	strb.w	sl, [r5], #1
 8009952:	1aea      	subs	r2, r5, r3
 8009954:	9b02      	ldr	r3, [sp, #8]
 8009956:	4293      	cmp	r3, r2
 8009958:	dd09      	ble.n	800996e <_dtoa_r+0xb56>
 800995a:	ee18 1a10 	vmov	r1, s16
 800995e:	2300      	movs	r3, #0
 8009960:	220a      	movs	r2, #10
 8009962:	4620      	mov	r0, r4
 8009964:	f000 f8c2 	bl	8009aec <__multadd>
 8009968:	ee08 0a10 	vmov	s16, r0
 800996c:	e7e7      	b.n	800993e <_dtoa_r+0xb26>
 800996e:	9b02      	ldr	r3, [sp, #8]
 8009970:	2b00      	cmp	r3, #0
 8009972:	bfc8      	it	gt
 8009974:	461d      	movgt	r5, r3
 8009976:	9b01      	ldr	r3, [sp, #4]
 8009978:	bfd8      	it	le
 800997a:	2501      	movle	r5, #1
 800997c:	441d      	add	r5, r3
 800997e:	f04f 0800 	mov.w	r8, #0
 8009982:	ee18 1a10 	vmov	r1, s16
 8009986:	2201      	movs	r2, #1
 8009988:	4620      	mov	r0, r4
 800998a:	f000 fa5f 	bl	8009e4c <__lshift>
 800998e:	4631      	mov	r1, r6
 8009990:	ee08 0a10 	vmov	s16, r0
 8009994:	f000 faca 	bl	8009f2c <__mcmp>
 8009998:	2800      	cmp	r0, #0
 800999a:	dc91      	bgt.n	80098c0 <_dtoa_r+0xaa8>
 800999c:	d102      	bne.n	80099a4 <_dtoa_r+0xb8c>
 800999e:	f01a 0f01 	tst.w	sl, #1
 80099a2:	d18d      	bne.n	80098c0 <_dtoa_r+0xaa8>
 80099a4:	462b      	mov	r3, r5
 80099a6:	461d      	mov	r5, r3
 80099a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80099ac:	2a30      	cmp	r2, #48	; 0x30
 80099ae:	d0fa      	beq.n	80099a6 <_dtoa_r+0xb8e>
 80099b0:	e6d7      	b.n	8009762 <_dtoa_r+0x94a>
 80099b2:	9a01      	ldr	r2, [sp, #4]
 80099b4:	429a      	cmp	r2, r3
 80099b6:	d184      	bne.n	80098c2 <_dtoa_r+0xaaa>
 80099b8:	9b00      	ldr	r3, [sp, #0]
 80099ba:	3301      	adds	r3, #1
 80099bc:	9300      	str	r3, [sp, #0]
 80099be:	2331      	movs	r3, #49	; 0x31
 80099c0:	7013      	strb	r3, [r2, #0]
 80099c2:	e6ce      	b.n	8009762 <_dtoa_r+0x94a>
 80099c4:	4b09      	ldr	r3, [pc, #36]	; (80099ec <_dtoa_r+0xbd4>)
 80099c6:	f7ff ba95 	b.w	8008ef4 <_dtoa_r+0xdc>
 80099ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	f47f aa6e 	bne.w	8008eae <_dtoa_r+0x96>
 80099d2:	4b07      	ldr	r3, [pc, #28]	; (80099f0 <_dtoa_r+0xbd8>)
 80099d4:	f7ff ba8e 	b.w	8008ef4 <_dtoa_r+0xdc>
 80099d8:	9b02      	ldr	r3, [sp, #8]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	dcae      	bgt.n	800993c <_dtoa_r+0xb24>
 80099de:	9b06      	ldr	r3, [sp, #24]
 80099e0:	2b02      	cmp	r3, #2
 80099e2:	f73f aea8 	bgt.w	8009736 <_dtoa_r+0x91e>
 80099e6:	e7a9      	b.n	800993c <_dtoa_r+0xb24>
 80099e8:	0800c00b 	.word	0x0800c00b
 80099ec:	0800bf68 	.word	0x0800bf68
 80099f0:	0800bf8c 	.word	0x0800bf8c

080099f4 <_localeconv_r>:
 80099f4:	4800      	ldr	r0, [pc, #0]	; (80099f8 <_localeconv_r+0x4>)
 80099f6:	4770      	bx	lr
 80099f8:	20000170 	.word	0x20000170

080099fc <malloc>:
 80099fc:	4b02      	ldr	r3, [pc, #8]	; (8009a08 <malloc+0xc>)
 80099fe:	4601      	mov	r1, r0
 8009a00:	6818      	ldr	r0, [r3, #0]
 8009a02:	f000 bc17 	b.w	800a234 <_malloc_r>
 8009a06:	bf00      	nop
 8009a08:	2000001c 	.word	0x2000001c

08009a0c <memcpy>:
 8009a0c:	440a      	add	r2, r1
 8009a0e:	4291      	cmp	r1, r2
 8009a10:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a14:	d100      	bne.n	8009a18 <memcpy+0xc>
 8009a16:	4770      	bx	lr
 8009a18:	b510      	push	{r4, lr}
 8009a1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a22:	4291      	cmp	r1, r2
 8009a24:	d1f9      	bne.n	8009a1a <memcpy+0xe>
 8009a26:	bd10      	pop	{r4, pc}

08009a28 <_Balloc>:
 8009a28:	b570      	push	{r4, r5, r6, lr}
 8009a2a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009a2c:	4604      	mov	r4, r0
 8009a2e:	460d      	mov	r5, r1
 8009a30:	b976      	cbnz	r6, 8009a50 <_Balloc+0x28>
 8009a32:	2010      	movs	r0, #16
 8009a34:	f7ff ffe2 	bl	80099fc <malloc>
 8009a38:	4602      	mov	r2, r0
 8009a3a:	6260      	str	r0, [r4, #36]	; 0x24
 8009a3c:	b920      	cbnz	r0, 8009a48 <_Balloc+0x20>
 8009a3e:	4b18      	ldr	r3, [pc, #96]	; (8009aa0 <_Balloc+0x78>)
 8009a40:	4818      	ldr	r0, [pc, #96]	; (8009aa4 <_Balloc+0x7c>)
 8009a42:	2166      	movs	r1, #102	; 0x66
 8009a44:	f000 fdd6 	bl	800a5f4 <__assert_func>
 8009a48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a4c:	6006      	str	r6, [r0, #0]
 8009a4e:	60c6      	str	r6, [r0, #12]
 8009a50:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009a52:	68f3      	ldr	r3, [r6, #12]
 8009a54:	b183      	cbz	r3, 8009a78 <_Balloc+0x50>
 8009a56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a58:	68db      	ldr	r3, [r3, #12]
 8009a5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009a5e:	b9b8      	cbnz	r0, 8009a90 <_Balloc+0x68>
 8009a60:	2101      	movs	r1, #1
 8009a62:	fa01 f605 	lsl.w	r6, r1, r5
 8009a66:	1d72      	adds	r2, r6, #5
 8009a68:	0092      	lsls	r2, r2, #2
 8009a6a:	4620      	mov	r0, r4
 8009a6c:	f000 fb60 	bl	800a130 <_calloc_r>
 8009a70:	b160      	cbz	r0, 8009a8c <_Balloc+0x64>
 8009a72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009a76:	e00e      	b.n	8009a96 <_Balloc+0x6e>
 8009a78:	2221      	movs	r2, #33	; 0x21
 8009a7a:	2104      	movs	r1, #4
 8009a7c:	4620      	mov	r0, r4
 8009a7e:	f000 fb57 	bl	800a130 <_calloc_r>
 8009a82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a84:	60f0      	str	r0, [r6, #12]
 8009a86:	68db      	ldr	r3, [r3, #12]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d1e4      	bne.n	8009a56 <_Balloc+0x2e>
 8009a8c:	2000      	movs	r0, #0
 8009a8e:	bd70      	pop	{r4, r5, r6, pc}
 8009a90:	6802      	ldr	r2, [r0, #0]
 8009a92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009a96:	2300      	movs	r3, #0
 8009a98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009a9c:	e7f7      	b.n	8009a8e <_Balloc+0x66>
 8009a9e:	bf00      	nop
 8009aa0:	0800bf99 	.word	0x0800bf99
 8009aa4:	0800c01c 	.word	0x0800c01c

08009aa8 <_Bfree>:
 8009aa8:	b570      	push	{r4, r5, r6, lr}
 8009aaa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009aac:	4605      	mov	r5, r0
 8009aae:	460c      	mov	r4, r1
 8009ab0:	b976      	cbnz	r6, 8009ad0 <_Bfree+0x28>
 8009ab2:	2010      	movs	r0, #16
 8009ab4:	f7ff ffa2 	bl	80099fc <malloc>
 8009ab8:	4602      	mov	r2, r0
 8009aba:	6268      	str	r0, [r5, #36]	; 0x24
 8009abc:	b920      	cbnz	r0, 8009ac8 <_Bfree+0x20>
 8009abe:	4b09      	ldr	r3, [pc, #36]	; (8009ae4 <_Bfree+0x3c>)
 8009ac0:	4809      	ldr	r0, [pc, #36]	; (8009ae8 <_Bfree+0x40>)
 8009ac2:	218a      	movs	r1, #138	; 0x8a
 8009ac4:	f000 fd96 	bl	800a5f4 <__assert_func>
 8009ac8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009acc:	6006      	str	r6, [r0, #0]
 8009ace:	60c6      	str	r6, [r0, #12]
 8009ad0:	b13c      	cbz	r4, 8009ae2 <_Bfree+0x3a>
 8009ad2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009ad4:	6862      	ldr	r2, [r4, #4]
 8009ad6:	68db      	ldr	r3, [r3, #12]
 8009ad8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009adc:	6021      	str	r1, [r4, #0]
 8009ade:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009ae2:	bd70      	pop	{r4, r5, r6, pc}
 8009ae4:	0800bf99 	.word	0x0800bf99
 8009ae8:	0800c01c 	.word	0x0800c01c

08009aec <__multadd>:
 8009aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009af0:	690d      	ldr	r5, [r1, #16]
 8009af2:	4607      	mov	r7, r0
 8009af4:	460c      	mov	r4, r1
 8009af6:	461e      	mov	r6, r3
 8009af8:	f101 0c14 	add.w	ip, r1, #20
 8009afc:	2000      	movs	r0, #0
 8009afe:	f8dc 3000 	ldr.w	r3, [ip]
 8009b02:	b299      	uxth	r1, r3
 8009b04:	fb02 6101 	mla	r1, r2, r1, r6
 8009b08:	0c1e      	lsrs	r6, r3, #16
 8009b0a:	0c0b      	lsrs	r3, r1, #16
 8009b0c:	fb02 3306 	mla	r3, r2, r6, r3
 8009b10:	b289      	uxth	r1, r1
 8009b12:	3001      	adds	r0, #1
 8009b14:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009b18:	4285      	cmp	r5, r0
 8009b1a:	f84c 1b04 	str.w	r1, [ip], #4
 8009b1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009b22:	dcec      	bgt.n	8009afe <__multadd+0x12>
 8009b24:	b30e      	cbz	r6, 8009b6a <__multadd+0x7e>
 8009b26:	68a3      	ldr	r3, [r4, #8]
 8009b28:	42ab      	cmp	r3, r5
 8009b2a:	dc19      	bgt.n	8009b60 <__multadd+0x74>
 8009b2c:	6861      	ldr	r1, [r4, #4]
 8009b2e:	4638      	mov	r0, r7
 8009b30:	3101      	adds	r1, #1
 8009b32:	f7ff ff79 	bl	8009a28 <_Balloc>
 8009b36:	4680      	mov	r8, r0
 8009b38:	b928      	cbnz	r0, 8009b46 <__multadd+0x5a>
 8009b3a:	4602      	mov	r2, r0
 8009b3c:	4b0c      	ldr	r3, [pc, #48]	; (8009b70 <__multadd+0x84>)
 8009b3e:	480d      	ldr	r0, [pc, #52]	; (8009b74 <__multadd+0x88>)
 8009b40:	21b5      	movs	r1, #181	; 0xb5
 8009b42:	f000 fd57 	bl	800a5f4 <__assert_func>
 8009b46:	6922      	ldr	r2, [r4, #16]
 8009b48:	3202      	adds	r2, #2
 8009b4a:	f104 010c 	add.w	r1, r4, #12
 8009b4e:	0092      	lsls	r2, r2, #2
 8009b50:	300c      	adds	r0, #12
 8009b52:	f7ff ff5b 	bl	8009a0c <memcpy>
 8009b56:	4621      	mov	r1, r4
 8009b58:	4638      	mov	r0, r7
 8009b5a:	f7ff ffa5 	bl	8009aa8 <_Bfree>
 8009b5e:	4644      	mov	r4, r8
 8009b60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009b64:	3501      	adds	r5, #1
 8009b66:	615e      	str	r6, [r3, #20]
 8009b68:	6125      	str	r5, [r4, #16]
 8009b6a:	4620      	mov	r0, r4
 8009b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b70:	0800c00b 	.word	0x0800c00b
 8009b74:	0800c01c 	.word	0x0800c01c

08009b78 <__hi0bits>:
 8009b78:	0c03      	lsrs	r3, r0, #16
 8009b7a:	041b      	lsls	r3, r3, #16
 8009b7c:	b9d3      	cbnz	r3, 8009bb4 <__hi0bits+0x3c>
 8009b7e:	0400      	lsls	r0, r0, #16
 8009b80:	2310      	movs	r3, #16
 8009b82:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009b86:	bf04      	itt	eq
 8009b88:	0200      	lsleq	r0, r0, #8
 8009b8a:	3308      	addeq	r3, #8
 8009b8c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009b90:	bf04      	itt	eq
 8009b92:	0100      	lsleq	r0, r0, #4
 8009b94:	3304      	addeq	r3, #4
 8009b96:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009b9a:	bf04      	itt	eq
 8009b9c:	0080      	lsleq	r0, r0, #2
 8009b9e:	3302      	addeq	r3, #2
 8009ba0:	2800      	cmp	r0, #0
 8009ba2:	db05      	blt.n	8009bb0 <__hi0bits+0x38>
 8009ba4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009ba8:	f103 0301 	add.w	r3, r3, #1
 8009bac:	bf08      	it	eq
 8009bae:	2320      	moveq	r3, #32
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	4770      	bx	lr
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	e7e4      	b.n	8009b82 <__hi0bits+0xa>

08009bb8 <__lo0bits>:
 8009bb8:	6803      	ldr	r3, [r0, #0]
 8009bba:	f013 0207 	ands.w	r2, r3, #7
 8009bbe:	4601      	mov	r1, r0
 8009bc0:	d00b      	beq.n	8009bda <__lo0bits+0x22>
 8009bc2:	07da      	lsls	r2, r3, #31
 8009bc4:	d423      	bmi.n	8009c0e <__lo0bits+0x56>
 8009bc6:	0798      	lsls	r0, r3, #30
 8009bc8:	bf49      	itett	mi
 8009bca:	085b      	lsrmi	r3, r3, #1
 8009bcc:	089b      	lsrpl	r3, r3, #2
 8009bce:	2001      	movmi	r0, #1
 8009bd0:	600b      	strmi	r3, [r1, #0]
 8009bd2:	bf5c      	itt	pl
 8009bd4:	600b      	strpl	r3, [r1, #0]
 8009bd6:	2002      	movpl	r0, #2
 8009bd8:	4770      	bx	lr
 8009bda:	b298      	uxth	r0, r3
 8009bdc:	b9a8      	cbnz	r0, 8009c0a <__lo0bits+0x52>
 8009bde:	0c1b      	lsrs	r3, r3, #16
 8009be0:	2010      	movs	r0, #16
 8009be2:	b2da      	uxtb	r2, r3
 8009be4:	b90a      	cbnz	r2, 8009bea <__lo0bits+0x32>
 8009be6:	3008      	adds	r0, #8
 8009be8:	0a1b      	lsrs	r3, r3, #8
 8009bea:	071a      	lsls	r2, r3, #28
 8009bec:	bf04      	itt	eq
 8009bee:	091b      	lsreq	r3, r3, #4
 8009bf0:	3004      	addeq	r0, #4
 8009bf2:	079a      	lsls	r2, r3, #30
 8009bf4:	bf04      	itt	eq
 8009bf6:	089b      	lsreq	r3, r3, #2
 8009bf8:	3002      	addeq	r0, #2
 8009bfa:	07da      	lsls	r2, r3, #31
 8009bfc:	d403      	bmi.n	8009c06 <__lo0bits+0x4e>
 8009bfe:	085b      	lsrs	r3, r3, #1
 8009c00:	f100 0001 	add.w	r0, r0, #1
 8009c04:	d005      	beq.n	8009c12 <__lo0bits+0x5a>
 8009c06:	600b      	str	r3, [r1, #0]
 8009c08:	4770      	bx	lr
 8009c0a:	4610      	mov	r0, r2
 8009c0c:	e7e9      	b.n	8009be2 <__lo0bits+0x2a>
 8009c0e:	2000      	movs	r0, #0
 8009c10:	4770      	bx	lr
 8009c12:	2020      	movs	r0, #32
 8009c14:	4770      	bx	lr
	...

08009c18 <__i2b>:
 8009c18:	b510      	push	{r4, lr}
 8009c1a:	460c      	mov	r4, r1
 8009c1c:	2101      	movs	r1, #1
 8009c1e:	f7ff ff03 	bl	8009a28 <_Balloc>
 8009c22:	4602      	mov	r2, r0
 8009c24:	b928      	cbnz	r0, 8009c32 <__i2b+0x1a>
 8009c26:	4b05      	ldr	r3, [pc, #20]	; (8009c3c <__i2b+0x24>)
 8009c28:	4805      	ldr	r0, [pc, #20]	; (8009c40 <__i2b+0x28>)
 8009c2a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009c2e:	f000 fce1 	bl	800a5f4 <__assert_func>
 8009c32:	2301      	movs	r3, #1
 8009c34:	6144      	str	r4, [r0, #20]
 8009c36:	6103      	str	r3, [r0, #16]
 8009c38:	bd10      	pop	{r4, pc}
 8009c3a:	bf00      	nop
 8009c3c:	0800c00b 	.word	0x0800c00b
 8009c40:	0800c01c 	.word	0x0800c01c

08009c44 <__multiply>:
 8009c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c48:	4691      	mov	r9, r2
 8009c4a:	690a      	ldr	r2, [r1, #16]
 8009c4c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009c50:	429a      	cmp	r2, r3
 8009c52:	bfb8      	it	lt
 8009c54:	460b      	movlt	r3, r1
 8009c56:	460c      	mov	r4, r1
 8009c58:	bfbc      	itt	lt
 8009c5a:	464c      	movlt	r4, r9
 8009c5c:	4699      	movlt	r9, r3
 8009c5e:	6927      	ldr	r7, [r4, #16]
 8009c60:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009c64:	68a3      	ldr	r3, [r4, #8]
 8009c66:	6861      	ldr	r1, [r4, #4]
 8009c68:	eb07 060a 	add.w	r6, r7, sl
 8009c6c:	42b3      	cmp	r3, r6
 8009c6e:	b085      	sub	sp, #20
 8009c70:	bfb8      	it	lt
 8009c72:	3101      	addlt	r1, #1
 8009c74:	f7ff fed8 	bl	8009a28 <_Balloc>
 8009c78:	b930      	cbnz	r0, 8009c88 <__multiply+0x44>
 8009c7a:	4602      	mov	r2, r0
 8009c7c:	4b44      	ldr	r3, [pc, #272]	; (8009d90 <__multiply+0x14c>)
 8009c7e:	4845      	ldr	r0, [pc, #276]	; (8009d94 <__multiply+0x150>)
 8009c80:	f240 115d 	movw	r1, #349	; 0x15d
 8009c84:	f000 fcb6 	bl	800a5f4 <__assert_func>
 8009c88:	f100 0514 	add.w	r5, r0, #20
 8009c8c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009c90:	462b      	mov	r3, r5
 8009c92:	2200      	movs	r2, #0
 8009c94:	4543      	cmp	r3, r8
 8009c96:	d321      	bcc.n	8009cdc <__multiply+0x98>
 8009c98:	f104 0314 	add.w	r3, r4, #20
 8009c9c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009ca0:	f109 0314 	add.w	r3, r9, #20
 8009ca4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009ca8:	9202      	str	r2, [sp, #8]
 8009caa:	1b3a      	subs	r2, r7, r4
 8009cac:	3a15      	subs	r2, #21
 8009cae:	f022 0203 	bic.w	r2, r2, #3
 8009cb2:	3204      	adds	r2, #4
 8009cb4:	f104 0115 	add.w	r1, r4, #21
 8009cb8:	428f      	cmp	r7, r1
 8009cba:	bf38      	it	cc
 8009cbc:	2204      	movcc	r2, #4
 8009cbe:	9201      	str	r2, [sp, #4]
 8009cc0:	9a02      	ldr	r2, [sp, #8]
 8009cc2:	9303      	str	r3, [sp, #12]
 8009cc4:	429a      	cmp	r2, r3
 8009cc6:	d80c      	bhi.n	8009ce2 <__multiply+0x9e>
 8009cc8:	2e00      	cmp	r6, #0
 8009cca:	dd03      	ble.n	8009cd4 <__multiply+0x90>
 8009ccc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d05a      	beq.n	8009d8a <__multiply+0x146>
 8009cd4:	6106      	str	r6, [r0, #16]
 8009cd6:	b005      	add	sp, #20
 8009cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cdc:	f843 2b04 	str.w	r2, [r3], #4
 8009ce0:	e7d8      	b.n	8009c94 <__multiply+0x50>
 8009ce2:	f8b3 a000 	ldrh.w	sl, [r3]
 8009ce6:	f1ba 0f00 	cmp.w	sl, #0
 8009cea:	d024      	beq.n	8009d36 <__multiply+0xf2>
 8009cec:	f104 0e14 	add.w	lr, r4, #20
 8009cf0:	46a9      	mov	r9, r5
 8009cf2:	f04f 0c00 	mov.w	ip, #0
 8009cf6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009cfa:	f8d9 1000 	ldr.w	r1, [r9]
 8009cfe:	fa1f fb82 	uxth.w	fp, r2
 8009d02:	b289      	uxth	r1, r1
 8009d04:	fb0a 110b 	mla	r1, sl, fp, r1
 8009d08:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009d0c:	f8d9 2000 	ldr.w	r2, [r9]
 8009d10:	4461      	add	r1, ip
 8009d12:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009d16:	fb0a c20b 	mla	r2, sl, fp, ip
 8009d1a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009d1e:	b289      	uxth	r1, r1
 8009d20:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009d24:	4577      	cmp	r7, lr
 8009d26:	f849 1b04 	str.w	r1, [r9], #4
 8009d2a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009d2e:	d8e2      	bhi.n	8009cf6 <__multiply+0xb2>
 8009d30:	9a01      	ldr	r2, [sp, #4]
 8009d32:	f845 c002 	str.w	ip, [r5, r2]
 8009d36:	9a03      	ldr	r2, [sp, #12]
 8009d38:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009d3c:	3304      	adds	r3, #4
 8009d3e:	f1b9 0f00 	cmp.w	r9, #0
 8009d42:	d020      	beq.n	8009d86 <__multiply+0x142>
 8009d44:	6829      	ldr	r1, [r5, #0]
 8009d46:	f104 0c14 	add.w	ip, r4, #20
 8009d4a:	46ae      	mov	lr, r5
 8009d4c:	f04f 0a00 	mov.w	sl, #0
 8009d50:	f8bc b000 	ldrh.w	fp, [ip]
 8009d54:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009d58:	fb09 220b 	mla	r2, r9, fp, r2
 8009d5c:	4492      	add	sl, r2
 8009d5e:	b289      	uxth	r1, r1
 8009d60:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009d64:	f84e 1b04 	str.w	r1, [lr], #4
 8009d68:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009d6c:	f8be 1000 	ldrh.w	r1, [lr]
 8009d70:	0c12      	lsrs	r2, r2, #16
 8009d72:	fb09 1102 	mla	r1, r9, r2, r1
 8009d76:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009d7a:	4567      	cmp	r7, ip
 8009d7c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009d80:	d8e6      	bhi.n	8009d50 <__multiply+0x10c>
 8009d82:	9a01      	ldr	r2, [sp, #4]
 8009d84:	50a9      	str	r1, [r5, r2]
 8009d86:	3504      	adds	r5, #4
 8009d88:	e79a      	b.n	8009cc0 <__multiply+0x7c>
 8009d8a:	3e01      	subs	r6, #1
 8009d8c:	e79c      	b.n	8009cc8 <__multiply+0x84>
 8009d8e:	bf00      	nop
 8009d90:	0800c00b 	.word	0x0800c00b
 8009d94:	0800c01c 	.word	0x0800c01c

08009d98 <__pow5mult>:
 8009d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d9c:	4615      	mov	r5, r2
 8009d9e:	f012 0203 	ands.w	r2, r2, #3
 8009da2:	4606      	mov	r6, r0
 8009da4:	460f      	mov	r7, r1
 8009da6:	d007      	beq.n	8009db8 <__pow5mult+0x20>
 8009da8:	4c25      	ldr	r4, [pc, #148]	; (8009e40 <__pow5mult+0xa8>)
 8009daa:	3a01      	subs	r2, #1
 8009dac:	2300      	movs	r3, #0
 8009dae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009db2:	f7ff fe9b 	bl	8009aec <__multadd>
 8009db6:	4607      	mov	r7, r0
 8009db8:	10ad      	asrs	r5, r5, #2
 8009dba:	d03d      	beq.n	8009e38 <__pow5mult+0xa0>
 8009dbc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009dbe:	b97c      	cbnz	r4, 8009de0 <__pow5mult+0x48>
 8009dc0:	2010      	movs	r0, #16
 8009dc2:	f7ff fe1b 	bl	80099fc <malloc>
 8009dc6:	4602      	mov	r2, r0
 8009dc8:	6270      	str	r0, [r6, #36]	; 0x24
 8009dca:	b928      	cbnz	r0, 8009dd8 <__pow5mult+0x40>
 8009dcc:	4b1d      	ldr	r3, [pc, #116]	; (8009e44 <__pow5mult+0xac>)
 8009dce:	481e      	ldr	r0, [pc, #120]	; (8009e48 <__pow5mult+0xb0>)
 8009dd0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009dd4:	f000 fc0e 	bl	800a5f4 <__assert_func>
 8009dd8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009ddc:	6004      	str	r4, [r0, #0]
 8009dde:	60c4      	str	r4, [r0, #12]
 8009de0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009de4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009de8:	b94c      	cbnz	r4, 8009dfe <__pow5mult+0x66>
 8009dea:	f240 2171 	movw	r1, #625	; 0x271
 8009dee:	4630      	mov	r0, r6
 8009df0:	f7ff ff12 	bl	8009c18 <__i2b>
 8009df4:	2300      	movs	r3, #0
 8009df6:	f8c8 0008 	str.w	r0, [r8, #8]
 8009dfa:	4604      	mov	r4, r0
 8009dfc:	6003      	str	r3, [r0, #0]
 8009dfe:	f04f 0900 	mov.w	r9, #0
 8009e02:	07eb      	lsls	r3, r5, #31
 8009e04:	d50a      	bpl.n	8009e1c <__pow5mult+0x84>
 8009e06:	4639      	mov	r1, r7
 8009e08:	4622      	mov	r2, r4
 8009e0a:	4630      	mov	r0, r6
 8009e0c:	f7ff ff1a 	bl	8009c44 <__multiply>
 8009e10:	4639      	mov	r1, r7
 8009e12:	4680      	mov	r8, r0
 8009e14:	4630      	mov	r0, r6
 8009e16:	f7ff fe47 	bl	8009aa8 <_Bfree>
 8009e1a:	4647      	mov	r7, r8
 8009e1c:	106d      	asrs	r5, r5, #1
 8009e1e:	d00b      	beq.n	8009e38 <__pow5mult+0xa0>
 8009e20:	6820      	ldr	r0, [r4, #0]
 8009e22:	b938      	cbnz	r0, 8009e34 <__pow5mult+0x9c>
 8009e24:	4622      	mov	r2, r4
 8009e26:	4621      	mov	r1, r4
 8009e28:	4630      	mov	r0, r6
 8009e2a:	f7ff ff0b 	bl	8009c44 <__multiply>
 8009e2e:	6020      	str	r0, [r4, #0]
 8009e30:	f8c0 9000 	str.w	r9, [r0]
 8009e34:	4604      	mov	r4, r0
 8009e36:	e7e4      	b.n	8009e02 <__pow5mult+0x6a>
 8009e38:	4638      	mov	r0, r7
 8009e3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e3e:	bf00      	nop
 8009e40:	0800c168 	.word	0x0800c168
 8009e44:	0800bf99 	.word	0x0800bf99
 8009e48:	0800c01c 	.word	0x0800c01c

08009e4c <__lshift>:
 8009e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e50:	460c      	mov	r4, r1
 8009e52:	6849      	ldr	r1, [r1, #4]
 8009e54:	6923      	ldr	r3, [r4, #16]
 8009e56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009e5a:	68a3      	ldr	r3, [r4, #8]
 8009e5c:	4607      	mov	r7, r0
 8009e5e:	4691      	mov	r9, r2
 8009e60:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009e64:	f108 0601 	add.w	r6, r8, #1
 8009e68:	42b3      	cmp	r3, r6
 8009e6a:	db0b      	blt.n	8009e84 <__lshift+0x38>
 8009e6c:	4638      	mov	r0, r7
 8009e6e:	f7ff fddb 	bl	8009a28 <_Balloc>
 8009e72:	4605      	mov	r5, r0
 8009e74:	b948      	cbnz	r0, 8009e8a <__lshift+0x3e>
 8009e76:	4602      	mov	r2, r0
 8009e78:	4b2a      	ldr	r3, [pc, #168]	; (8009f24 <__lshift+0xd8>)
 8009e7a:	482b      	ldr	r0, [pc, #172]	; (8009f28 <__lshift+0xdc>)
 8009e7c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009e80:	f000 fbb8 	bl	800a5f4 <__assert_func>
 8009e84:	3101      	adds	r1, #1
 8009e86:	005b      	lsls	r3, r3, #1
 8009e88:	e7ee      	b.n	8009e68 <__lshift+0x1c>
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	f100 0114 	add.w	r1, r0, #20
 8009e90:	f100 0210 	add.w	r2, r0, #16
 8009e94:	4618      	mov	r0, r3
 8009e96:	4553      	cmp	r3, sl
 8009e98:	db37      	blt.n	8009f0a <__lshift+0xbe>
 8009e9a:	6920      	ldr	r0, [r4, #16]
 8009e9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009ea0:	f104 0314 	add.w	r3, r4, #20
 8009ea4:	f019 091f 	ands.w	r9, r9, #31
 8009ea8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009eac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009eb0:	d02f      	beq.n	8009f12 <__lshift+0xc6>
 8009eb2:	f1c9 0e20 	rsb	lr, r9, #32
 8009eb6:	468a      	mov	sl, r1
 8009eb8:	f04f 0c00 	mov.w	ip, #0
 8009ebc:	681a      	ldr	r2, [r3, #0]
 8009ebe:	fa02 f209 	lsl.w	r2, r2, r9
 8009ec2:	ea42 020c 	orr.w	r2, r2, ip
 8009ec6:	f84a 2b04 	str.w	r2, [sl], #4
 8009eca:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ece:	4298      	cmp	r0, r3
 8009ed0:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009ed4:	d8f2      	bhi.n	8009ebc <__lshift+0x70>
 8009ed6:	1b03      	subs	r3, r0, r4
 8009ed8:	3b15      	subs	r3, #21
 8009eda:	f023 0303 	bic.w	r3, r3, #3
 8009ede:	3304      	adds	r3, #4
 8009ee0:	f104 0215 	add.w	r2, r4, #21
 8009ee4:	4290      	cmp	r0, r2
 8009ee6:	bf38      	it	cc
 8009ee8:	2304      	movcc	r3, #4
 8009eea:	f841 c003 	str.w	ip, [r1, r3]
 8009eee:	f1bc 0f00 	cmp.w	ip, #0
 8009ef2:	d001      	beq.n	8009ef8 <__lshift+0xac>
 8009ef4:	f108 0602 	add.w	r6, r8, #2
 8009ef8:	3e01      	subs	r6, #1
 8009efa:	4638      	mov	r0, r7
 8009efc:	612e      	str	r6, [r5, #16]
 8009efe:	4621      	mov	r1, r4
 8009f00:	f7ff fdd2 	bl	8009aa8 <_Bfree>
 8009f04:	4628      	mov	r0, r5
 8009f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f0a:	f842 0f04 	str.w	r0, [r2, #4]!
 8009f0e:	3301      	adds	r3, #1
 8009f10:	e7c1      	b.n	8009e96 <__lshift+0x4a>
 8009f12:	3904      	subs	r1, #4
 8009f14:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f18:	f841 2f04 	str.w	r2, [r1, #4]!
 8009f1c:	4298      	cmp	r0, r3
 8009f1e:	d8f9      	bhi.n	8009f14 <__lshift+0xc8>
 8009f20:	e7ea      	b.n	8009ef8 <__lshift+0xac>
 8009f22:	bf00      	nop
 8009f24:	0800c00b 	.word	0x0800c00b
 8009f28:	0800c01c 	.word	0x0800c01c

08009f2c <__mcmp>:
 8009f2c:	b530      	push	{r4, r5, lr}
 8009f2e:	6902      	ldr	r2, [r0, #16]
 8009f30:	690c      	ldr	r4, [r1, #16]
 8009f32:	1b12      	subs	r2, r2, r4
 8009f34:	d10e      	bne.n	8009f54 <__mcmp+0x28>
 8009f36:	f100 0314 	add.w	r3, r0, #20
 8009f3a:	3114      	adds	r1, #20
 8009f3c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009f40:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009f44:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009f48:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009f4c:	42a5      	cmp	r5, r4
 8009f4e:	d003      	beq.n	8009f58 <__mcmp+0x2c>
 8009f50:	d305      	bcc.n	8009f5e <__mcmp+0x32>
 8009f52:	2201      	movs	r2, #1
 8009f54:	4610      	mov	r0, r2
 8009f56:	bd30      	pop	{r4, r5, pc}
 8009f58:	4283      	cmp	r3, r0
 8009f5a:	d3f3      	bcc.n	8009f44 <__mcmp+0x18>
 8009f5c:	e7fa      	b.n	8009f54 <__mcmp+0x28>
 8009f5e:	f04f 32ff 	mov.w	r2, #4294967295
 8009f62:	e7f7      	b.n	8009f54 <__mcmp+0x28>

08009f64 <__mdiff>:
 8009f64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f68:	460c      	mov	r4, r1
 8009f6a:	4606      	mov	r6, r0
 8009f6c:	4611      	mov	r1, r2
 8009f6e:	4620      	mov	r0, r4
 8009f70:	4690      	mov	r8, r2
 8009f72:	f7ff ffdb 	bl	8009f2c <__mcmp>
 8009f76:	1e05      	subs	r5, r0, #0
 8009f78:	d110      	bne.n	8009f9c <__mdiff+0x38>
 8009f7a:	4629      	mov	r1, r5
 8009f7c:	4630      	mov	r0, r6
 8009f7e:	f7ff fd53 	bl	8009a28 <_Balloc>
 8009f82:	b930      	cbnz	r0, 8009f92 <__mdiff+0x2e>
 8009f84:	4b3a      	ldr	r3, [pc, #232]	; (800a070 <__mdiff+0x10c>)
 8009f86:	4602      	mov	r2, r0
 8009f88:	f240 2132 	movw	r1, #562	; 0x232
 8009f8c:	4839      	ldr	r0, [pc, #228]	; (800a074 <__mdiff+0x110>)
 8009f8e:	f000 fb31 	bl	800a5f4 <__assert_func>
 8009f92:	2301      	movs	r3, #1
 8009f94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009f98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f9c:	bfa4      	itt	ge
 8009f9e:	4643      	movge	r3, r8
 8009fa0:	46a0      	movge	r8, r4
 8009fa2:	4630      	mov	r0, r6
 8009fa4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009fa8:	bfa6      	itte	ge
 8009faa:	461c      	movge	r4, r3
 8009fac:	2500      	movge	r5, #0
 8009fae:	2501      	movlt	r5, #1
 8009fb0:	f7ff fd3a 	bl	8009a28 <_Balloc>
 8009fb4:	b920      	cbnz	r0, 8009fc0 <__mdiff+0x5c>
 8009fb6:	4b2e      	ldr	r3, [pc, #184]	; (800a070 <__mdiff+0x10c>)
 8009fb8:	4602      	mov	r2, r0
 8009fba:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009fbe:	e7e5      	b.n	8009f8c <__mdiff+0x28>
 8009fc0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009fc4:	6926      	ldr	r6, [r4, #16]
 8009fc6:	60c5      	str	r5, [r0, #12]
 8009fc8:	f104 0914 	add.w	r9, r4, #20
 8009fcc:	f108 0514 	add.w	r5, r8, #20
 8009fd0:	f100 0e14 	add.w	lr, r0, #20
 8009fd4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009fd8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009fdc:	f108 0210 	add.w	r2, r8, #16
 8009fe0:	46f2      	mov	sl, lr
 8009fe2:	2100      	movs	r1, #0
 8009fe4:	f859 3b04 	ldr.w	r3, [r9], #4
 8009fe8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009fec:	fa1f f883 	uxth.w	r8, r3
 8009ff0:	fa11 f18b 	uxtah	r1, r1, fp
 8009ff4:	0c1b      	lsrs	r3, r3, #16
 8009ff6:	eba1 0808 	sub.w	r8, r1, r8
 8009ffa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009ffe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a002:	fa1f f888 	uxth.w	r8, r8
 800a006:	1419      	asrs	r1, r3, #16
 800a008:	454e      	cmp	r6, r9
 800a00a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a00e:	f84a 3b04 	str.w	r3, [sl], #4
 800a012:	d8e7      	bhi.n	8009fe4 <__mdiff+0x80>
 800a014:	1b33      	subs	r3, r6, r4
 800a016:	3b15      	subs	r3, #21
 800a018:	f023 0303 	bic.w	r3, r3, #3
 800a01c:	3304      	adds	r3, #4
 800a01e:	3415      	adds	r4, #21
 800a020:	42a6      	cmp	r6, r4
 800a022:	bf38      	it	cc
 800a024:	2304      	movcc	r3, #4
 800a026:	441d      	add	r5, r3
 800a028:	4473      	add	r3, lr
 800a02a:	469e      	mov	lr, r3
 800a02c:	462e      	mov	r6, r5
 800a02e:	4566      	cmp	r6, ip
 800a030:	d30e      	bcc.n	800a050 <__mdiff+0xec>
 800a032:	f10c 0203 	add.w	r2, ip, #3
 800a036:	1b52      	subs	r2, r2, r5
 800a038:	f022 0203 	bic.w	r2, r2, #3
 800a03c:	3d03      	subs	r5, #3
 800a03e:	45ac      	cmp	ip, r5
 800a040:	bf38      	it	cc
 800a042:	2200      	movcc	r2, #0
 800a044:	441a      	add	r2, r3
 800a046:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a04a:	b17b      	cbz	r3, 800a06c <__mdiff+0x108>
 800a04c:	6107      	str	r7, [r0, #16]
 800a04e:	e7a3      	b.n	8009f98 <__mdiff+0x34>
 800a050:	f856 8b04 	ldr.w	r8, [r6], #4
 800a054:	fa11 f288 	uxtah	r2, r1, r8
 800a058:	1414      	asrs	r4, r2, #16
 800a05a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a05e:	b292      	uxth	r2, r2
 800a060:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a064:	f84e 2b04 	str.w	r2, [lr], #4
 800a068:	1421      	asrs	r1, r4, #16
 800a06a:	e7e0      	b.n	800a02e <__mdiff+0xca>
 800a06c:	3f01      	subs	r7, #1
 800a06e:	e7ea      	b.n	800a046 <__mdiff+0xe2>
 800a070:	0800c00b 	.word	0x0800c00b
 800a074:	0800c01c 	.word	0x0800c01c

0800a078 <__d2b>:
 800a078:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a07c:	4689      	mov	r9, r1
 800a07e:	2101      	movs	r1, #1
 800a080:	ec57 6b10 	vmov	r6, r7, d0
 800a084:	4690      	mov	r8, r2
 800a086:	f7ff fccf 	bl	8009a28 <_Balloc>
 800a08a:	4604      	mov	r4, r0
 800a08c:	b930      	cbnz	r0, 800a09c <__d2b+0x24>
 800a08e:	4602      	mov	r2, r0
 800a090:	4b25      	ldr	r3, [pc, #148]	; (800a128 <__d2b+0xb0>)
 800a092:	4826      	ldr	r0, [pc, #152]	; (800a12c <__d2b+0xb4>)
 800a094:	f240 310a 	movw	r1, #778	; 0x30a
 800a098:	f000 faac 	bl	800a5f4 <__assert_func>
 800a09c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a0a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a0a4:	bb35      	cbnz	r5, 800a0f4 <__d2b+0x7c>
 800a0a6:	2e00      	cmp	r6, #0
 800a0a8:	9301      	str	r3, [sp, #4]
 800a0aa:	d028      	beq.n	800a0fe <__d2b+0x86>
 800a0ac:	4668      	mov	r0, sp
 800a0ae:	9600      	str	r6, [sp, #0]
 800a0b0:	f7ff fd82 	bl	8009bb8 <__lo0bits>
 800a0b4:	9900      	ldr	r1, [sp, #0]
 800a0b6:	b300      	cbz	r0, 800a0fa <__d2b+0x82>
 800a0b8:	9a01      	ldr	r2, [sp, #4]
 800a0ba:	f1c0 0320 	rsb	r3, r0, #32
 800a0be:	fa02 f303 	lsl.w	r3, r2, r3
 800a0c2:	430b      	orrs	r3, r1
 800a0c4:	40c2      	lsrs	r2, r0
 800a0c6:	6163      	str	r3, [r4, #20]
 800a0c8:	9201      	str	r2, [sp, #4]
 800a0ca:	9b01      	ldr	r3, [sp, #4]
 800a0cc:	61a3      	str	r3, [r4, #24]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	bf14      	ite	ne
 800a0d2:	2202      	movne	r2, #2
 800a0d4:	2201      	moveq	r2, #1
 800a0d6:	6122      	str	r2, [r4, #16]
 800a0d8:	b1d5      	cbz	r5, 800a110 <__d2b+0x98>
 800a0da:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a0de:	4405      	add	r5, r0
 800a0e0:	f8c9 5000 	str.w	r5, [r9]
 800a0e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a0e8:	f8c8 0000 	str.w	r0, [r8]
 800a0ec:	4620      	mov	r0, r4
 800a0ee:	b003      	add	sp, #12
 800a0f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a0f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a0f8:	e7d5      	b.n	800a0a6 <__d2b+0x2e>
 800a0fa:	6161      	str	r1, [r4, #20]
 800a0fc:	e7e5      	b.n	800a0ca <__d2b+0x52>
 800a0fe:	a801      	add	r0, sp, #4
 800a100:	f7ff fd5a 	bl	8009bb8 <__lo0bits>
 800a104:	9b01      	ldr	r3, [sp, #4]
 800a106:	6163      	str	r3, [r4, #20]
 800a108:	2201      	movs	r2, #1
 800a10a:	6122      	str	r2, [r4, #16]
 800a10c:	3020      	adds	r0, #32
 800a10e:	e7e3      	b.n	800a0d8 <__d2b+0x60>
 800a110:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a114:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a118:	f8c9 0000 	str.w	r0, [r9]
 800a11c:	6918      	ldr	r0, [r3, #16]
 800a11e:	f7ff fd2b 	bl	8009b78 <__hi0bits>
 800a122:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a126:	e7df      	b.n	800a0e8 <__d2b+0x70>
 800a128:	0800c00b 	.word	0x0800c00b
 800a12c:	0800c01c 	.word	0x0800c01c

0800a130 <_calloc_r>:
 800a130:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a132:	fba1 2402 	umull	r2, r4, r1, r2
 800a136:	b94c      	cbnz	r4, 800a14c <_calloc_r+0x1c>
 800a138:	4611      	mov	r1, r2
 800a13a:	9201      	str	r2, [sp, #4]
 800a13c:	f000 f87a 	bl	800a234 <_malloc_r>
 800a140:	9a01      	ldr	r2, [sp, #4]
 800a142:	4605      	mov	r5, r0
 800a144:	b930      	cbnz	r0, 800a154 <_calloc_r+0x24>
 800a146:	4628      	mov	r0, r5
 800a148:	b003      	add	sp, #12
 800a14a:	bd30      	pop	{r4, r5, pc}
 800a14c:	220c      	movs	r2, #12
 800a14e:	6002      	str	r2, [r0, #0]
 800a150:	2500      	movs	r5, #0
 800a152:	e7f8      	b.n	800a146 <_calloc_r+0x16>
 800a154:	4621      	mov	r1, r4
 800a156:	f7fe f941 	bl	80083dc <memset>
 800a15a:	e7f4      	b.n	800a146 <_calloc_r+0x16>

0800a15c <_free_r>:
 800a15c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a15e:	2900      	cmp	r1, #0
 800a160:	d044      	beq.n	800a1ec <_free_r+0x90>
 800a162:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a166:	9001      	str	r0, [sp, #4]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	f1a1 0404 	sub.w	r4, r1, #4
 800a16e:	bfb8      	it	lt
 800a170:	18e4      	addlt	r4, r4, r3
 800a172:	f000 fa9b 	bl	800a6ac <__malloc_lock>
 800a176:	4a1e      	ldr	r2, [pc, #120]	; (800a1f0 <_free_r+0x94>)
 800a178:	9801      	ldr	r0, [sp, #4]
 800a17a:	6813      	ldr	r3, [r2, #0]
 800a17c:	b933      	cbnz	r3, 800a18c <_free_r+0x30>
 800a17e:	6063      	str	r3, [r4, #4]
 800a180:	6014      	str	r4, [r2, #0]
 800a182:	b003      	add	sp, #12
 800a184:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a188:	f000 ba96 	b.w	800a6b8 <__malloc_unlock>
 800a18c:	42a3      	cmp	r3, r4
 800a18e:	d908      	bls.n	800a1a2 <_free_r+0x46>
 800a190:	6825      	ldr	r5, [r4, #0]
 800a192:	1961      	adds	r1, r4, r5
 800a194:	428b      	cmp	r3, r1
 800a196:	bf01      	itttt	eq
 800a198:	6819      	ldreq	r1, [r3, #0]
 800a19a:	685b      	ldreq	r3, [r3, #4]
 800a19c:	1949      	addeq	r1, r1, r5
 800a19e:	6021      	streq	r1, [r4, #0]
 800a1a0:	e7ed      	b.n	800a17e <_free_r+0x22>
 800a1a2:	461a      	mov	r2, r3
 800a1a4:	685b      	ldr	r3, [r3, #4]
 800a1a6:	b10b      	cbz	r3, 800a1ac <_free_r+0x50>
 800a1a8:	42a3      	cmp	r3, r4
 800a1aa:	d9fa      	bls.n	800a1a2 <_free_r+0x46>
 800a1ac:	6811      	ldr	r1, [r2, #0]
 800a1ae:	1855      	adds	r5, r2, r1
 800a1b0:	42a5      	cmp	r5, r4
 800a1b2:	d10b      	bne.n	800a1cc <_free_r+0x70>
 800a1b4:	6824      	ldr	r4, [r4, #0]
 800a1b6:	4421      	add	r1, r4
 800a1b8:	1854      	adds	r4, r2, r1
 800a1ba:	42a3      	cmp	r3, r4
 800a1bc:	6011      	str	r1, [r2, #0]
 800a1be:	d1e0      	bne.n	800a182 <_free_r+0x26>
 800a1c0:	681c      	ldr	r4, [r3, #0]
 800a1c2:	685b      	ldr	r3, [r3, #4]
 800a1c4:	6053      	str	r3, [r2, #4]
 800a1c6:	4421      	add	r1, r4
 800a1c8:	6011      	str	r1, [r2, #0]
 800a1ca:	e7da      	b.n	800a182 <_free_r+0x26>
 800a1cc:	d902      	bls.n	800a1d4 <_free_r+0x78>
 800a1ce:	230c      	movs	r3, #12
 800a1d0:	6003      	str	r3, [r0, #0]
 800a1d2:	e7d6      	b.n	800a182 <_free_r+0x26>
 800a1d4:	6825      	ldr	r5, [r4, #0]
 800a1d6:	1961      	adds	r1, r4, r5
 800a1d8:	428b      	cmp	r3, r1
 800a1da:	bf04      	itt	eq
 800a1dc:	6819      	ldreq	r1, [r3, #0]
 800a1de:	685b      	ldreq	r3, [r3, #4]
 800a1e0:	6063      	str	r3, [r4, #4]
 800a1e2:	bf04      	itt	eq
 800a1e4:	1949      	addeq	r1, r1, r5
 800a1e6:	6021      	streq	r1, [r4, #0]
 800a1e8:	6054      	str	r4, [r2, #4]
 800a1ea:	e7ca      	b.n	800a182 <_free_r+0x26>
 800a1ec:	b003      	add	sp, #12
 800a1ee:	bd30      	pop	{r4, r5, pc}
 800a1f0:	20000848 	.word	0x20000848

0800a1f4 <sbrk_aligned>:
 800a1f4:	b570      	push	{r4, r5, r6, lr}
 800a1f6:	4e0e      	ldr	r6, [pc, #56]	; (800a230 <sbrk_aligned+0x3c>)
 800a1f8:	460c      	mov	r4, r1
 800a1fa:	6831      	ldr	r1, [r6, #0]
 800a1fc:	4605      	mov	r5, r0
 800a1fe:	b911      	cbnz	r1, 800a206 <sbrk_aligned+0x12>
 800a200:	f000 f9e8 	bl	800a5d4 <_sbrk_r>
 800a204:	6030      	str	r0, [r6, #0]
 800a206:	4621      	mov	r1, r4
 800a208:	4628      	mov	r0, r5
 800a20a:	f000 f9e3 	bl	800a5d4 <_sbrk_r>
 800a20e:	1c43      	adds	r3, r0, #1
 800a210:	d00a      	beq.n	800a228 <sbrk_aligned+0x34>
 800a212:	1cc4      	adds	r4, r0, #3
 800a214:	f024 0403 	bic.w	r4, r4, #3
 800a218:	42a0      	cmp	r0, r4
 800a21a:	d007      	beq.n	800a22c <sbrk_aligned+0x38>
 800a21c:	1a21      	subs	r1, r4, r0
 800a21e:	4628      	mov	r0, r5
 800a220:	f000 f9d8 	bl	800a5d4 <_sbrk_r>
 800a224:	3001      	adds	r0, #1
 800a226:	d101      	bne.n	800a22c <sbrk_aligned+0x38>
 800a228:	f04f 34ff 	mov.w	r4, #4294967295
 800a22c:	4620      	mov	r0, r4
 800a22e:	bd70      	pop	{r4, r5, r6, pc}
 800a230:	2000084c 	.word	0x2000084c

0800a234 <_malloc_r>:
 800a234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a238:	1ccd      	adds	r5, r1, #3
 800a23a:	f025 0503 	bic.w	r5, r5, #3
 800a23e:	3508      	adds	r5, #8
 800a240:	2d0c      	cmp	r5, #12
 800a242:	bf38      	it	cc
 800a244:	250c      	movcc	r5, #12
 800a246:	2d00      	cmp	r5, #0
 800a248:	4607      	mov	r7, r0
 800a24a:	db01      	blt.n	800a250 <_malloc_r+0x1c>
 800a24c:	42a9      	cmp	r1, r5
 800a24e:	d905      	bls.n	800a25c <_malloc_r+0x28>
 800a250:	230c      	movs	r3, #12
 800a252:	603b      	str	r3, [r7, #0]
 800a254:	2600      	movs	r6, #0
 800a256:	4630      	mov	r0, r6
 800a258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a25c:	4e2e      	ldr	r6, [pc, #184]	; (800a318 <_malloc_r+0xe4>)
 800a25e:	f000 fa25 	bl	800a6ac <__malloc_lock>
 800a262:	6833      	ldr	r3, [r6, #0]
 800a264:	461c      	mov	r4, r3
 800a266:	bb34      	cbnz	r4, 800a2b6 <_malloc_r+0x82>
 800a268:	4629      	mov	r1, r5
 800a26a:	4638      	mov	r0, r7
 800a26c:	f7ff ffc2 	bl	800a1f4 <sbrk_aligned>
 800a270:	1c43      	adds	r3, r0, #1
 800a272:	4604      	mov	r4, r0
 800a274:	d14d      	bne.n	800a312 <_malloc_r+0xde>
 800a276:	6834      	ldr	r4, [r6, #0]
 800a278:	4626      	mov	r6, r4
 800a27a:	2e00      	cmp	r6, #0
 800a27c:	d140      	bne.n	800a300 <_malloc_r+0xcc>
 800a27e:	6823      	ldr	r3, [r4, #0]
 800a280:	4631      	mov	r1, r6
 800a282:	4638      	mov	r0, r7
 800a284:	eb04 0803 	add.w	r8, r4, r3
 800a288:	f000 f9a4 	bl	800a5d4 <_sbrk_r>
 800a28c:	4580      	cmp	r8, r0
 800a28e:	d13a      	bne.n	800a306 <_malloc_r+0xd2>
 800a290:	6821      	ldr	r1, [r4, #0]
 800a292:	3503      	adds	r5, #3
 800a294:	1a6d      	subs	r5, r5, r1
 800a296:	f025 0503 	bic.w	r5, r5, #3
 800a29a:	3508      	adds	r5, #8
 800a29c:	2d0c      	cmp	r5, #12
 800a29e:	bf38      	it	cc
 800a2a0:	250c      	movcc	r5, #12
 800a2a2:	4629      	mov	r1, r5
 800a2a4:	4638      	mov	r0, r7
 800a2a6:	f7ff ffa5 	bl	800a1f4 <sbrk_aligned>
 800a2aa:	3001      	adds	r0, #1
 800a2ac:	d02b      	beq.n	800a306 <_malloc_r+0xd2>
 800a2ae:	6823      	ldr	r3, [r4, #0]
 800a2b0:	442b      	add	r3, r5
 800a2b2:	6023      	str	r3, [r4, #0]
 800a2b4:	e00e      	b.n	800a2d4 <_malloc_r+0xa0>
 800a2b6:	6822      	ldr	r2, [r4, #0]
 800a2b8:	1b52      	subs	r2, r2, r5
 800a2ba:	d41e      	bmi.n	800a2fa <_malloc_r+0xc6>
 800a2bc:	2a0b      	cmp	r2, #11
 800a2be:	d916      	bls.n	800a2ee <_malloc_r+0xba>
 800a2c0:	1961      	adds	r1, r4, r5
 800a2c2:	42a3      	cmp	r3, r4
 800a2c4:	6025      	str	r5, [r4, #0]
 800a2c6:	bf18      	it	ne
 800a2c8:	6059      	strne	r1, [r3, #4]
 800a2ca:	6863      	ldr	r3, [r4, #4]
 800a2cc:	bf08      	it	eq
 800a2ce:	6031      	streq	r1, [r6, #0]
 800a2d0:	5162      	str	r2, [r4, r5]
 800a2d2:	604b      	str	r3, [r1, #4]
 800a2d4:	4638      	mov	r0, r7
 800a2d6:	f104 060b 	add.w	r6, r4, #11
 800a2da:	f000 f9ed 	bl	800a6b8 <__malloc_unlock>
 800a2de:	f026 0607 	bic.w	r6, r6, #7
 800a2e2:	1d23      	adds	r3, r4, #4
 800a2e4:	1af2      	subs	r2, r6, r3
 800a2e6:	d0b6      	beq.n	800a256 <_malloc_r+0x22>
 800a2e8:	1b9b      	subs	r3, r3, r6
 800a2ea:	50a3      	str	r3, [r4, r2]
 800a2ec:	e7b3      	b.n	800a256 <_malloc_r+0x22>
 800a2ee:	6862      	ldr	r2, [r4, #4]
 800a2f0:	42a3      	cmp	r3, r4
 800a2f2:	bf0c      	ite	eq
 800a2f4:	6032      	streq	r2, [r6, #0]
 800a2f6:	605a      	strne	r2, [r3, #4]
 800a2f8:	e7ec      	b.n	800a2d4 <_malloc_r+0xa0>
 800a2fa:	4623      	mov	r3, r4
 800a2fc:	6864      	ldr	r4, [r4, #4]
 800a2fe:	e7b2      	b.n	800a266 <_malloc_r+0x32>
 800a300:	4634      	mov	r4, r6
 800a302:	6876      	ldr	r6, [r6, #4]
 800a304:	e7b9      	b.n	800a27a <_malloc_r+0x46>
 800a306:	230c      	movs	r3, #12
 800a308:	603b      	str	r3, [r7, #0]
 800a30a:	4638      	mov	r0, r7
 800a30c:	f000 f9d4 	bl	800a6b8 <__malloc_unlock>
 800a310:	e7a1      	b.n	800a256 <_malloc_r+0x22>
 800a312:	6025      	str	r5, [r4, #0]
 800a314:	e7de      	b.n	800a2d4 <_malloc_r+0xa0>
 800a316:	bf00      	nop
 800a318:	20000848 	.word	0x20000848

0800a31c <__ssputs_r>:
 800a31c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a320:	688e      	ldr	r6, [r1, #8]
 800a322:	429e      	cmp	r6, r3
 800a324:	4682      	mov	sl, r0
 800a326:	460c      	mov	r4, r1
 800a328:	4690      	mov	r8, r2
 800a32a:	461f      	mov	r7, r3
 800a32c:	d838      	bhi.n	800a3a0 <__ssputs_r+0x84>
 800a32e:	898a      	ldrh	r2, [r1, #12]
 800a330:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a334:	d032      	beq.n	800a39c <__ssputs_r+0x80>
 800a336:	6825      	ldr	r5, [r4, #0]
 800a338:	6909      	ldr	r1, [r1, #16]
 800a33a:	eba5 0901 	sub.w	r9, r5, r1
 800a33e:	6965      	ldr	r5, [r4, #20]
 800a340:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a344:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a348:	3301      	adds	r3, #1
 800a34a:	444b      	add	r3, r9
 800a34c:	106d      	asrs	r5, r5, #1
 800a34e:	429d      	cmp	r5, r3
 800a350:	bf38      	it	cc
 800a352:	461d      	movcc	r5, r3
 800a354:	0553      	lsls	r3, r2, #21
 800a356:	d531      	bpl.n	800a3bc <__ssputs_r+0xa0>
 800a358:	4629      	mov	r1, r5
 800a35a:	f7ff ff6b 	bl	800a234 <_malloc_r>
 800a35e:	4606      	mov	r6, r0
 800a360:	b950      	cbnz	r0, 800a378 <__ssputs_r+0x5c>
 800a362:	230c      	movs	r3, #12
 800a364:	f8ca 3000 	str.w	r3, [sl]
 800a368:	89a3      	ldrh	r3, [r4, #12]
 800a36a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a36e:	81a3      	strh	r3, [r4, #12]
 800a370:	f04f 30ff 	mov.w	r0, #4294967295
 800a374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a378:	6921      	ldr	r1, [r4, #16]
 800a37a:	464a      	mov	r2, r9
 800a37c:	f7ff fb46 	bl	8009a0c <memcpy>
 800a380:	89a3      	ldrh	r3, [r4, #12]
 800a382:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a386:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a38a:	81a3      	strh	r3, [r4, #12]
 800a38c:	6126      	str	r6, [r4, #16]
 800a38e:	6165      	str	r5, [r4, #20]
 800a390:	444e      	add	r6, r9
 800a392:	eba5 0509 	sub.w	r5, r5, r9
 800a396:	6026      	str	r6, [r4, #0]
 800a398:	60a5      	str	r5, [r4, #8]
 800a39a:	463e      	mov	r6, r7
 800a39c:	42be      	cmp	r6, r7
 800a39e:	d900      	bls.n	800a3a2 <__ssputs_r+0x86>
 800a3a0:	463e      	mov	r6, r7
 800a3a2:	6820      	ldr	r0, [r4, #0]
 800a3a4:	4632      	mov	r2, r6
 800a3a6:	4641      	mov	r1, r8
 800a3a8:	f000 f966 	bl	800a678 <memmove>
 800a3ac:	68a3      	ldr	r3, [r4, #8]
 800a3ae:	1b9b      	subs	r3, r3, r6
 800a3b0:	60a3      	str	r3, [r4, #8]
 800a3b2:	6823      	ldr	r3, [r4, #0]
 800a3b4:	4433      	add	r3, r6
 800a3b6:	6023      	str	r3, [r4, #0]
 800a3b8:	2000      	movs	r0, #0
 800a3ba:	e7db      	b.n	800a374 <__ssputs_r+0x58>
 800a3bc:	462a      	mov	r2, r5
 800a3be:	f000 f981 	bl	800a6c4 <_realloc_r>
 800a3c2:	4606      	mov	r6, r0
 800a3c4:	2800      	cmp	r0, #0
 800a3c6:	d1e1      	bne.n	800a38c <__ssputs_r+0x70>
 800a3c8:	6921      	ldr	r1, [r4, #16]
 800a3ca:	4650      	mov	r0, sl
 800a3cc:	f7ff fec6 	bl	800a15c <_free_r>
 800a3d0:	e7c7      	b.n	800a362 <__ssputs_r+0x46>
	...

0800a3d4 <_svfiprintf_r>:
 800a3d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3d8:	4698      	mov	r8, r3
 800a3da:	898b      	ldrh	r3, [r1, #12]
 800a3dc:	061b      	lsls	r3, r3, #24
 800a3de:	b09d      	sub	sp, #116	; 0x74
 800a3e0:	4607      	mov	r7, r0
 800a3e2:	460d      	mov	r5, r1
 800a3e4:	4614      	mov	r4, r2
 800a3e6:	d50e      	bpl.n	800a406 <_svfiprintf_r+0x32>
 800a3e8:	690b      	ldr	r3, [r1, #16]
 800a3ea:	b963      	cbnz	r3, 800a406 <_svfiprintf_r+0x32>
 800a3ec:	2140      	movs	r1, #64	; 0x40
 800a3ee:	f7ff ff21 	bl	800a234 <_malloc_r>
 800a3f2:	6028      	str	r0, [r5, #0]
 800a3f4:	6128      	str	r0, [r5, #16]
 800a3f6:	b920      	cbnz	r0, 800a402 <_svfiprintf_r+0x2e>
 800a3f8:	230c      	movs	r3, #12
 800a3fa:	603b      	str	r3, [r7, #0]
 800a3fc:	f04f 30ff 	mov.w	r0, #4294967295
 800a400:	e0d1      	b.n	800a5a6 <_svfiprintf_r+0x1d2>
 800a402:	2340      	movs	r3, #64	; 0x40
 800a404:	616b      	str	r3, [r5, #20]
 800a406:	2300      	movs	r3, #0
 800a408:	9309      	str	r3, [sp, #36]	; 0x24
 800a40a:	2320      	movs	r3, #32
 800a40c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a410:	f8cd 800c 	str.w	r8, [sp, #12]
 800a414:	2330      	movs	r3, #48	; 0x30
 800a416:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a5c0 <_svfiprintf_r+0x1ec>
 800a41a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a41e:	f04f 0901 	mov.w	r9, #1
 800a422:	4623      	mov	r3, r4
 800a424:	469a      	mov	sl, r3
 800a426:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a42a:	b10a      	cbz	r2, 800a430 <_svfiprintf_r+0x5c>
 800a42c:	2a25      	cmp	r2, #37	; 0x25
 800a42e:	d1f9      	bne.n	800a424 <_svfiprintf_r+0x50>
 800a430:	ebba 0b04 	subs.w	fp, sl, r4
 800a434:	d00b      	beq.n	800a44e <_svfiprintf_r+0x7a>
 800a436:	465b      	mov	r3, fp
 800a438:	4622      	mov	r2, r4
 800a43a:	4629      	mov	r1, r5
 800a43c:	4638      	mov	r0, r7
 800a43e:	f7ff ff6d 	bl	800a31c <__ssputs_r>
 800a442:	3001      	adds	r0, #1
 800a444:	f000 80aa 	beq.w	800a59c <_svfiprintf_r+0x1c8>
 800a448:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a44a:	445a      	add	r2, fp
 800a44c:	9209      	str	r2, [sp, #36]	; 0x24
 800a44e:	f89a 3000 	ldrb.w	r3, [sl]
 800a452:	2b00      	cmp	r3, #0
 800a454:	f000 80a2 	beq.w	800a59c <_svfiprintf_r+0x1c8>
 800a458:	2300      	movs	r3, #0
 800a45a:	f04f 32ff 	mov.w	r2, #4294967295
 800a45e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a462:	f10a 0a01 	add.w	sl, sl, #1
 800a466:	9304      	str	r3, [sp, #16]
 800a468:	9307      	str	r3, [sp, #28]
 800a46a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a46e:	931a      	str	r3, [sp, #104]	; 0x68
 800a470:	4654      	mov	r4, sl
 800a472:	2205      	movs	r2, #5
 800a474:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a478:	4851      	ldr	r0, [pc, #324]	; (800a5c0 <_svfiprintf_r+0x1ec>)
 800a47a:	f7f5 fed1 	bl	8000220 <memchr>
 800a47e:	9a04      	ldr	r2, [sp, #16]
 800a480:	b9d8      	cbnz	r0, 800a4ba <_svfiprintf_r+0xe6>
 800a482:	06d0      	lsls	r0, r2, #27
 800a484:	bf44      	itt	mi
 800a486:	2320      	movmi	r3, #32
 800a488:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a48c:	0711      	lsls	r1, r2, #28
 800a48e:	bf44      	itt	mi
 800a490:	232b      	movmi	r3, #43	; 0x2b
 800a492:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a496:	f89a 3000 	ldrb.w	r3, [sl]
 800a49a:	2b2a      	cmp	r3, #42	; 0x2a
 800a49c:	d015      	beq.n	800a4ca <_svfiprintf_r+0xf6>
 800a49e:	9a07      	ldr	r2, [sp, #28]
 800a4a0:	4654      	mov	r4, sl
 800a4a2:	2000      	movs	r0, #0
 800a4a4:	f04f 0c0a 	mov.w	ip, #10
 800a4a8:	4621      	mov	r1, r4
 800a4aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4ae:	3b30      	subs	r3, #48	; 0x30
 800a4b0:	2b09      	cmp	r3, #9
 800a4b2:	d94e      	bls.n	800a552 <_svfiprintf_r+0x17e>
 800a4b4:	b1b0      	cbz	r0, 800a4e4 <_svfiprintf_r+0x110>
 800a4b6:	9207      	str	r2, [sp, #28]
 800a4b8:	e014      	b.n	800a4e4 <_svfiprintf_r+0x110>
 800a4ba:	eba0 0308 	sub.w	r3, r0, r8
 800a4be:	fa09 f303 	lsl.w	r3, r9, r3
 800a4c2:	4313      	orrs	r3, r2
 800a4c4:	9304      	str	r3, [sp, #16]
 800a4c6:	46a2      	mov	sl, r4
 800a4c8:	e7d2      	b.n	800a470 <_svfiprintf_r+0x9c>
 800a4ca:	9b03      	ldr	r3, [sp, #12]
 800a4cc:	1d19      	adds	r1, r3, #4
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	9103      	str	r1, [sp, #12]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	bfbb      	ittet	lt
 800a4d6:	425b      	neglt	r3, r3
 800a4d8:	f042 0202 	orrlt.w	r2, r2, #2
 800a4dc:	9307      	strge	r3, [sp, #28]
 800a4de:	9307      	strlt	r3, [sp, #28]
 800a4e0:	bfb8      	it	lt
 800a4e2:	9204      	strlt	r2, [sp, #16]
 800a4e4:	7823      	ldrb	r3, [r4, #0]
 800a4e6:	2b2e      	cmp	r3, #46	; 0x2e
 800a4e8:	d10c      	bne.n	800a504 <_svfiprintf_r+0x130>
 800a4ea:	7863      	ldrb	r3, [r4, #1]
 800a4ec:	2b2a      	cmp	r3, #42	; 0x2a
 800a4ee:	d135      	bne.n	800a55c <_svfiprintf_r+0x188>
 800a4f0:	9b03      	ldr	r3, [sp, #12]
 800a4f2:	1d1a      	adds	r2, r3, #4
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	9203      	str	r2, [sp, #12]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	bfb8      	it	lt
 800a4fc:	f04f 33ff 	movlt.w	r3, #4294967295
 800a500:	3402      	adds	r4, #2
 800a502:	9305      	str	r3, [sp, #20]
 800a504:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a5d0 <_svfiprintf_r+0x1fc>
 800a508:	7821      	ldrb	r1, [r4, #0]
 800a50a:	2203      	movs	r2, #3
 800a50c:	4650      	mov	r0, sl
 800a50e:	f7f5 fe87 	bl	8000220 <memchr>
 800a512:	b140      	cbz	r0, 800a526 <_svfiprintf_r+0x152>
 800a514:	2340      	movs	r3, #64	; 0x40
 800a516:	eba0 000a 	sub.w	r0, r0, sl
 800a51a:	fa03 f000 	lsl.w	r0, r3, r0
 800a51e:	9b04      	ldr	r3, [sp, #16]
 800a520:	4303      	orrs	r3, r0
 800a522:	3401      	adds	r4, #1
 800a524:	9304      	str	r3, [sp, #16]
 800a526:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a52a:	4826      	ldr	r0, [pc, #152]	; (800a5c4 <_svfiprintf_r+0x1f0>)
 800a52c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a530:	2206      	movs	r2, #6
 800a532:	f7f5 fe75 	bl	8000220 <memchr>
 800a536:	2800      	cmp	r0, #0
 800a538:	d038      	beq.n	800a5ac <_svfiprintf_r+0x1d8>
 800a53a:	4b23      	ldr	r3, [pc, #140]	; (800a5c8 <_svfiprintf_r+0x1f4>)
 800a53c:	bb1b      	cbnz	r3, 800a586 <_svfiprintf_r+0x1b2>
 800a53e:	9b03      	ldr	r3, [sp, #12]
 800a540:	3307      	adds	r3, #7
 800a542:	f023 0307 	bic.w	r3, r3, #7
 800a546:	3308      	adds	r3, #8
 800a548:	9303      	str	r3, [sp, #12]
 800a54a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a54c:	4433      	add	r3, r6
 800a54e:	9309      	str	r3, [sp, #36]	; 0x24
 800a550:	e767      	b.n	800a422 <_svfiprintf_r+0x4e>
 800a552:	fb0c 3202 	mla	r2, ip, r2, r3
 800a556:	460c      	mov	r4, r1
 800a558:	2001      	movs	r0, #1
 800a55a:	e7a5      	b.n	800a4a8 <_svfiprintf_r+0xd4>
 800a55c:	2300      	movs	r3, #0
 800a55e:	3401      	adds	r4, #1
 800a560:	9305      	str	r3, [sp, #20]
 800a562:	4619      	mov	r1, r3
 800a564:	f04f 0c0a 	mov.w	ip, #10
 800a568:	4620      	mov	r0, r4
 800a56a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a56e:	3a30      	subs	r2, #48	; 0x30
 800a570:	2a09      	cmp	r2, #9
 800a572:	d903      	bls.n	800a57c <_svfiprintf_r+0x1a8>
 800a574:	2b00      	cmp	r3, #0
 800a576:	d0c5      	beq.n	800a504 <_svfiprintf_r+0x130>
 800a578:	9105      	str	r1, [sp, #20]
 800a57a:	e7c3      	b.n	800a504 <_svfiprintf_r+0x130>
 800a57c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a580:	4604      	mov	r4, r0
 800a582:	2301      	movs	r3, #1
 800a584:	e7f0      	b.n	800a568 <_svfiprintf_r+0x194>
 800a586:	ab03      	add	r3, sp, #12
 800a588:	9300      	str	r3, [sp, #0]
 800a58a:	462a      	mov	r2, r5
 800a58c:	4b0f      	ldr	r3, [pc, #60]	; (800a5cc <_svfiprintf_r+0x1f8>)
 800a58e:	a904      	add	r1, sp, #16
 800a590:	4638      	mov	r0, r7
 800a592:	f7fd ffcb 	bl	800852c <_printf_float>
 800a596:	1c42      	adds	r2, r0, #1
 800a598:	4606      	mov	r6, r0
 800a59a:	d1d6      	bne.n	800a54a <_svfiprintf_r+0x176>
 800a59c:	89ab      	ldrh	r3, [r5, #12]
 800a59e:	065b      	lsls	r3, r3, #25
 800a5a0:	f53f af2c 	bmi.w	800a3fc <_svfiprintf_r+0x28>
 800a5a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a5a6:	b01d      	add	sp, #116	; 0x74
 800a5a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5ac:	ab03      	add	r3, sp, #12
 800a5ae:	9300      	str	r3, [sp, #0]
 800a5b0:	462a      	mov	r2, r5
 800a5b2:	4b06      	ldr	r3, [pc, #24]	; (800a5cc <_svfiprintf_r+0x1f8>)
 800a5b4:	a904      	add	r1, sp, #16
 800a5b6:	4638      	mov	r0, r7
 800a5b8:	f7fe fa5c 	bl	8008a74 <_printf_i>
 800a5bc:	e7eb      	b.n	800a596 <_svfiprintf_r+0x1c2>
 800a5be:	bf00      	nop
 800a5c0:	0800c174 	.word	0x0800c174
 800a5c4:	0800c17e 	.word	0x0800c17e
 800a5c8:	0800852d 	.word	0x0800852d
 800a5cc:	0800a31d 	.word	0x0800a31d
 800a5d0:	0800c17a 	.word	0x0800c17a

0800a5d4 <_sbrk_r>:
 800a5d4:	b538      	push	{r3, r4, r5, lr}
 800a5d6:	4d06      	ldr	r5, [pc, #24]	; (800a5f0 <_sbrk_r+0x1c>)
 800a5d8:	2300      	movs	r3, #0
 800a5da:	4604      	mov	r4, r0
 800a5dc:	4608      	mov	r0, r1
 800a5de:	602b      	str	r3, [r5, #0]
 800a5e0:	f7f9 f982 	bl	80038e8 <_sbrk>
 800a5e4:	1c43      	adds	r3, r0, #1
 800a5e6:	d102      	bne.n	800a5ee <_sbrk_r+0x1a>
 800a5e8:	682b      	ldr	r3, [r5, #0]
 800a5ea:	b103      	cbz	r3, 800a5ee <_sbrk_r+0x1a>
 800a5ec:	6023      	str	r3, [r4, #0]
 800a5ee:	bd38      	pop	{r3, r4, r5, pc}
 800a5f0:	20000850 	.word	0x20000850

0800a5f4 <__assert_func>:
 800a5f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a5f6:	4614      	mov	r4, r2
 800a5f8:	461a      	mov	r2, r3
 800a5fa:	4b09      	ldr	r3, [pc, #36]	; (800a620 <__assert_func+0x2c>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	4605      	mov	r5, r0
 800a600:	68d8      	ldr	r0, [r3, #12]
 800a602:	b14c      	cbz	r4, 800a618 <__assert_func+0x24>
 800a604:	4b07      	ldr	r3, [pc, #28]	; (800a624 <__assert_func+0x30>)
 800a606:	9100      	str	r1, [sp, #0]
 800a608:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a60c:	4906      	ldr	r1, [pc, #24]	; (800a628 <__assert_func+0x34>)
 800a60e:	462b      	mov	r3, r5
 800a610:	f000 f80e 	bl	800a630 <fiprintf>
 800a614:	f000 faac 	bl	800ab70 <abort>
 800a618:	4b04      	ldr	r3, [pc, #16]	; (800a62c <__assert_func+0x38>)
 800a61a:	461c      	mov	r4, r3
 800a61c:	e7f3      	b.n	800a606 <__assert_func+0x12>
 800a61e:	bf00      	nop
 800a620:	2000001c 	.word	0x2000001c
 800a624:	0800c185 	.word	0x0800c185
 800a628:	0800c192 	.word	0x0800c192
 800a62c:	0800c1c0 	.word	0x0800c1c0

0800a630 <fiprintf>:
 800a630:	b40e      	push	{r1, r2, r3}
 800a632:	b503      	push	{r0, r1, lr}
 800a634:	4601      	mov	r1, r0
 800a636:	ab03      	add	r3, sp, #12
 800a638:	4805      	ldr	r0, [pc, #20]	; (800a650 <fiprintf+0x20>)
 800a63a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a63e:	6800      	ldr	r0, [r0, #0]
 800a640:	9301      	str	r3, [sp, #4]
 800a642:	f000 f897 	bl	800a774 <_vfiprintf_r>
 800a646:	b002      	add	sp, #8
 800a648:	f85d eb04 	ldr.w	lr, [sp], #4
 800a64c:	b003      	add	sp, #12
 800a64e:	4770      	bx	lr
 800a650:	2000001c 	.word	0x2000001c

0800a654 <__ascii_mbtowc>:
 800a654:	b082      	sub	sp, #8
 800a656:	b901      	cbnz	r1, 800a65a <__ascii_mbtowc+0x6>
 800a658:	a901      	add	r1, sp, #4
 800a65a:	b142      	cbz	r2, 800a66e <__ascii_mbtowc+0x1a>
 800a65c:	b14b      	cbz	r3, 800a672 <__ascii_mbtowc+0x1e>
 800a65e:	7813      	ldrb	r3, [r2, #0]
 800a660:	600b      	str	r3, [r1, #0]
 800a662:	7812      	ldrb	r2, [r2, #0]
 800a664:	1e10      	subs	r0, r2, #0
 800a666:	bf18      	it	ne
 800a668:	2001      	movne	r0, #1
 800a66a:	b002      	add	sp, #8
 800a66c:	4770      	bx	lr
 800a66e:	4610      	mov	r0, r2
 800a670:	e7fb      	b.n	800a66a <__ascii_mbtowc+0x16>
 800a672:	f06f 0001 	mvn.w	r0, #1
 800a676:	e7f8      	b.n	800a66a <__ascii_mbtowc+0x16>

0800a678 <memmove>:
 800a678:	4288      	cmp	r0, r1
 800a67a:	b510      	push	{r4, lr}
 800a67c:	eb01 0402 	add.w	r4, r1, r2
 800a680:	d902      	bls.n	800a688 <memmove+0x10>
 800a682:	4284      	cmp	r4, r0
 800a684:	4623      	mov	r3, r4
 800a686:	d807      	bhi.n	800a698 <memmove+0x20>
 800a688:	1e43      	subs	r3, r0, #1
 800a68a:	42a1      	cmp	r1, r4
 800a68c:	d008      	beq.n	800a6a0 <memmove+0x28>
 800a68e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a692:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a696:	e7f8      	b.n	800a68a <memmove+0x12>
 800a698:	4402      	add	r2, r0
 800a69a:	4601      	mov	r1, r0
 800a69c:	428a      	cmp	r2, r1
 800a69e:	d100      	bne.n	800a6a2 <memmove+0x2a>
 800a6a0:	bd10      	pop	{r4, pc}
 800a6a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a6a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a6aa:	e7f7      	b.n	800a69c <memmove+0x24>

0800a6ac <__malloc_lock>:
 800a6ac:	4801      	ldr	r0, [pc, #4]	; (800a6b4 <__malloc_lock+0x8>)
 800a6ae:	f000 bc1f 	b.w	800aef0 <__retarget_lock_acquire_recursive>
 800a6b2:	bf00      	nop
 800a6b4:	20000854 	.word	0x20000854

0800a6b8 <__malloc_unlock>:
 800a6b8:	4801      	ldr	r0, [pc, #4]	; (800a6c0 <__malloc_unlock+0x8>)
 800a6ba:	f000 bc1a 	b.w	800aef2 <__retarget_lock_release_recursive>
 800a6be:	bf00      	nop
 800a6c0:	20000854 	.word	0x20000854

0800a6c4 <_realloc_r>:
 800a6c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6c8:	4680      	mov	r8, r0
 800a6ca:	4614      	mov	r4, r2
 800a6cc:	460e      	mov	r6, r1
 800a6ce:	b921      	cbnz	r1, 800a6da <_realloc_r+0x16>
 800a6d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a6d4:	4611      	mov	r1, r2
 800a6d6:	f7ff bdad 	b.w	800a234 <_malloc_r>
 800a6da:	b92a      	cbnz	r2, 800a6e8 <_realloc_r+0x24>
 800a6dc:	f7ff fd3e 	bl	800a15c <_free_r>
 800a6e0:	4625      	mov	r5, r4
 800a6e2:	4628      	mov	r0, r5
 800a6e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6e8:	f000 fc6a 	bl	800afc0 <_malloc_usable_size_r>
 800a6ec:	4284      	cmp	r4, r0
 800a6ee:	4607      	mov	r7, r0
 800a6f0:	d802      	bhi.n	800a6f8 <_realloc_r+0x34>
 800a6f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a6f6:	d812      	bhi.n	800a71e <_realloc_r+0x5a>
 800a6f8:	4621      	mov	r1, r4
 800a6fa:	4640      	mov	r0, r8
 800a6fc:	f7ff fd9a 	bl	800a234 <_malloc_r>
 800a700:	4605      	mov	r5, r0
 800a702:	2800      	cmp	r0, #0
 800a704:	d0ed      	beq.n	800a6e2 <_realloc_r+0x1e>
 800a706:	42bc      	cmp	r4, r7
 800a708:	4622      	mov	r2, r4
 800a70a:	4631      	mov	r1, r6
 800a70c:	bf28      	it	cs
 800a70e:	463a      	movcs	r2, r7
 800a710:	f7ff f97c 	bl	8009a0c <memcpy>
 800a714:	4631      	mov	r1, r6
 800a716:	4640      	mov	r0, r8
 800a718:	f7ff fd20 	bl	800a15c <_free_r>
 800a71c:	e7e1      	b.n	800a6e2 <_realloc_r+0x1e>
 800a71e:	4635      	mov	r5, r6
 800a720:	e7df      	b.n	800a6e2 <_realloc_r+0x1e>

0800a722 <__sfputc_r>:
 800a722:	6893      	ldr	r3, [r2, #8]
 800a724:	3b01      	subs	r3, #1
 800a726:	2b00      	cmp	r3, #0
 800a728:	b410      	push	{r4}
 800a72a:	6093      	str	r3, [r2, #8]
 800a72c:	da08      	bge.n	800a740 <__sfputc_r+0x1e>
 800a72e:	6994      	ldr	r4, [r2, #24]
 800a730:	42a3      	cmp	r3, r4
 800a732:	db01      	blt.n	800a738 <__sfputc_r+0x16>
 800a734:	290a      	cmp	r1, #10
 800a736:	d103      	bne.n	800a740 <__sfputc_r+0x1e>
 800a738:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a73c:	f000 b94a 	b.w	800a9d4 <__swbuf_r>
 800a740:	6813      	ldr	r3, [r2, #0]
 800a742:	1c58      	adds	r0, r3, #1
 800a744:	6010      	str	r0, [r2, #0]
 800a746:	7019      	strb	r1, [r3, #0]
 800a748:	4608      	mov	r0, r1
 800a74a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a74e:	4770      	bx	lr

0800a750 <__sfputs_r>:
 800a750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a752:	4606      	mov	r6, r0
 800a754:	460f      	mov	r7, r1
 800a756:	4614      	mov	r4, r2
 800a758:	18d5      	adds	r5, r2, r3
 800a75a:	42ac      	cmp	r4, r5
 800a75c:	d101      	bne.n	800a762 <__sfputs_r+0x12>
 800a75e:	2000      	movs	r0, #0
 800a760:	e007      	b.n	800a772 <__sfputs_r+0x22>
 800a762:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a766:	463a      	mov	r2, r7
 800a768:	4630      	mov	r0, r6
 800a76a:	f7ff ffda 	bl	800a722 <__sfputc_r>
 800a76e:	1c43      	adds	r3, r0, #1
 800a770:	d1f3      	bne.n	800a75a <__sfputs_r+0xa>
 800a772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a774 <_vfiprintf_r>:
 800a774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a778:	460d      	mov	r5, r1
 800a77a:	b09d      	sub	sp, #116	; 0x74
 800a77c:	4614      	mov	r4, r2
 800a77e:	4698      	mov	r8, r3
 800a780:	4606      	mov	r6, r0
 800a782:	b118      	cbz	r0, 800a78c <_vfiprintf_r+0x18>
 800a784:	6983      	ldr	r3, [r0, #24]
 800a786:	b90b      	cbnz	r3, 800a78c <_vfiprintf_r+0x18>
 800a788:	f000 fb14 	bl	800adb4 <__sinit>
 800a78c:	4b89      	ldr	r3, [pc, #548]	; (800a9b4 <_vfiprintf_r+0x240>)
 800a78e:	429d      	cmp	r5, r3
 800a790:	d11b      	bne.n	800a7ca <_vfiprintf_r+0x56>
 800a792:	6875      	ldr	r5, [r6, #4]
 800a794:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a796:	07d9      	lsls	r1, r3, #31
 800a798:	d405      	bmi.n	800a7a6 <_vfiprintf_r+0x32>
 800a79a:	89ab      	ldrh	r3, [r5, #12]
 800a79c:	059a      	lsls	r2, r3, #22
 800a79e:	d402      	bmi.n	800a7a6 <_vfiprintf_r+0x32>
 800a7a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a7a2:	f000 fba5 	bl	800aef0 <__retarget_lock_acquire_recursive>
 800a7a6:	89ab      	ldrh	r3, [r5, #12]
 800a7a8:	071b      	lsls	r3, r3, #28
 800a7aa:	d501      	bpl.n	800a7b0 <_vfiprintf_r+0x3c>
 800a7ac:	692b      	ldr	r3, [r5, #16]
 800a7ae:	b9eb      	cbnz	r3, 800a7ec <_vfiprintf_r+0x78>
 800a7b0:	4629      	mov	r1, r5
 800a7b2:	4630      	mov	r0, r6
 800a7b4:	f000 f96e 	bl	800aa94 <__swsetup_r>
 800a7b8:	b1c0      	cbz	r0, 800a7ec <_vfiprintf_r+0x78>
 800a7ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7bc:	07dc      	lsls	r4, r3, #31
 800a7be:	d50e      	bpl.n	800a7de <_vfiprintf_r+0x6a>
 800a7c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a7c4:	b01d      	add	sp, #116	; 0x74
 800a7c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7ca:	4b7b      	ldr	r3, [pc, #492]	; (800a9b8 <_vfiprintf_r+0x244>)
 800a7cc:	429d      	cmp	r5, r3
 800a7ce:	d101      	bne.n	800a7d4 <_vfiprintf_r+0x60>
 800a7d0:	68b5      	ldr	r5, [r6, #8]
 800a7d2:	e7df      	b.n	800a794 <_vfiprintf_r+0x20>
 800a7d4:	4b79      	ldr	r3, [pc, #484]	; (800a9bc <_vfiprintf_r+0x248>)
 800a7d6:	429d      	cmp	r5, r3
 800a7d8:	bf08      	it	eq
 800a7da:	68f5      	ldreq	r5, [r6, #12]
 800a7dc:	e7da      	b.n	800a794 <_vfiprintf_r+0x20>
 800a7de:	89ab      	ldrh	r3, [r5, #12]
 800a7e0:	0598      	lsls	r0, r3, #22
 800a7e2:	d4ed      	bmi.n	800a7c0 <_vfiprintf_r+0x4c>
 800a7e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a7e6:	f000 fb84 	bl	800aef2 <__retarget_lock_release_recursive>
 800a7ea:	e7e9      	b.n	800a7c0 <_vfiprintf_r+0x4c>
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	9309      	str	r3, [sp, #36]	; 0x24
 800a7f0:	2320      	movs	r3, #32
 800a7f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a7f6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a7fa:	2330      	movs	r3, #48	; 0x30
 800a7fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a9c0 <_vfiprintf_r+0x24c>
 800a800:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a804:	f04f 0901 	mov.w	r9, #1
 800a808:	4623      	mov	r3, r4
 800a80a:	469a      	mov	sl, r3
 800a80c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a810:	b10a      	cbz	r2, 800a816 <_vfiprintf_r+0xa2>
 800a812:	2a25      	cmp	r2, #37	; 0x25
 800a814:	d1f9      	bne.n	800a80a <_vfiprintf_r+0x96>
 800a816:	ebba 0b04 	subs.w	fp, sl, r4
 800a81a:	d00b      	beq.n	800a834 <_vfiprintf_r+0xc0>
 800a81c:	465b      	mov	r3, fp
 800a81e:	4622      	mov	r2, r4
 800a820:	4629      	mov	r1, r5
 800a822:	4630      	mov	r0, r6
 800a824:	f7ff ff94 	bl	800a750 <__sfputs_r>
 800a828:	3001      	adds	r0, #1
 800a82a:	f000 80aa 	beq.w	800a982 <_vfiprintf_r+0x20e>
 800a82e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a830:	445a      	add	r2, fp
 800a832:	9209      	str	r2, [sp, #36]	; 0x24
 800a834:	f89a 3000 	ldrb.w	r3, [sl]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	f000 80a2 	beq.w	800a982 <_vfiprintf_r+0x20e>
 800a83e:	2300      	movs	r3, #0
 800a840:	f04f 32ff 	mov.w	r2, #4294967295
 800a844:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a848:	f10a 0a01 	add.w	sl, sl, #1
 800a84c:	9304      	str	r3, [sp, #16]
 800a84e:	9307      	str	r3, [sp, #28]
 800a850:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a854:	931a      	str	r3, [sp, #104]	; 0x68
 800a856:	4654      	mov	r4, sl
 800a858:	2205      	movs	r2, #5
 800a85a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a85e:	4858      	ldr	r0, [pc, #352]	; (800a9c0 <_vfiprintf_r+0x24c>)
 800a860:	f7f5 fcde 	bl	8000220 <memchr>
 800a864:	9a04      	ldr	r2, [sp, #16]
 800a866:	b9d8      	cbnz	r0, 800a8a0 <_vfiprintf_r+0x12c>
 800a868:	06d1      	lsls	r1, r2, #27
 800a86a:	bf44      	itt	mi
 800a86c:	2320      	movmi	r3, #32
 800a86e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a872:	0713      	lsls	r3, r2, #28
 800a874:	bf44      	itt	mi
 800a876:	232b      	movmi	r3, #43	; 0x2b
 800a878:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a87c:	f89a 3000 	ldrb.w	r3, [sl]
 800a880:	2b2a      	cmp	r3, #42	; 0x2a
 800a882:	d015      	beq.n	800a8b0 <_vfiprintf_r+0x13c>
 800a884:	9a07      	ldr	r2, [sp, #28]
 800a886:	4654      	mov	r4, sl
 800a888:	2000      	movs	r0, #0
 800a88a:	f04f 0c0a 	mov.w	ip, #10
 800a88e:	4621      	mov	r1, r4
 800a890:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a894:	3b30      	subs	r3, #48	; 0x30
 800a896:	2b09      	cmp	r3, #9
 800a898:	d94e      	bls.n	800a938 <_vfiprintf_r+0x1c4>
 800a89a:	b1b0      	cbz	r0, 800a8ca <_vfiprintf_r+0x156>
 800a89c:	9207      	str	r2, [sp, #28]
 800a89e:	e014      	b.n	800a8ca <_vfiprintf_r+0x156>
 800a8a0:	eba0 0308 	sub.w	r3, r0, r8
 800a8a4:	fa09 f303 	lsl.w	r3, r9, r3
 800a8a8:	4313      	orrs	r3, r2
 800a8aa:	9304      	str	r3, [sp, #16]
 800a8ac:	46a2      	mov	sl, r4
 800a8ae:	e7d2      	b.n	800a856 <_vfiprintf_r+0xe2>
 800a8b0:	9b03      	ldr	r3, [sp, #12]
 800a8b2:	1d19      	adds	r1, r3, #4
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	9103      	str	r1, [sp, #12]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	bfbb      	ittet	lt
 800a8bc:	425b      	neglt	r3, r3
 800a8be:	f042 0202 	orrlt.w	r2, r2, #2
 800a8c2:	9307      	strge	r3, [sp, #28]
 800a8c4:	9307      	strlt	r3, [sp, #28]
 800a8c6:	bfb8      	it	lt
 800a8c8:	9204      	strlt	r2, [sp, #16]
 800a8ca:	7823      	ldrb	r3, [r4, #0]
 800a8cc:	2b2e      	cmp	r3, #46	; 0x2e
 800a8ce:	d10c      	bne.n	800a8ea <_vfiprintf_r+0x176>
 800a8d0:	7863      	ldrb	r3, [r4, #1]
 800a8d2:	2b2a      	cmp	r3, #42	; 0x2a
 800a8d4:	d135      	bne.n	800a942 <_vfiprintf_r+0x1ce>
 800a8d6:	9b03      	ldr	r3, [sp, #12]
 800a8d8:	1d1a      	adds	r2, r3, #4
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	9203      	str	r2, [sp, #12]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	bfb8      	it	lt
 800a8e2:	f04f 33ff 	movlt.w	r3, #4294967295
 800a8e6:	3402      	adds	r4, #2
 800a8e8:	9305      	str	r3, [sp, #20]
 800a8ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a9d0 <_vfiprintf_r+0x25c>
 800a8ee:	7821      	ldrb	r1, [r4, #0]
 800a8f0:	2203      	movs	r2, #3
 800a8f2:	4650      	mov	r0, sl
 800a8f4:	f7f5 fc94 	bl	8000220 <memchr>
 800a8f8:	b140      	cbz	r0, 800a90c <_vfiprintf_r+0x198>
 800a8fa:	2340      	movs	r3, #64	; 0x40
 800a8fc:	eba0 000a 	sub.w	r0, r0, sl
 800a900:	fa03 f000 	lsl.w	r0, r3, r0
 800a904:	9b04      	ldr	r3, [sp, #16]
 800a906:	4303      	orrs	r3, r0
 800a908:	3401      	adds	r4, #1
 800a90a:	9304      	str	r3, [sp, #16]
 800a90c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a910:	482c      	ldr	r0, [pc, #176]	; (800a9c4 <_vfiprintf_r+0x250>)
 800a912:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a916:	2206      	movs	r2, #6
 800a918:	f7f5 fc82 	bl	8000220 <memchr>
 800a91c:	2800      	cmp	r0, #0
 800a91e:	d03f      	beq.n	800a9a0 <_vfiprintf_r+0x22c>
 800a920:	4b29      	ldr	r3, [pc, #164]	; (800a9c8 <_vfiprintf_r+0x254>)
 800a922:	bb1b      	cbnz	r3, 800a96c <_vfiprintf_r+0x1f8>
 800a924:	9b03      	ldr	r3, [sp, #12]
 800a926:	3307      	adds	r3, #7
 800a928:	f023 0307 	bic.w	r3, r3, #7
 800a92c:	3308      	adds	r3, #8
 800a92e:	9303      	str	r3, [sp, #12]
 800a930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a932:	443b      	add	r3, r7
 800a934:	9309      	str	r3, [sp, #36]	; 0x24
 800a936:	e767      	b.n	800a808 <_vfiprintf_r+0x94>
 800a938:	fb0c 3202 	mla	r2, ip, r2, r3
 800a93c:	460c      	mov	r4, r1
 800a93e:	2001      	movs	r0, #1
 800a940:	e7a5      	b.n	800a88e <_vfiprintf_r+0x11a>
 800a942:	2300      	movs	r3, #0
 800a944:	3401      	adds	r4, #1
 800a946:	9305      	str	r3, [sp, #20]
 800a948:	4619      	mov	r1, r3
 800a94a:	f04f 0c0a 	mov.w	ip, #10
 800a94e:	4620      	mov	r0, r4
 800a950:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a954:	3a30      	subs	r2, #48	; 0x30
 800a956:	2a09      	cmp	r2, #9
 800a958:	d903      	bls.n	800a962 <_vfiprintf_r+0x1ee>
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d0c5      	beq.n	800a8ea <_vfiprintf_r+0x176>
 800a95e:	9105      	str	r1, [sp, #20]
 800a960:	e7c3      	b.n	800a8ea <_vfiprintf_r+0x176>
 800a962:	fb0c 2101 	mla	r1, ip, r1, r2
 800a966:	4604      	mov	r4, r0
 800a968:	2301      	movs	r3, #1
 800a96a:	e7f0      	b.n	800a94e <_vfiprintf_r+0x1da>
 800a96c:	ab03      	add	r3, sp, #12
 800a96e:	9300      	str	r3, [sp, #0]
 800a970:	462a      	mov	r2, r5
 800a972:	4b16      	ldr	r3, [pc, #88]	; (800a9cc <_vfiprintf_r+0x258>)
 800a974:	a904      	add	r1, sp, #16
 800a976:	4630      	mov	r0, r6
 800a978:	f7fd fdd8 	bl	800852c <_printf_float>
 800a97c:	4607      	mov	r7, r0
 800a97e:	1c78      	adds	r0, r7, #1
 800a980:	d1d6      	bne.n	800a930 <_vfiprintf_r+0x1bc>
 800a982:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a984:	07d9      	lsls	r1, r3, #31
 800a986:	d405      	bmi.n	800a994 <_vfiprintf_r+0x220>
 800a988:	89ab      	ldrh	r3, [r5, #12]
 800a98a:	059a      	lsls	r2, r3, #22
 800a98c:	d402      	bmi.n	800a994 <_vfiprintf_r+0x220>
 800a98e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a990:	f000 faaf 	bl	800aef2 <__retarget_lock_release_recursive>
 800a994:	89ab      	ldrh	r3, [r5, #12]
 800a996:	065b      	lsls	r3, r3, #25
 800a998:	f53f af12 	bmi.w	800a7c0 <_vfiprintf_r+0x4c>
 800a99c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a99e:	e711      	b.n	800a7c4 <_vfiprintf_r+0x50>
 800a9a0:	ab03      	add	r3, sp, #12
 800a9a2:	9300      	str	r3, [sp, #0]
 800a9a4:	462a      	mov	r2, r5
 800a9a6:	4b09      	ldr	r3, [pc, #36]	; (800a9cc <_vfiprintf_r+0x258>)
 800a9a8:	a904      	add	r1, sp, #16
 800a9aa:	4630      	mov	r0, r6
 800a9ac:	f7fe f862 	bl	8008a74 <_printf_i>
 800a9b0:	e7e4      	b.n	800a97c <_vfiprintf_r+0x208>
 800a9b2:	bf00      	nop
 800a9b4:	0800c2ec 	.word	0x0800c2ec
 800a9b8:	0800c30c 	.word	0x0800c30c
 800a9bc:	0800c2cc 	.word	0x0800c2cc
 800a9c0:	0800c174 	.word	0x0800c174
 800a9c4:	0800c17e 	.word	0x0800c17e
 800a9c8:	0800852d 	.word	0x0800852d
 800a9cc:	0800a751 	.word	0x0800a751
 800a9d0:	0800c17a 	.word	0x0800c17a

0800a9d4 <__swbuf_r>:
 800a9d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9d6:	460e      	mov	r6, r1
 800a9d8:	4614      	mov	r4, r2
 800a9da:	4605      	mov	r5, r0
 800a9dc:	b118      	cbz	r0, 800a9e6 <__swbuf_r+0x12>
 800a9de:	6983      	ldr	r3, [r0, #24]
 800a9e0:	b90b      	cbnz	r3, 800a9e6 <__swbuf_r+0x12>
 800a9e2:	f000 f9e7 	bl	800adb4 <__sinit>
 800a9e6:	4b21      	ldr	r3, [pc, #132]	; (800aa6c <__swbuf_r+0x98>)
 800a9e8:	429c      	cmp	r4, r3
 800a9ea:	d12b      	bne.n	800aa44 <__swbuf_r+0x70>
 800a9ec:	686c      	ldr	r4, [r5, #4]
 800a9ee:	69a3      	ldr	r3, [r4, #24]
 800a9f0:	60a3      	str	r3, [r4, #8]
 800a9f2:	89a3      	ldrh	r3, [r4, #12]
 800a9f4:	071a      	lsls	r2, r3, #28
 800a9f6:	d52f      	bpl.n	800aa58 <__swbuf_r+0x84>
 800a9f8:	6923      	ldr	r3, [r4, #16]
 800a9fa:	b36b      	cbz	r3, 800aa58 <__swbuf_r+0x84>
 800a9fc:	6923      	ldr	r3, [r4, #16]
 800a9fe:	6820      	ldr	r0, [r4, #0]
 800aa00:	1ac0      	subs	r0, r0, r3
 800aa02:	6963      	ldr	r3, [r4, #20]
 800aa04:	b2f6      	uxtb	r6, r6
 800aa06:	4283      	cmp	r3, r0
 800aa08:	4637      	mov	r7, r6
 800aa0a:	dc04      	bgt.n	800aa16 <__swbuf_r+0x42>
 800aa0c:	4621      	mov	r1, r4
 800aa0e:	4628      	mov	r0, r5
 800aa10:	f000 f93c 	bl	800ac8c <_fflush_r>
 800aa14:	bb30      	cbnz	r0, 800aa64 <__swbuf_r+0x90>
 800aa16:	68a3      	ldr	r3, [r4, #8]
 800aa18:	3b01      	subs	r3, #1
 800aa1a:	60a3      	str	r3, [r4, #8]
 800aa1c:	6823      	ldr	r3, [r4, #0]
 800aa1e:	1c5a      	adds	r2, r3, #1
 800aa20:	6022      	str	r2, [r4, #0]
 800aa22:	701e      	strb	r6, [r3, #0]
 800aa24:	6963      	ldr	r3, [r4, #20]
 800aa26:	3001      	adds	r0, #1
 800aa28:	4283      	cmp	r3, r0
 800aa2a:	d004      	beq.n	800aa36 <__swbuf_r+0x62>
 800aa2c:	89a3      	ldrh	r3, [r4, #12]
 800aa2e:	07db      	lsls	r3, r3, #31
 800aa30:	d506      	bpl.n	800aa40 <__swbuf_r+0x6c>
 800aa32:	2e0a      	cmp	r6, #10
 800aa34:	d104      	bne.n	800aa40 <__swbuf_r+0x6c>
 800aa36:	4621      	mov	r1, r4
 800aa38:	4628      	mov	r0, r5
 800aa3a:	f000 f927 	bl	800ac8c <_fflush_r>
 800aa3e:	b988      	cbnz	r0, 800aa64 <__swbuf_r+0x90>
 800aa40:	4638      	mov	r0, r7
 800aa42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa44:	4b0a      	ldr	r3, [pc, #40]	; (800aa70 <__swbuf_r+0x9c>)
 800aa46:	429c      	cmp	r4, r3
 800aa48:	d101      	bne.n	800aa4e <__swbuf_r+0x7a>
 800aa4a:	68ac      	ldr	r4, [r5, #8]
 800aa4c:	e7cf      	b.n	800a9ee <__swbuf_r+0x1a>
 800aa4e:	4b09      	ldr	r3, [pc, #36]	; (800aa74 <__swbuf_r+0xa0>)
 800aa50:	429c      	cmp	r4, r3
 800aa52:	bf08      	it	eq
 800aa54:	68ec      	ldreq	r4, [r5, #12]
 800aa56:	e7ca      	b.n	800a9ee <__swbuf_r+0x1a>
 800aa58:	4621      	mov	r1, r4
 800aa5a:	4628      	mov	r0, r5
 800aa5c:	f000 f81a 	bl	800aa94 <__swsetup_r>
 800aa60:	2800      	cmp	r0, #0
 800aa62:	d0cb      	beq.n	800a9fc <__swbuf_r+0x28>
 800aa64:	f04f 37ff 	mov.w	r7, #4294967295
 800aa68:	e7ea      	b.n	800aa40 <__swbuf_r+0x6c>
 800aa6a:	bf00      	nop
 800aa6c:	0800c2ec 	.word	0x0800c2ec
 800aa70:	0800c30c 	.word	0x0800c30c
 800aa74:	0800c2cc 	.word	0x0800c2cc

0800aa78 <__ascii_wctomb>:
 800aa78:	b149      	cbz	r1, 800aa8e <__ascii_wctomb+0x16>
 800aa7a:	2aff      	cmp	r2, #255	; 0xff
 800aa7c:	bf85      	ittet	hi
 800aa7e:	238a      	movhi	r3, #138	; 0x8a
 800aa80:	6003      	strhi	r3, [r0, #0]
 800aa82:	700a      	strbls	r2, [r1, #0]
 800aa84:	f04f 30ff 	movhi.w	r0, #4294967295
 800aa88:	bf98      	it	ls
 800aa8a:	2001      	movls	r0, #1
 800aa8c:	4770      	bx	lr
 800aa8e:	4608      	mov	r0, r1
 800aa90:	4770      	bx	lr
	...

0800aa94 <__swsetup_r>:
 800aa94:	4b32      	ldr	r3, [pc, #200]	; (800ab60 <__swsetup_r+0xcc>)
 800aa96:	b570      	push	{r4, r5, r6, lr}
 800aa98:	681d      	ldr	r5, [r3, #0]
 800aa9a:	4606      	mov	r6, r0
 800aa9c:	460c      	mov	r4, r1
 800aa9e:	b125      	cbz	r5, 800aaaa <__swsetup_r+0x16>
 800aaa0:	69ab      	ldr	r3, [r5, #24]
 800aaa2:	b913      	cbnz	r3, 800aaaa <__swsetup_r+0x16>
 800aaa4:	4628      	mov	r0, r5
 800aaa6:	f000 f985 	bl	800adb4 <__sinit>
 800aaaa:	4b2e      	ldr	r3, [pc, #184]	; (800ab64 <__swsetup_r+0xd0>)
 800aaac:	429c      	cmp	r4, r3
 800aaae:	d10f      	bne.n	800aad0 <__swsetup_r+0x3c>
 800aab0:	686c      	ldr	r4, [r5, #4]
 800aab2:	89a3      	ldrh	r3, [r4, #12]
 800aab4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aab8:	0719      	lsls	r1, r3, #28
 800aaba:	d42c      	bmi.n	800ab16 <__swsetup_r+0x82>
 800aabc:	06dd      	lsls	r5, r3, #27
 800aabe:	d411      	bmi.n	800aae4 <__swsetup_r+0x50>
 800aac0:	2309      	movs	r3, #9
 800aac2:	6033      	str	r3, [r6, #0]
 800aac4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aac8:	81a3      	strh	r3, [r4, #12]
 800aaca:	f04f 30ff 	mov.w	r0, #4294967295
 800aace:	e03e      	b.n	800ab4e <__swsetup_r+0xba>
 800aad0:	4b25      	ldr	r3, [pc, #148]	; (800ab68 <__swsetup_r+0xd4>)
 800aad2:	429c      	cmp	r4, r3
 800aad4:	d101      	bne.n	800aada <__swsetup_r+0x46>
 800aad6:	68ac      	ldr	r4, [r5, #8]
 800aad8:	e7eb      	b.n	800aab2 <__swsetup_r+0x1e>
 800aada:	4b24      	ldr	r3, [pc, #144]	; (800ab6c <__swsetup_r+0xd8>)
 800aadc:	429c      	cmp	r4, r3
 800aade:	bf08      	it	eq
 800aae0:	68ec      	ldreq	r4, [r5, #12]
 800aae2:	e7e6      	b.n	800aab2 <__swsetup_r+0x1e>
 800aae4:	0758      	lsls	r0, r3, #29
 800aae6:	d512      	bpl.n	800ab0e <__swsetup_r+0x7a>
 800aae8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aaea:	b141      	cbz	r1, 800aafe <__swsetup_r+0x6a>
 800aaec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aaf0:	4299      	cmp	r1, r3
 800aaf2:	d002      	beq.n	800aafa <__swsetup_r+0x66>
 800aaf4:	4630      	mov	r0, r6
 800aaf6:	f7ff fb31 	bl	800a15c <_free_r>
 800aafa:	2300      	movs	r3, #0
 800aafc:	6363      	str	r3, [r4, #52]	; 0x34
 800aafe:	89a3      	ldrh	r3, [r4, #12]
 800ab00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ab04:	81a3      	strh	r3, [r4, #12]
 800ab06:	2300      	movs	r3, #0
 800ab08:	6063      	str	r3, [r4, #4]
 800ab0a:	6923      	ldr	r3, [r4, #16]
 800ab0c:	6023      	str	r3, [r4, #0]
 800ab0e:	89a3      	ldrh	r3, [r4, #12]
 800ab10:	f043 0308 	orr.w	r3, r3, #8
 800ab14:	81a3      	strh	r3, [r4, #12]
 800ab16:	6923      	ldr	r3, [r4, #16]
 800ab18:	b94b      	cbnz	r3, 800ab2e <__swsetup_r+0x9a>
 800ab1a:	89a3      	ldrh	r3, [r4, #12]
 800ab1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ab20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab24:	d003      	beq.n	800ab2e <__swsetup_r+0x9a>
 800ab26:	4621      	mov	r1, r4
 800ab28:	4630      	mov	r0, r6
 800ab2a:	f000 fa09 	bl	800af40 <__smakebuf_r>
 800ab2e:	89a0      	ldrh	r0, [r4, #12]
 800ab30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ab34:	f010 0301 	ands.w	r3, r0, #1
 800ab38:	d00a      	beq.n	800ab50 <__swsetup_r+0xbc>
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	60a3      	str	r3, [r4, #8]
 800ab3e:	6963      	ldr	r3, [r4, #20]
 800ab40:	425b      	negs	r3, r3
 800ab42:	61a3      	str	r3, [r4, #24]
 800ab44:	6923      	ldr	r3, [r4, #16]
 800ab46:	b943      	cbnz	r3, 800ab5a <__swsetup_r+0xc6>
 800ab48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ab4c:	d1ba      	bne.n	800aac4 <__swsetup_r+0x30>
 800ab4e:	bd70      	pop	{r4, r5, r6, pc}
 800ab50:	0781      	lsls	r1, r0, #30
 800ab52:	bf58      	it	pl
 800ab54:	6963      	ldrpl	r3, [r4, #20]
 800ab56:	60a3      	str	r3, [r4, #8]
 800ab58:	e7f4      	b.n	800ab44 <__swsetup_r+0xb0>
 800ab5a:	2000      	movs	r0, #0
 800ab5c:	e7f7      	b.n	800ab4e <__swsetup_r+0xba>
 800ab5e:	bf00      	nop
 800ab60:	2000001c 	.word	0x2000001c
 800ab64:	0800c2ec 	.word	0x0800c2ec
 800ab68:	0800c30c 	.word	0x0800c30c
 800ab6c:	0800c2cc 	.word	0x0800c2cc

0800ab70 <abort>:
 800ab70:	b508      	push	{r3, lr}
 800ab72:	2006      	movs	r0, #6
 800ab74:	f000 fa54 	bl	800b020 <raise>
 800ab78:	2001      	movs	r0, #1
 800ab7a:	f7f8 fe3d 	bl	80037f8 <_exit>
	...

0800ab80 <__sflush_r>:
 800ab80:	898a      	ldrh	r2, [r1, #12]
 800ab82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab86:	4605      	mov	r5, r0
 800ab88:	0710      	lsls	r0, r2, #28
 800ab8a:	460c      	mov	r4, r1
 800ab8c:	d458      	bmi.n	800ac40 <__sflush_r+0xc0>
 800ab8e:	684b      	ldr	r3, [r1, #4]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	dc05      	bgt.n	800aba0 <__sflush_r+0x20>
 800ab94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	dc02      	bgt.n	800aba0 <__sflush_r+0x20>
 800ab9a:	2000      	movs	r0, #0
 800ab9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aba0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aba2:	2e00      	cmp	r6, #0
 800aba4:	d0f9      	beq.n	800ab9a <__sflush_r+0x1a>
 800aba6:	2300      	movs	r3, #0
 800aba8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800abac:	682f      	ldr	r7, [r5, #0]
 800abae:	602b      	str	r3, [r5, #0]
 800abb0:	d032      	beq.n	800ac18 <__sflush_r+0x98>
 800abb2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800abb4:	89a3      	ldrh	r3, [r4, #12]
 800abb6:	075a      	lsls	r2, r3, #29
 800abb8:	d505      	bpl.n	800abc6 <__sflush_r+0x46>
 800abba:	6863      	ldr	r3, [r4, #4]
 800abbc:	1ac0      	subs	r0, r0, r3
 800abbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800abc0:	b10b      	cbz	r3, 800abc6 <__sflush_r+0x46>
 800abc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800abc4:	1ac0      	subs	r0, r0, r3
 800abc6:	2300      	movs	r3, #0
 800abc8:	4602      	mov	r2, r0
 800abca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800abcc:	6a21      	ldr	r1, [r4, #32]
 800abce:	4628      	mov	r0, r5
 800abd0:	47b0      	blx	r6
 800abd2:	1c43      	adds	r3, r0, #1
 800abd4:	89a3      	ldrh	r3, [r4, #12]
 800abd6:	d106      	bne.n	800abe6 <__sflush_r+0x66>
 800abd8:	6829      	ldr	r1, [r5, #0]
 800abda:	291d      	cmp	r1, #29
 800abdc:	d82c      	bhi.n	800ac38 <__sflush_r+0xb8>
 800abde:	4a2a      	ldr	r2, [pc, #168]	; (800ac88 <__sflush_r+0x108>)
 800abe0:	40ca      	lsrs	r2, r1
 800abe2:	07d6      	lsls	r6, r2, #31
 800abe4:	d528      	bpl.n	800ac38 <__sflush_r+0xb8>
 800abe6:	2200      	movs	r2, #0
 800abe8:	6062      	str	r2, [r4, #4]
 800abea:	04d9      	lsls	r1, r3, #19
 800abec:	6922      	ldr	r2, [r4, #16]
 800abee:	6022      	str	r2, [r4, #0]
 800abf0:	d504      	bpl.n	800abfc <__sflush_r+0x7c>
 800abf2:	1c42      	adds	r2, r0, #1
 800abf4:	d101      	bne.n	800abfa <__sflush_r+0x7a>
 800abf6:	682b      	ldr	r3, [r5, #0]
 800abf8:	b903      	cbnz	r3, 800abfc <__sflush_r+0x7c>
 800abfa:	6560      	str	r0, [r4, #84]	; 0x54
 800abfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800abfe:	602f      	str	r7, [r5, #0]
 800ac00:	2900      	cmp	r1, #0
 800ac02:	d0ca      	beq.n	800ab9a <__sflush_r+0x1a>
 800ac04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac08:	4299      	cmp	r1, r3
 800ac0a:	d002      	beq.n	800ac12 <__sflush_r+0x92>
 800ac0c:	4628      	mov	r0, r5
 800ac0e:	f7ff faa5 	bl	800a15c <_free_r>
 800ac12:	2000      	movs	r0, #0
 800ac14:	6360      	str	r0, [r4, #52]	; 0x34
 800ac16:	e7c1      	b.n	800ab9c <__sflush_r+0x1c>
 800ac18:	6a21      	ldr	r1, [r4, #32]
 800ac1a:	2301      	movs	r3, #1
 800ac1c:	4628      	mov	r0, r5
 800ac1e:	47b0      	blx	r6
 800ac20:	1c41      	adds	r1, r0, #1
 800ac22:	d1c7      	bne.n	800abb4 <__sflush_r+0x34>
 800ac24:	682b      	ldr	r3, [r5, #0]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d0c4      	beq.n	800abb4 <__sflush_r+0x34>
 800ac2a:	2b1d      	cmp	r3, #29
 800ac2c:	d001      	beq.n	800ac32 <__sflush_r+0xb2>
 800ac2e:	2b16      	cmp	r3, #22
 800ac30:	d101      	bne.n	800ac36 <__sflush_r+0xb6>
 800ac32:	602f      	str	r7, [r5, #0]
 800ac34:	e7b1      	b.n	800ab9a <__sflush_r+0x1a>
 800ac36:	89a3      	ldrh	r3, [r4, #12]
 800ac38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac3c:	81a3      	strh	r3, [r4, #12]
 800ac3e:	e7ad      	b.n	800ab9c <__sflush_r+0x1c>
 800ac40:	690f      	ldr	r7, [r1, #16]
 800ac42:	2f00      	cmp	r7, #0
 800ac44:	d0a9      	beq.n	800ab9a <__sflush_r+0x1a>
 800ac46:	0793      	lsls	r3, r2, #30
 800ac48:	680e      	ldr	r6, [r1, #0]
 800ac4a:	bf08      	it	eq
 800ac4c:	694b      	ldreq	r3, [r1, #20]
 800ac4e:	600f      	str	r7, [r1, #0]
 800ac50:	bf18      	it	ne
 800ac52:	2300      	movne	r3, #0
 800ac54:	eba6 0807 	sub.w	r8, r6, r7
 800ac58:	608b      	str	r3, [r1, #8]
 800ac5a:	f1b8 0f00 	cmp.w	r8, #0
 800ac5e:	dd9c      	ble.n	800ab9a <__sflush_r+0x1a>
 800ac60:	6a21      	ldr	r1, [r4, #32]
 800ac62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ac64:	4643      	mov	r3, r8
 800ac66:	463a      	mov	r2, r7
 800ac68:	4628      	mov	r0, r5
 800ac6a:	47b0      	blx	r6
 800ac6c:	2800      	cmp	r0, #0
 800ac6e:	dc06      	bgt.n	800ac7e <__sflush_r+0xfe>
 800ac70:	89a3      	ldrh	r3, [r4, #12]
 800ac72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac76:	81a3      	strh	r3, [r4, #12]
 800ac78:	f04f 30ff 	mov.w	r0, #4294967295
 800ac7c:	e78e      	b.n	800ab9c <__sflush_r+0x1c>
 800ac7e:	4407      	add	r7, r0
 800ac80:	eba8 0800 	sub.w	r8, r8, r0
 800ac84:	e7e9      	b.n	800ac5a <__sflush_r+0xda>
 800ac86:	bf00      	nop
 800ac88:	20400001 	.word	0x20400001

0800ac8c <_fflush_r>:
 800ac8c:	b538      	push	{r3, r4, r5, lr}
 800ac8e:	690b      	ldr	r3, [r1, #16]
 800ac90:	4605      	mov	r5, r0
 800ac92:	460c      	mov	r4, r1
 800ac94:	b913      	cbnz	r3, 800ac9c <_fflush_r+0x10>
 800ac96:	2500      	movs	r5, #0
 800ac98:	4628      	mov	r0, r5
 800ac9a:	bd38      	pop	{r3, r4, r5, pc}
 800ac9c:	b118      	cbz	r0, 800aca6 <_fflush_r+0x1a>
 800ac9e:	6983      	ldr	r3, [r0, #24]
 800aca0:	b90b      	cbnz	r3, 800aca6 <_fflush_r+0x1a>
 800aca2:	f000 f887 	bl	800adb4 <__sinit>
 800aca6:	4b14      	ldr	r3, [pc, #80]	; (800acf8 <_fflush_r+0x6c>)
 800aca8:	429c      	cmp	r4, r3
 800acaa:	d11b      	bne.n	800ace4 <_fflush_r+0x58>
 800acac:	686c      	ldr	r4, [r5, #4]
 800acae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d0ef      	beq.n	800ac96 <_fflush_r+0xa>
 800acb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800acb8:	07d0      	lsls	r0, r2, #31
 800acba:	d404      	bmi.n	800acc6 <_fflush_r+0x3a>
 800acbc:	0599      	lsls	r1, r3, #22
 800acbe:	d402      	bmi.n	800acc6 <_fflush_r+0x3a>
 800acc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800acc2:	f000 f915 	bl	800aef0 <__retarget_lock_acquire_recursive>
 800acc6:	4628      	mov	r0, r5
 800acc8:	4621      	mov	r1, r4
 800acca:	f7ff ff59 	bl	800ab80 <__sflush_r>
 800acce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800acd0:	07da      	lsls	r2, r3, #31
 800acd2:	4605      	mov	r5, r0
 800acd4:	d4e0      	bmi.n	800ac98 <_fflush_r+0xc>
 800acd6:	89a3      	ldrh	r3, [r4, #12]
 800acd8:	059b      	lsls	r3, r3, #22
 800acda:	d4dd      	bmi.n	800ac98 <_fflush_r+0xc>
 800acdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800acde:	f000 f908 	bl	800aef2 <__retarget_lock_release_recursive>
 800ace2:	e7d9      	b.n	800ac98 <_fflush_r+0xc>
 800ace4:	4b05      	ldr	r3, [pc, #20]	; (800acfc <_fflush_r+0x70>)
 800ace6:	429c      	cmp	r4, r3
 800ace8:	d101      	bne.n	800acee <_fflush_r+0x62>
 800acea:	68ac      	ldr	r4, [r5, #8]
 800acec:	e7df      	b.n	800acae <_fflush_r+0x22>
 800acee:	4b04      	ldr	r3, [pc, #16]	; (800ad00 <_fflush_r+0x74>)
 800acf0:	429c      	cmp	r4, r3
 800acf2:	bf08      	it	eq
 800acf4:	68ec      	ldreq	r4, [r5, #12]
 800acf6:	e7da      	b.n	800acae <_fflush_r+0x22>
 800acf8:	0800c2ec 	.word	0x0800c2ec
 800acfc:	0800c30c 	.word	0x0800c30c
 800ad00:	0800c2cc 	.word	0x0800c2cc

0800ad04 <std>:
 800ad04:	2300      	movs	r3, #0
 800ad06:	b510      	push	{r4, lr}
 800ad08:	4604      	mov	r4, r0
 800ad0a:	e9c0 3300 	strd	r3, r3, [r0]
 800ad0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ad12:	6083      	str	r3, [r0, #8]
 800ad14:	8181      	strh	r1, [r0, #12]
 800ad16:	6643      	str	r3, [r0, #100]	; 0x64
 800ad18:	81c2      	strh	r2, [r0, #14]
 800ad1a:	6183      	str	r3, [r0, #24]
 800ad1c:	4619      	mov	r1, r3
 800ad1e:	2208      	movs	r2, #8
 800ad20:	305c      	adds	r0, #92	; 0x5c
 800ad22:	f7fd fb5b 	bl	80083dc <memset>
 800ad26:	4b05      	ldr	r3, [pc, #20]	; (800ad3c <std+0x38>)
 800ad28:	6263      	str	r3, [r4, #36]	; 0x24
 800ad2a:	4b05      	ldr	r3, [pc, #20]	; (800ad40 <std+0x3c>)
 800ad2c:	62a3      	str	r3, [r4, #40]	; 0x28
 800ad2e:	4b05      	ldr	r3, [pc, #20]	; (800ad44 <std+0x40>)
 800ad30:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ad32:	4b05      	ldr	r3, [pc, #20]	; (800ad48 <std+0x44>)
 800ad34:	6224      	str	r4, [r4, #32]
 800ad36:	6323      	str	r3, [r4, #48]	; 0x30
 800ad38:	bd10      	pop	{r4, pc}
 800ad3a:	bf00      	nop
 800ad3c:	0800b059 	.word	0x0800b059
 800ad40:	0800b07b 	.word	0x0800b07b
 800ad44:	0800b0b3 	.word	0x0800b0b3
 800ad48:	0800b0d7 	.word	0x0800b0d7

0800ad4c <_cleanup_r>:
 800ad4c:	4901      	ldr	r1, [pc, #4]	; (800ad54 <_cleanup_r+0x8>)
 800ad4e:	f000 b8af 	b.w	800aeb0 <_fwalk_reent>
 800ad52:	bf00      	nop
 800ad54:	0800ac8d 	.word	0x0800ac8d

0800ad58 <__sfmoreglue>:
 800ad58:	b570      	push	{r4, r5, r6, lr}
 800ad5a:	2268      	movs	r2, #104	; 0x68
 800ad5c:	1e4d      	subs	r5, r1, #1
 800ad5e:	4355      	muls	r5, r2
 800ad60:	460e      	mov	r6, r1
 800ad62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ad66:	f7ff fa65 	bl	800a234 <_malloc_r>
 800ad6a:	4604      	mov	r4, r0
 800ad6c:	b140      	cbz	r0, 800ad80 <__sfmoreglue+0x28>
 800ad6e:	2100      	movs	r1, #0
 800ad70:	e9c0 1600 	strd	r1, r6, [r0]
 800ad74:	300c      	adds	r0, #12
 800ad76:	60a0      	str	r0, [r4, #8]
 800ad78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ad7c:	f7fd fb2e 	bl	80083dc <memset>
 800ad80:	4620      	mov	r0, r4
 800ad82:	bd70      	pop	{r4, r5, r6, pc}

0800ad84 <__sfp_lock_acquire>:
 800ad84:	4801      	ldr	r0, [pc, #4]	; (800ad8c <__sfp_lock_acquire+0x8>)
 800ad86:	f000 b8b3 	b.w	800aef0 <__retarget_lock_acquire_recursive>
 800ad8a:	bf00      	nop
 800ad8c:	20000855 	.word	0x20000855

0800ad90 <__sfp_lock_release>:
 800ad90:	4801      	ldr	r0, [pc, #4]	; (800ad98 <__sfp_lock_release+0x8>)
 800ad92:	f000 b8ae 	b.w	800aef2 <__retarget_lock_release_recursive>
 800ad96:	bf00      	nop
 800ad98:	20000855 	.word	0x20000855

0800ad9c <__sinit_lock_acquire>:
 800ad9c:	4801      	ldr	r0, [pc, #4]	; (800ada4 <__sinit_lock_acquire+0x8>)
 800ad9e:	f000 b8a7 	b.w	800aef0 <__retarget_lock_acquire_recursive>
 800ada2:	bf00      	nop
 800ada4:	20000856 	.word	0x20000856

0800ada8 <__sinit_lock_release>:
 800ada8:	4801      	ldr	r0, [pc, #4]	; (800adb0 <__sinit_lock_release+0x8>)
 800adaa:	f000 b8a2 	b.w	800aef2 <__retarget_lock_release_recursive>
 800adae:	bf00      	nop
 800adb0:	20000856 	.word	0x20000856

0800adb4 <__sinit>:
 800adb4:	b510      	push	{r4, lr}
 800adb6:	4604      	mov	r4, r0
 800adb8:	f7ff fff0 	bl	800ad9c <__sinit_lock_acquire>
 800adbc:	69a3      	ldr	r3, [r4, #24]
 800adbe:	b11b      	cbz	r3, 800adc8 <__sinit+0x14>
 800adc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800adc4:	f7ff bff0 	b.w	800ada8 <__sinit_lock_release>
 800adc8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800adcc:	6523      	str	r3, [r4, #80]	; 0x50
 800adce:	4b13      	ldr	r3, [pc, #76]	; (800ae1c <__sinit+0x68>)
 800add0:	4a13      	ldr	r2, [pc, #76]	; (800ae20 <__sinit+0x6c>)
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	62a2      	str	r2, [r4, #40]	; 0x28
 800add6:	42a3      	cmp	r3, r4
 800add8:	bf04      	itt	eq
 800adda:	2301      	moveq	r3, #1
 800addc:	61a3      	streq	r3, [r4, #24]
 800adde:	4620      	mov	r0, r4
 800ade0:	f000 f820 	bl	800ae24 <__sfp>
 800ade4:	6060      	str	r0, [r4, #4]
 800ade6:	4620      	mov	r0, r4
 800ade8:	f000 f81c 	bl	800ae24 <__sfp>
 800adec:	60a0      	str	r0, [r4, #8]
 800adee:	4620      	mov	r0, r4
 800adf0:	f000 f818 	bl	800ae24 <__sfp>
 800adf4:	2200      	movs	r2, #0
 800adf6:	60e0      	str	r0, [r4, #12]
 800adf8:	2104      	movs	r1, #4
 800adfa:	6860      	ldr	r0, [r4, #4]
 800adfc:	f7ff ff82 	bl	800ad04 <std>
 800ae00:	68a0      	ldr	r0, [r4, #8]
 800ae02:	2201      	movs	r2, #1
 800ae04:	2109      	movs	r1, #9
 800ae06:	f7ff ff7d 	bl	800ad04 <std>
 800ae0a:	68e0      	ldr	r0, [r4, #12]
 800ae0c:	2202      	movs	r2, #2
 800ae0e:	2112      	movs	r1, #18
 800ae10:	f7ff ff78 	bl	800ad04 <std>
 800ae14:	2301      	movs	r3, #1
 800ae16:	61a3      	str	r3, [r4, #24]
 800ae18:	e7d2      	b.n	800adc0 <__sinit+0xc>
 800ae1a:	bf00      	nop
 800ae1c:	0800bf54 	.word	0x0800bf54
 800ae20:	0800ad4d 	.word	0x0800ad4d

0800ae24 <__sfp>:
 800ae24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae26:	4607      	mov	r7, r0
 800ae28:	f7ff ffac 	bl	800ad84 <__sfp_lock_acquire>
 800ae2c:	4b1e      	ldr	r3, [pc, #120]	; (800aea8 <__sfp+0x84>)
 800ae2e:	681e      	ldr	r6, [r3, #0]
 800ae30:	69b3      	ldr	r3, [r6, #24]
 800ae32:	b913      	cbnz	r3, 800ae3a <__sfp+0x16>
 800ae34:	4630      	mov	r0, r6
 800ae36:	f7ff ffbd 	bl	800adb4 <__sinit>
 800ae3a:	3648      	adds	r6, #72	; 0x48
 800ae3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ae40:	3b01      	subs	r3, #1
 800ae42:	d503      	bpl.n	800ae4c <__sfp+0x28>
 800ae44:	6833      	ldr	r3, [r6, #0]
 800ae46:	b30b      	cbz	r3, 800ae8c <__sfp+0x68>
 800ae48:	6836      	ldr	r6, [r6, #0]
 800ae4a:	e7f7      	b.n	800ae3c <__sfp+0x18>
 800ae4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ae50:	b9d5      	cbnz	r5, 800ae88 <__sfp+0x64>
 800ae52:	4b16      	ldr	r3, [pc, #88]	; (800aeac <__sfp+0x88>)
 800ae54:	60e3      	str	r3, [r4, #12]
 800ae56:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ae5a:	6665      	str	r5, [r4, #100]	; 0x64
 800ae5c:	f000 f847 	bl	800aeee <__retarget_lock_init_recursive>
 800ae60:	f7ff ff96 	bl	800ad90 <__sfp_lock_release>
 800ae64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ae68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ae6c:	6025      	str	r5, [r4, #0]
 800ae6e:	61a5      	str	r5, [r4, #24]
 800ae70:	2208      	movs	r2, #8
 800ae72:	4629      	mov	r1, r5
 800ae74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ae78:	f7fd fab0 	bl	80083dc <memset>
 800ae7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ae80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ae84:	4620      	mov	r0, r4
 800ae86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae88:	3468      	adds	r4, #104	; 0x68
 800ae8a:	e7d9      	b.n	800ae40 <__sfp+0x1c>
 800ae8c:	2104      	movs	r1, #4
 800ae8e:	4638      	mov	r0, r7
 800ae90:	f7ff ff62 	bl	800ad58 <__sfmoreglue>
 800ae94:	4604      	mov	r4, r0
 800ae96:	6030      	str	r0, [r6, #0]
 800ae98:	2800      	cmp	r0, #0
 800ae9a:	d1d5      	bne.n	800ae48 <__sfp+0x24>
 800ae9c:	f7ff ff78 	bl	800ad90 <__sfp_lock_release>
 800aea0:	230c      	movs	r3, #12
 800aea2:	603b      	str	r3, [r7, #0]
 800aea4:	e7ee      	b.n	800ae84 <__sfp+0x60>
 800aea6:	bf00      	nop
 800aea8:	0800bf54 	.word	0x0800bf54
 800aeac:	ffff0001 	.word	0xffff0001

0800aeb0 <_fwalk_reent>:
 800aeb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aeb4:	4606      	mov	r6, r0
 800aeb6:	4688      	mov	r8, r1
 800aeb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800aebc:	2700      	movs	r7, #0
 800aebe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aec2:	f1b9 0901 	subs.w	r9, r9, #1
 800aec6:	d505      	bpl.n	800aed4 <_fwalk_reent+0x24>
 800aec8:	6824      	ldr	r4, [r4, #0]
 800aeca:	2c00      	cmp	r4, #0
 800aecc:	d1f7      	bne.n	800aebe <_fwalk_reent+0xe>
 800aece:	4638      	mov	r0, r7
 800aed0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aed4:	89ab      	ldrh	r3, [r5, #12]
 800aed6:	2b01      	cmp	r3, #1
 800aed8:	d907      	bls.n	800aeea <_fwalk_reent+0x3a>
 800aeda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aede:	3301      	adds	r3, #1
 800aee0:	d003      	beq.n	800aeea <_fwalk_reent+0x3a>
 800aee2:	4629      	mov	r1, r5
 800aee4:	4630      	mov	r0, r6
 800aee6:	47c0      	blx	r8
 800aee8:	4307      	orrs	r7, r0
 800aeea:	3568      	adds	r5, #104	; 0x68
 800aeec:	e7e9      	b.n	800aec2 <_fwalk_reent+0x12>

0800aeee <__retarget_lock_init_recursive>:
 800aeee:	4770      	bx	lr

0800aef0 <__retarget_lock_acquire_recursive>:
 800aef0:	4770      	bx	lr

0800aef2 <__retarget_lock_release_recursive>:
 800aef2:	4770      	bx	lr

0800aef4 <__swhatbuf_r>:
 800aef4:	b570      	push	{r4, r5, r6, lr}
 800aef6:	460e      	mov	r6, r1
 800aef8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aefc:	2900      	cmp	r1, #0
 800aefe:	b096      	sub	sp, #88	; 0x58
 800af00:	4614      	mov	r4, r2
 800af02:	461d      	mov	r5, r3
 800af04:	da08      	bge.n	800af18 <__swhatbuf_r+0x24>
 800af06:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800af0a:	2200      	movs	r2, #0
 800af0c:	602a      	str	r2, [r5, #0]
 800af0e:	061a      	lsls	r2, r3, #24
 800af10:	d410      	bmi.n	800af34 <__swhatbuf_r+0x40>
 800af12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af16:	e00e      	b.n	800af36 <__swhatbuf_r+0x42>
 800af18:	466a      	mov	r2, sp
 800af1a:	f000 f903 	bl	800b124 <_fstat_r>
 800af1e:	2800      	cmp	r0, #0
 800af20:	dbf1      	blt.n	800af06 <__swhatbuf_r+0x12>
 800af22:	9a01      	ldr	r2, [sp, #4]
 800af24:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800af28:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800af2c:	425a      	negs	r2, r3
 800af2e:	415a      	adcs	r2, r3
 800af30:	602a      	str	r2, [r5, #0]
 800af32:	e7ee      	b.n	800af12 <__swhatbuf_r+0x1e>
 800af34:	2340      	movs	r3, #64	; 0x40
 800af36:	2000      	movs	r0, #0
 800af38:	6023      	str	r3, [r4, #0]
 800af3a:	b016      	add	sp, #88	; 0x58
 800af3c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800af40 <__smakebuf_r>:
 800af40:	898b      	ldrh	r3, [r1, #12]
 800af42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800af44:	079d      	lsls	r5, r3, #30
 800af46:	4606      	mov	r6, r0
 800af48:	460c      	mov	r4, r1
 800af4a:	d507      	bpl.n	800af5c <__smakebuf_r+0x1c>
 800af4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800af50:	6023      	str	r3, [r4, #0]
 800af52:	6123      	str	r3, [r4, #16]
 800af54:	2301      	movs	r3, #1
 800af56:	6163      	str	r3, [r4, #20]
 800af58:	b002      	add	sp, #8
 800af5a:	bd70      	pop	{r4, r5, r6, pc}
 800af5c:	ab01      	add	r3, sp, #4
 800af5e:	466a      	mov	r2, sp
 800af60:	f7ff ffc8 	bl	800aef4 <__swhatbuf_r>
 800af64:	9900      	ldr	r1, [sp, #0]
 800af66:	4605      	mov	r5, r0
 800af68:	4630      	mov	r0, r6
 800af6a:	f7ff f963 	bl	800a234 <_malloc_r>
 800af6e:	b948      	cbnz	r0, 800af84 <__smakebuf_r+0x44>
 800af70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af74:	059a      	lsls	r2, r3, #22
 800af76:	d4ef      	bmi.n	800af58 <__smakebuf_r+0x18>
 800af78:	f023 0303 	bic.w	r3, r3, #3
 800af7c:	f043 0302 	orr.w	r3, r3, #2
 800af80:	81a3      	strh	r3, [r4, #12]
 800af82:	e7e3      	b.n	800af4c <__smakebuf_r+0xc>
 800af84:	4b0d      	ldr	r3, [pc, #52]	; (800afbc <__smakebuf_r+0x7c>)
 800af86:	62b3      	str	r3, [r6, #40]	; 0x28
 800af88:	89a3      	ldrh	r3, [r4, #12]
 800af8a:	6020      	str	r0, [r4, #0]
 800af8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af90:	81a3      	strh	r3, [r4, #12]
 800af92:	9b00      	ldr	r3, [sp, #0]
 800af94:	6163      	str	r3, [r4, #20]
 800af96:	9b01      	ldr	r3, [sp, #4]
 800af98:	6120      	str	r0, [r4, #16]
 800af9a:	b15b      	cbz	r3, 800afb4 <__smakebuf_r+0x74>
 800af9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800afa0:	4630      	mov	r0, r6
 800afa2:	f000 f8d1 	bl	800b148 <_isatty_r>
 800afa6:	b128      	cbz	r0, 800afb4 <__smakebuf_r+0x74>
 800afa8:	89a3      	ldrh	r3, [r4, #12]
 800afaa:	f023 0303 	bic.w	r3, r3, #3
 800afae:	f043 0301 	orr.w	r3, r3, #1
 800afb2:	81a3      	strh	r3, [r4, #12]
 800afb4:	89a0      	ldrh	r0, [r4, #12]
 800afb6:	4305      	orrs	r5, r0
 800afb8:	81a5      	strh	r5, [r4, #12]
 800afba:	e7cd      	b.n	800af58 <__smakebuf_r+0x18>
 800afbc:	0800ad4d 	.word	0x0800ad4d

0800afc0 <_malloc_usable_size_r>:
 800afc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800afc4:	1f18      	subs	r0, r3, #4
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	bfbc      	itt	lt
 800afca:	580b      	ldrlt	r3, [r1, r0]
 800afcc:	18c0      	addlt	r0, r0, r3
 800afce:	4770      	bx	lr

0800afd0 <_raise_r>:
 800afd0:	291f      	cmp	r1, #31
 800afd2:	b538      	push	{r3, r4, r5, lr}
 800afd4:	4604      	mov	r4, r0
 800afd6:	460d      	mov	r5, r1
 800afd8:	d904      	bls.n	800afe4 <_raise_r+0x14>
 800afda:	2316      	movs	r3, #22
 800afdc:	6003      	str	r3, [r0, #0]
 800afde:	f04f 30ff 	mov.w	r0, #4294967295
 800afe2:	bd38      	pop	{r3, r4, r5, pc}
 800afe4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800afe6:	b112      	cbz	r2, 800afee <_raise_r+0x1e>
 800afe8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800afec:	b94b      	cbnz	r3, 800b002 <_raise_r+0x32>
 800afee:	4620      	mov	r0, r4
 800aff0:	f000 f830 	bl	800b054 <_getpid_r>
 800aff4:	462a      	mov	r2, r5
 800aff6:	4601      	mov	r1, r0
 800aff8:	4620      	mov	r0, r4
 800affa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800affe:	f000 b817 	b.w	800b030 <_kill_r>
 800b002:	2b01      	cmp	r3, #1
 800b004:	d00a      	beq.n	800b01c <_raise_r+0x4c>
 800b006:	1c59      	adds	r1, r3, #1
 800b008:	d103      	bne.n	800b012 <_raise_r+0x42>
 800b00a:	2316      	movs	r3, #22
 800b00c:	6003      	str	r3, [r0, #0]
 800b00e:	2001      	movs	r0, #1
 800b010:	e7e7      	b.n	800afe2 <_raise_r+0x12>
 800b012:	2400      	movs	r4, #0
 800b014:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b018:	4628      	mov	r0, r5
 800b01a:	4798      	blx	r3
 800b01c:	2000      	movs	r0, #0
 800b01e:	e7e0      	b.n	800afe2 <_raise_r+0x12>

0800b020 <raise>:
 800b020:	4b02      	ldr	r3, [pc, #8]	; (800b02c <raise+0xc>)
 800b022:	4601      	mov	r1, r0
 800b024:	6818      	ldr	r0, [r3, #0]
 800b026:	f7ff bfd3 	b.w	800afd0 <_raise_r>
 800b02a:	bf00      	nop
 800b02c:	2000001c 	.word	0x2000001c

0800b030 <_kill_r>:
 800b030:	b538      	push	{r3, r4, r5, lr}
 800b032:	4d07      	ldr	r5, [pc, #28]	; (800b050 <_kill_r+0x20>)
 800b034:	2300      	movs	r3, #0
 800b036:	4604      	mov	r4, r0
 800b038:	4608      	mov	r0, r1
 800b03a:	4611      	mov	r1, r2
 800b03c:	602b      	str	r3, [r5, #0]
 800b03e:	f7f8 fbcb 	bl	80037d8 <_kill>
 800b042:	1c43      	adds	r3, r0, #1
 800b044:	d102      	bne.n	800b04c <_kill_r+0x1c>
 800b046:	682b      	ldr	r3, [r5, #0]
 800b048:	b103      	cbz	r3, 800b04c <_kill_r+0x1c>
 800b04a:	6023      	str	r3, [r4, #0]
 800b04c:	bd38      	pop	{r3, r4, r5, pc}
 800b04e:	bf00      	nop
 800b050:	20000850 	.word	0x20000850

0800b054 <_getpid_r>:
 800b054:	f7f8 bbb8 	b.w	80037c8 <_getpid>

0800b058 <__sread>:
 800b058:	b510      	push	{r4, lr}
 800b05a:	460c      	mov	r4, r1
 800b05c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b060:	f000 f894 	bl	800b18c <_read_r>
 800b064:	2800      	cmp	r0, #0
 800b066:	bfab      	itete	ge
 800b068:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b06a:	89a3      	ldrhlt	r3, [r4, #12]
 800b06c:	181b      	addge	r3, r3, r0
 800b06e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b072:	bfac      	ite	ge
 800b074:	6563      	strge	r3, [r4, #84]	; 0x54
 800b076:	81a3      	strhlt	r3, [r4, #12]
 800b078:	bd10      	pop	{r4, pc}

0800b07a <__swrite>:
 800b07a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b07e:	461f      	mov	r7, r3
 800b080:	898b      	ldrh	r3, [r1, #12]
 800b082:	05db      	lsls	r3, r3, #23
 800b084:	4605      	mov	r5, r0
 800b086:	460c      	mov	r4, r1
 800b088:	4616      	mov	r6, r2
 800b08a:	d505      	bpl.n	800b098 <__swrite+0x1e>
 800b08c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b090:	2302      	movs	r3, #2
 800b092:	2200      	movs	r2, #0
 800b094:	f000 f868 	bl	800b168 <_lseek_r>
 800b098:	89a3      	ldrh	r3, [r4, #12]
 800b09a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b09e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b0a2:	81a3      	strh	r3, [r4, #12]
 800b0a4:	4632      	mov	r2, r6
 800b0a6:	463b      	mov	r3, r7
 800b0a8:	4628      	mov	r0, r5
 800b0aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b0ae:	f000 b817 	b.w	800b0e0 <_write_r>

0800b0b2 <__sseek>:
 800b0b2:	b510      	push	{r4, lr}
 800b0b4:	460c      	mov	r4, r1
 800b0b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0ba:	f000 f855 	bl	800b168 <_lseek_r>
 800b0be:	1c43      	adds	r3, r0, #1
 800b0c0:	89a3      	ldrh	r3, [r4, #12]
 800b0c2:	bf15      	itete	ne
 800b0c4:	6560      	strne	r0, [r4, #84]	; 0x54
 800b0c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b0ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b0ce:	81a3      	strheq	r3, [r4, #12]
 800b0d0:	bf18      	it	ne
 800b0d2:	81a3      	strhne	r3, [r4, #12]
 800b0d4:	bd10      	pop	{r4, pc}

0800b0d6 <__sclose>:
 800b0d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0da:	f000 b813 	b.w	800b104 <_close_r>
	...

0800b0e0 <_write_r>:
 800b0e0:	b538      	push	{r3, r4, r5, lr}
 800b0e2:	4d07      	ldr	r5, [pc, #28]	; (800b100 <_write_r+0x20>)
 800b0e4:	4604      	mov	r4, r0
 800b0e6:	4608      	mov	r0, r1
 800b0e8:	4611      	mov	r1, r2
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	602a      	str	r2, [r5, #0]
 800b0ee:	461a      	mov	r2, r3
 800b0f0:	f7f8 fba9 	bl	8003846 <_write>
 800b0f4:	1c43      	adds	r3, r0, #1
 800b0f6:	d102      	bne.n	800b0fe <_write_r+0x1e>
 800b0f8:	682b      	ldr	r3, [r5, #0]
 800b0fa:	b103      	cbz	r3, 800b0fe <_write_r+0x1e>
 800b0fc:	6023      	str	r3, [r4, #0]
 800b0fe:	bd38      	pop	{r3, r4, r5, pc}
 800b100:	20000850 	.word	0x20000850

0800b104 <_close_r>:
 800b104:	b538      	push	{r3, r4, r5, lr}
 800b106:	4d06      	ldr	r5, [pc, #24]	; (800b120 <_close_r+0x1c>)
 800b108:	2300      	movs	r3, #0
 800b10a:	4604      	mov	r4, r0
 800b10c:	4608      	mov	r0, r1
 800b10e:	602b      	str	r3, [r5, #0]
 800b110:	f7f8 fbb5 	bl	800387e <_close>
 800b114:	1c43      	adds	r3, r0, #1
 800b116:	d102      	bne.n	800b11e <_close_r+0x1a>
 800b118:	682b      	ldr	r3, [r5, #0]
 800b11a:	b103      	cbz	r3, 800b11e <_close_r+0x1a>
 800b11c:	6023      	str	r3, [r4, #0]
 800b11e:	bd38      	pop	{r3, r4, r5, pc}
 800b120:	20000850 	.word	0x20000850

0800b124 <_fstat_r>:
 800b124:	b538      	push	{r3, r4, r5, lr}
 800b126:	4d07      	ldr	r5, [pc, #28]	; (800b144 <_fstat_r+0x20>)
 800b128:	2300      	movs	r3, #0
 800b12a:	4604      	mov	r4, r0
 800b12c:	4608      	mov	r0, r1
 800b12e:	4611      	mov	r1, r2
 800b130:	602b      	str	r3, [r5, #0]
 800b132:	f7f8 fbb0 	bl	8003896 <_fstat>
 800b136:	1c43      	adds	r3, r0, #1
 800b138:	d102      	bne.n	800b140 <_fstat_r+0x1c>
 800b13a:	682b      	ldr	r3, [r5, #0]
 800b13c:	b103      	cbz	r3, 800b140 <_fstat_r+0x1c>
 800b13e:	6023      	str	r3, [r4, #0]
 800b140:	bd38      	pop	{r3, r4, r5, pc}
 800b142:	bf00      	nop
 800b144:	20000850 	.word	0x20000850

0800b148 <_isatty_r>:
 800b148:	b538      	push	{r3, r4, r5, lr}
 800b14a:	4d06      	ldr	r5, [pc, #24]	; (800b164 <_isatty_r+0x1c>)
 800b14c:	2300      	movs	r3, #0
 800b14e:	4604      	mov	r4, r0
 800b150:	4608      	mov	r0, r1
 800b152:	602b      	str	r3, [r5, #0]
 800b154:	f7f8 fbaf 	bl	80038b6 <_isatty>
 800b158:	1c43      	adds	r3, r0, #1
 800b15a:	d102      	bne.n	800b162 <_isatty_r+0x1a>
 800b15c:	682b      	ldr	r3, [r5, #0]
 800b15e:	b103      	cbz	r3, 800b162 <_isatty_r+0x1a>
 800b160:	6023      	str	r3, [r4, #0]
 800b162:	bd38      	pop	{r3, r4, r5, pc}
 800b164:	20000850 	.word	0x20000850

0800b168 <_lseek_r>:
 800b168:	b538      	push	{r3, r4, r5, lr}
 800b16a:	4d07      	ldr	r5, [pc, #28]	; (800b188 <_lseek_r+0x20>)
 800b16c:	4604      	mov	r4, r0
 800b16e:	4608      	mov	r0, r1
 800b170:	4611      	mov	r1, r2
 800b172:	2200      	movs	r2, #0
 800b174:	602a      	str	r2, [r5, #0]
 800b176:	461a      	mov	r2, r3
 800b178:	f7f8 fba8 	bl	80038cc <_lseek>
 800b17c:	1c43      	adds	r3, r0, #1
 800b17e:	d102      	bne.n	800b186 <_lseek_r+0x1e>
 800b180:	682b      	ldr	r3, [r5, #0]
 800b182:	b103      	cbz	r3, 800b186 <_lseek_r+0x1e>
 800b184:	6023      	str	r3, [r4, #0]
 800b186:	bd38      	pop	{r3, r4, r5, pc}
 800b188:	20000850 	.word	0x20000850

0800b18c <_read_r>:
 800b18c:	b538      	push	{r3, r4, r5, lr}
 800b18e:	4d07      	ldr	r5, [pc, #28]	; (800b1ac <_read_r+0x20>)
 800b190:	4604      	mov	r4, r0
 800b192:	4608      	mov	r0, r1
 800b194:	4611      	mov	r1, r2
 800b196:	2200      	movs	r2, #0
 800b198:	602a      	str	r2, [r5, #0]
 800b19a:	461a      	mov	r2, r3
 800b19c:	f7f8 fb36 	bl	800380c <_read>
 800b1a0:	1c43      	adds	r3, r0, #1
 800b1a2:	d102      	bne.n	800b1aa <_read_r+0x1e>
 800b1a4:	682b      	ldr	r3, [r5, #0]
 800b1a6:	b103      	cbz	r3, 800b1aa <_read_r+0x1e>
 800b1a8:	6023      	str	r3, [r4, #0]
 800b1aa:	bd38      	pop	{r3, r4, r5, pc}
 800b1ac:	20000850 	.word	0x20000850

0800b1b0 <_init>:
 800b1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1b2:	bf00      	nop
 800b1b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1b6:	bc08      	pop	{r3}
 800b1b8:	469e      	mov	lr, r3
 800b1ba:	4770      	bx	lr

0800b1bc <_fini>:
 800b1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1be:	bf00      	nop
 800b1c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1c2:	bc08      	pop	{r3}
 800b1c4:	469e      	mov	lr, r3
 800b1c6:	4770      	bx	lr
